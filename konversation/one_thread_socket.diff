Index: server.cpp
===================================================================
RCS file: /home/kde/kdeextragear-2/konversation/konversation/server.cpp,v
retrieving revision 1.238
diff -u -r1.238 server.cpp
--- server.cpp	20 Aug 2004 13:07:28 -0000	1.238
+++ server.cpp	20 Aug 2004 14:35:56 -0000
@@ -35,16 +35,16 @@
 #include <kdebug.h>
 #include <kfiledialog.h>
 #include <kmessagebox.h>
+#include <kstringhandler.h>
+#include <kdeversion.h>
+#include <kextendedsocket.h>
 #if KDE_IS_VERSION(3,2,90)
 #include <kresolver.h>
 #endif
-#include <kstringhandler.h>
-#include <kdeversion.h>
 
 #include "server.h"
 #include "query.h"
 #include "channel.h"
-#include "ircserversocket.h"
 #include "konversationapplication.h"
 #include "dccpanel.h"
 #include "dcctransfer.h"
@@ -99,7 +99,6 @@
   serverPort=serverEntry[2].toInt();
   serverKey=serverEntry[3];
 
-  resolver.setRecipient(this);
   installEventFilter(this);
 
   lastDccDir=QString::null;
@@ -196,7 +195,6 @@
   serverPort=port.toInt();
   serverKey=password;
 
-  resolver.setRecipient(this);
   installEventFilter(this);
 
   lastDccDir=QString::null;
@@ -251,10 +249,13 @@
 {
   kdDebug() << "Server::~Server(" << getServerName() << ")" << endl;
 
+  // Make sure no signals get sent to a soon to be dying Server Window
+  serverSocket->blockSignals(true);
+  serverSocket->closeNow();
+  delete serverSocket;
+
   // clear nicks online
   emit nicksNowOnline(this,QStringList(),true);
-  // Make sure no signals get sent to a soon to be dying Server Window
-  serverSocket.blockSignals(true);
   // Send out the last messages (usually the /QUIT)
   send();
 
@@ -285,14 +286,7 @@
   queryList.clear();
 #endif
 
-  // kill resolver thread if it's still running
-#if KDE_VERSION >= 310
-  if(resolver.running()) resolver.terminate();
-#else
-  if(resolver.running()) resolver.exit();
-#endif
-
-  // Delete all the NickInfos and ChannelNick structures.
+   // Delete all the NickInfos and ChannelNick structures.
   allNicks.clear();
   ChannelMembershipMap::Iterator it;
   for ( it = joinedChannels.begin(); it != joinedChannels.end(); ++it ) delete it.data();
@@ -387,11 +381,11 @@
   connect(this,SIGNAL(addDccPanel()),getMainWindow(),SLOT(addDccPanel()) );
   connect(this,SIGNAL(addKonsolePanel()),getMainWindow(),SLOT(addKonsolePanel()) );
 
-  connect(&serverSocket,SIGNAL (connectionSuccess())  ,this,SLOT (ircServerConnectionSuccess()) );
-  connect(&serverSocket,SIGNAL (connectionFailed(int)),this,SLOT (broken(int)) );
-  connect(&serverSocket,SIGNAL (readyRead()),this,SLOT (incoming()) );
-  connect(&serverSocket,SIGNAL (readyWrite()),this,SLOT (send()) );
-  connect(&serverSocket,SIGNAL (closed(int)),this,SLOT (broken(int)) );
+  connect(serverSocket,SIGNAL (connectionSuccess())  ,this,SLOT (ircServerConnectionSuccess()) );
+  connect(serverSocket,SIGNAL (connectionFailed(int)),this,SLOT (broken(int)) );
+  connect(serverSocket,SIGNAL (readyRead()),this,SLOT (incoming()) );
+  connect(serverSocket,SIGNAL (readyWrite()),this,SLOT (send()) );
+  connect(serverSocket,SIGNAL (closed(int)),this,SLOT (broken(int)) );
 
   connect(getMainWindow(),SIGNAL(prefsChanged()),KonversationApplication::kApplication(),SLOT(saveOptions()));
   connect(getMainWindow(),SIGNAL(openPrefsDialog()),KonversationApplication::kApplication(),SLOT(openPrefsDialog()));
@@ -428,7 +422,7 @@
 QString Server::getAutoJoinChannelKey() const { return autoJoinChannelKey; }
 void Server::setAutoJoinChannelKey(const QString &key) { autoJoinChannelKey=key; }
 
-bool Server::isConnected()  const { return serverSocket.socketStatus()==KExtendedSocket::connected; }
+bool Server::isConnected()  const { return serverSocket->socketStatus()==KExtendedSocket::connected; }
 bool Server::isConnecting() const { return connecting; }
 
 void Server::preShellCommandExited(KProcess* proc)
@@ -444,9 +438,10 @@
 
 void Server::connectToIRCServer()
 {
+  serverSocket = new KExtendedSocket(serverName,serverPort);
   outputBuffer.clear();
   deliberateQuit=false;
-  serverSocket.blockSignals(false);
+  serverSocket->blockSignals(false);
   connecting=true;
 
   // prevent sending queue until server has sent something or the timeout is through
@@ -462,34 +457,20 @@
   else
   {
     // clean up everything
-    serverSocket.reset();
-    // set up the connection details
-    serverSocket.setAddress(serverName,serverPort);
+    serverSocket->reset();
+    serverSocket->setAddress(serverName,serverPort);
 
     // reset server/network properites to RFC1459 compatible modes as default.
     setPrefixes("ov","@+");
 
     // (re)connect. Autojoin will be done by the input filter
-    statusView->appendServerMessage(i18n("Info"),i18n("Looking for server %1:%2...").arg(serverSocket.host()).arg(serverSocket.port()));
-
+    statusView->appendServerMessage(i18n("Info"),i18n("Looking for server %1:%2...").arg(serverSocket->host()).arg(serverSocket->port()));
+    
+    if( serverSocket->startAsyncLookup() == 0 )
+      connect(serverSocket,SIGNAL(lookupFinished(int)),this,SLOT(lookupFinished()));
+    else
+      emit broken(-1);
     
-    // Okay, here's the deal.
-    // ASYNC look ups with KExtendedLookup are broke. See   http://bugs.kde.org/show_bug.cgi?id=50279
-    // The code before used to have a resolver class.  This runs in a seperate thread, and does a lookup.
-    // However, the serverSocket isn't thread safe, and now both the Server and IRCResolver are using
-    // the serverSocket in seperate threads.  This means you could call the resolver to do a lookup, but
-    // then modify the serverSocket in the server class, then when the resolver does the lookup, it is using
-    // the modified version.  Not to mention problems with the server and ircresolver modifying serversocket
-    // at the same instant.
-    // For now, I'm disabling the resolver code until either kde4 when hopefully async lookups are done, or until
-    // someone moves all the serversocket code into a seperate thread, so only one thread ever modifies or uses
-    // the serversocket.
-    serverSocket.lookup(); //sync lookup
-    lookupFinished();      //call this manually. with async code below, an event is called from resolver which is captured and runs lookupFinished()
-
-    // QDns is broken, so don't use async lookup, use own threaded class instead
-    //resolver.setSocket(&serverSocket);
-    //resolver.start();
   }
 }
 
@@ -582,20 +563,16 @@
   }
   return QObject::eventFilter(parent,event);
 }
-/** Called when the remote servers IP has been found.
- * connectToIRCServer does a lookup on the server name.
- * In async mode, lookups are done via the ircresolver class, which is a thread.  This does a blocking serverSocket->lookup
- * which send a QEvent::User when done, which inputfilter picks up, and calls this.
- */
+
 void Server::lookupFinished()
 {
   // error during lookup
-  if(serverSocket.status())
+  if(serverSocket->status())
   {
     // inform user about the error
-    statusView->appendServerMessage(i18n("Error"),i18n("Server %1 not found.  %2").arg(serverName).arg(serverSocket.strError(serverSocket.status(), serverSocket.systemError())));
+    statusView->appendServerMessage(i18n("Error"),i18n("Server %1 not found.  %2").arg(serverName).arg(serverSocket->strError(serverSocket->status(), serverSocket->systemError())));
 
-    serverSocket.resetStatus();
+    serverSocket->resetStatus();
     // prevent retrying to connect
 //    autoReconnect=0;
     // broken connection
@@ -604,7 +581,7 @@
   else
   {
     statusView->appendServerMessage(i18n("Info"),i18n("Server found, connecting..."));
-    serverSocket.startAsyncConnect();
+    serverSocket->startAsyncConnect();
   }
 }
 
@@ -639,7 +616,7 @@
 
   emit nicknameChanged(getNickname());
 
-  serverSocket.enableRead(true);
+  serverSocket->enableRead(true);
 
   // wait at most 2 seconds for server to send something before sending the queue ourselves
   unlockTimer.start(2000);
@@ -647,15 +624,15 @@
 
 void Server::broken(int state)
 {
-  serverSocket.enableRead(false);
-  serverSocket.enableWrite(false);
-  serverSocket.blockSignals(true);
+  serverSocket->enableRead(false);
+  serverSocket->enableWrite(false);
+  serverSocket->blockSignals(true);
 
   alreadyConnected=false;
   connecting=false;
   outputBuffer.clear();
 
-  kdDebug() << "Connection broken (Socket fd " << serverSocket.fd() << ") " << state << "!" << endl;
+  kdDebug() << "Connection broken (Socket fd " << serverSocket->fd() << ") " << state << "!" << endl;
 
   // clear nicks online
   emit nicksNowOnline(this,QStringList(),true);
@@ -918,7 +895,7 @@
     if(KonversationApplication::preferences.getAutoReconnect() &&
       (checkTime/1000)==KonversationApplication::preferences.getMaximumLagTime())
     {
-      serverSocket.close();
+      serverSocket->close();
     }
   }
 }
@@ -977,7 +954,7 @@
   char buffer[BUFFER_LEN];
   int len = 0;
 
-  len = read(serverSocket.fd(),buffer,BUFFER_LEN-1);
+  len = read(serverSocket->fd(),buffer,BUFFER_LEN-1);
   if(len==-1) {
         statusView->appendServerMessage(i18n("Error"),i18n("There was an error reading the data from the server: %1").arg(strerror(errno)));
 	broken(0);
@@ -1061,7 +1038,7 @@
     else if(outputLine.startsWith("QUIT")) setDeliberateQuit(true);
 
     // wrap server socket into a stream
-    QTextStream serverStream(&serverSocket);
+    QTextStream serverStream(serverSocket);
 
     // init stream props
     serverStream.setEncoding(QTextStream::Locale);
@@ -1302,8 +1279,8 @@
 QString Server::getIp()
 {
   //Below is the deprecated way.  Checking the docs, the correct way seems to be in 3.2
-//  KSocketAddress* ipAddr=KExtendedSocket::localAddress(serverSocket.fd());
-  const KSocketAddress*ipAddr = serverSocket.localAddress();
+//  KSocketAddress* ipAddr=KExtendedSocket::localAddress(serverSocket->fd());
+  const KSocketAddress*ipAddr = serverSocket->localAddress();
   if(ipAddr)
   {
     KInetSocketAddress inetSocket((const sockaddr_in*)ipAddr->address(),ipAddr->size());
@@ -1312,10 +1289,9 @@
     QString ip(KInetSocketAddress::addrToString(inetSocket.family(),&in_addr));
     // remove temporary object - only in deprecated way
     //delete ipAddr;
-    kdDebug() << "in getIp(), serverSocket.localAddress() returns " << ip << endl;
     return ip;
   }
-  kdDebug() << "in getIp(), serverSocket.localAddress() is returning NULL" <<endl;
+  kdDebug() << "in getIp(), serverSocket->localAddress() is returning NULL" <<endl;
   return QString::null;
 }
 
Index: server.h
===================================================================
RCS file: /home/kde/kdeextragear-2/konversation/konversation/server.h,v
retrieving revision 1.120
diff -u -r1.120 server.h
--- server.h	19 Aug 2004 11:04:54 -0000	1.120
+++ server.h	20 Aug 2004 14:36:02 -0000
@@ -27,8 +27,7 @@
 #include "channelnick.h"
 #include "inputfilter.h"
 #include "outputfilter.h"
-#include "ircserversocket.h"
-#include "ircresolver.h"
+
 
 #include "dcctransfer.h"
 #include "nickinfo.h"
@@ -45,6 +44,7 @@
 class RawLog;
 class ChannelListPanel;
 class ScriptLauncher;
+class KExtendedSocket;
 
 class Server : public QObject
 {
@@ -218,6 +218,7 @@
   public slots:
     void preShellCommandExited(KProcess*);
     void connectToIRCServer();
+    void lookupFinished();
     void queue(const QString &buffer);
     void queueList(const QStringList &buffer);
     void queueAt(uint pos,const QString& buffer);
@@ -296,7 +297,6 @@
 
     bool eventFilter(QObject* parent, QEvent *event);
 
-    void lookupFinished();
     void startNotifyCheckTimer();
     bool isAChannel(const QString &check);
     void setIdentity(Identity *newIdentity);
@@ -349,7 +349,6 @@
     QString serverNickPrefixes;     // Prefixes used by the server to indicate a mode
     QString serverNickPrefixModes;  // if supplied: modes related to those prefixes
 
-    IRCResolver resolver;
     Identity* identity;
 
     bool autoJoin;
@@ -363,7 +362,7 @@
     QString autoJoinChannelKey;
 
     KonversationMainWindow* mainWindow;
-    IRCServerSocket serverSocket;
+    KExtendedSocket* serverSocket;
 
     QTimer reconnectTimer;
     QTimer incomingTimer;
