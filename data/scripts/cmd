#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 2 of
# the License or (at your option) version 3 or any later version
# accepted by the membership of KDE e.V. (or its successor appro-
# ved by the membership of KDE e.V.), which shall act as a proxy
# defined in Section 14 of version 3 of the license.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see http://www.gnu.org/licenses/.
#
# Copyright (C) 2011 Eike Hein


"""
Used to run a shell command from within Konversation and capture the output.

stdout is sent to the IRC server; stderr is shown only to the user.

"""

import subprocess
import sys

import konversation.i18n
from konversation.dbus import *


if __name__ == '__main__':
    abort_if_standalone()

    konversation.dbus.prefix = 'cmd: '

    if len(sys.argv) < 4:
        konversation.i18n.init()
        error(_("You need to specify a command."))
        sys.exit(0)

    command = ' '.join(sys.argv[3:])

    result = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True).communicate()

    stdout = [line.rstrip() for line in result[0].decode().splitlines() if len(line.strip())]
    stderr = [line.rstrip() for line in result[1].decode().splitlines() if len(line.strip())]

    if not stdout and not stderr:
        konversation.i18n.init()
        info(_("The command executed succesfully, but did not return any output or only whitespace."))
    else:
        if len(konversation.dbus.target):
            # Send stdout to IRC server.
            for line in stdout:
                say(line)
        else:
            # Fall back to info if TARGET is zero-length (usually means we
            # were called from a server tab).
            for line in stdout:
                info(line)

        # Show stderr to user.
        for line in stderr:
            error(line)
