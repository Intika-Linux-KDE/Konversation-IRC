Index: src/preferences_base.kcfgc
===================================================================
--- src/preferences_base.kcfgc	(revision 0)
+++ src/preferences_base.kcfgc	(revision 459106)
@@ -0,0 +1,9 @@
+ClassName=PreferencesBase
+File=konversation.kcfg
+GlobalEnums=true
+ItemAccessors=true
+MemberVariables=private
+Mutators=true
+SetUserTexts=true
+Singleton=true
+
Index: src/prefsdialog.cpp
===================================================================
--- src/prefsdialog.cpp	(revision 454905)
+++ src/prefsdialog.cpp	(working copy)
@@ -26,89 +26,81 @@
 
 #include "konversationapplication.h"
 #include "prefspagebehaviour.h"
-#include "prefspagechatwinbehavior.h"
 #include "prefspagechatwinappearance.h"
-#include "prefspagecolorsappearance.h"
 #include "prefspageconnectionbehavior.h"
 #include "prefspagefontsappearance.h"
 #include "prefspagenicklistbehavior.h"
 
-PrefsDialog::PrefsDialog(QWidget* parent, Preferences* preferences) :
+PrefsDialog::PrefsDialog(QWidget* parent) :
 KDialogBase (KDialogBase::TreeList,i18n("Edit Preferences"),
 KDialogBase::Ok | KDialogBase::Apply | KDialogBase::Cancel,
 KDialogBase::Ok, parent, "edit_prefs", false, true)
 {
-    setPreferences(preferences);
     setShowIconsInTreeList(true);
 
     lastPane = 0;
 
-    setFolderIcon(QStringList::split(',', i18n("Appearance")), SmallIcon("looknfeel"));
-    chatWinAppearancePane = addVBoxPage(QStringList::split(',', i18n("Appearance") + "," + i18n("Chat Window")), QString::null, SmallIcon("view_text"));
-    QWidget* fontsAppearancePane = addVBoxPage(QStringList::split(',', i18n("Appearance") + "," + i18n("Fonts")), QString::null, SmallIcon("fonts"));
-    QWidget* colorsAppearancePane = addVBoxPage(QStringList::split(',', i18n("Appearance") + "," + i18n("Colors")),
-        QString::null, SmallIcon("colorize"));
-    QWidget* themesPane = addVBoxPage(QStringList::split(',', i18n("Appearance") + "," + i18n("Themes")),
-        QString::null, SmallIcon("iconthemes"));
+//    setFolderIcon(QStringList::split(',', i18n("Appearance")), SmallIcon("looknfeel"));
+//    chatWinAppearancePane = addVBoxPage(QStringList::split(',', i18n("Appearance") + "," + i18n("Chat Window")), QString::null, SmallIcon("view_text"));
+//    QWidget* fontsAppearancePane = addVBoxPage(QStringList::split(',', i18n("Appearance") + "," + i18n("Fonts")), QString::null, SmallIcon("fonts"));
+//    QWidget* themesPane = addVBoxPage(QStringList::split(',', i18n("Appearance") + "," + i18n("Themes")),
+//       QString::null, SmallIcon("iconthemes"));
 
-    setFolderIcon(QStringList::split(',', i18n("Behavior")), SmallIcon("configure"));
-    QWidget* generalBehaviorPane = addVBoxPage(QStringList::split(',', i18n("Behavior") + "," + i18n("General")),
-        QString::null,SmallIcon("exec"));
-    QWidget* connectionBehaviorPane = addVBoxPage(QStringList::split(',', i18n("Behavior") + "," + i18n("Connection")),
-        QString::null,SmallIcon("connect_creating"));
-    QWidget* chatWinBehaviorPane = addVBoxPage(QStringList::split(',', i18n("Behavior") + "," + i18n("Chat Window")),QString::null, SmallIcon("view_text"));
-    QWidget* nicklistBehaviorPane = addVBoxPage(QStringList::split(',', i18n("Behavior") + "," + i18n("Nickname List")),QString::null, SmallIcon("player_playlist"));
-    QWidget* tabBehaviorPane = addVBoxPage(QStringList::split(',', i18n("Behavior") + "," + i18n("Tab Bar")),
-        QString::null, SmallIcon("tab_new"));
+//    setFolderIcon(QStringList::split(',', i18n("Behavior")), SmallIcon("configure"));
+//    QWidget* generalBehaviorPane = addVBoxPage(QStringList::split(',', i18n("Behavior") + "," + i18n("General")),
+//        QString::null,SmallIcon("exec"));
+//    QWidget* connectionBehaviorPane = addVBoxPage(QStringList::split(',', i18n("Behavior") + "," + i18n("Connection")),
+//        QString::null,SmallIcon("connect_creating"));
+//  QWidget* nicklistBehaviorPane = addVBoxPage(QStringList::split(',', i18n("Behavior") + "," + i18n("Nickname List")),QString::null, SmallIcon("player_playlist"));
+//    QWidget* tabBehaviorPane = addVBoxPage(QStringList::split(',', i18n("Behavior") + "," + i18n("Tab Bar")),
+//        QString::null, SmallIcon("tab_new"));
     QWidget* ignorePane = addVBoxPage(QStringList::split(',', i18n("Behavior")+ "," + i18n("Ignored Nicknames")),
         QString::null, SmallIcon("editdelete"));
-    QWidget* aliasesPane = addVBoxPage(QStringList::split(',', i18n("Behavior")+ "," + i18n("Command Aliases")),
-        QString::null,SmallIcon("editcopy"));
-    QWidget* buttonsPane = addVBoxPage(QStringList::split(',', i18n("Behavior")+ "," + i18n("Quick Buttons")),
-        QString::null, SmallIcon("keyboard"));
-    QWidget* logSettingsPane = addVBoxPage(QStringList::split(',', i18n("Behavior")+ "," + i18n("Logging")),
-        QString::null,SmallIcon("log"));
+//    QWidget* aliasesPane = addVBoxPage(QStringList::split(',', i18n("Behavior")+ "," + i18n("Command Aliases")),
+//        QString::null,SmallIcon("editcopy"));
+//    QWidget* buttonsPane = addVBoxPage(QStringList::split(',', i18n("Behavior")+ "," + i18n("Quick Buttons")),
+//        QString::null, SmallIcon("keyboard"));
+//  QWidget* logSettingsPane = addVBoxPage(QStringList::split(',', i18n("Behavior")+ "," + i18n("Logging")),
+//      QString::null,SmallIcon("log"));
     QWidget* dccSettingsPane = addVBoxPage(QStringList::split(',', i18n("Behavior")+ "," + i18n("DCC")),
         QString::null,SmallIcon("2rightarrow" ));
 
-    setFolderIcon(QStringList::split(',', i18n("Notification")), SmallIcon("knotify"));
-    notifyPane = addVBoxPage(QStringList::split(',', i18n("Notification") + "," + i18n("Watched Nicknames")),
-        QString::null,SmallIcon("kfind"));
-    QWidget* highlightPane = addVBoxPage(QStringList::split(',', i18n("Notification") + "," + i18n("Highlighting"))   ,QString::null,SmallIcon("paintbrush"));
-    OSDPane = addVBoxPage(QStringList::split(',', i18n("Notification") + "," + i18n("On Screen Display")),
-        QString::null, SmallIcon("tv"));
+//    setFolderIcon(QStringList::split(',', i18n("Notification")), SmallIcon("knotify"));
+//    notifyPane = addVBoxPage(QStringList::split(',', i18n("Notification") + "," + i18n("Watched Nicknames")),
+//        QString::null,SmallIcon("kfind"));
+//    QWidget* highlightPane = addVBoxPage(QStringList::split(',', i18n("Notification") + "," + i18n("Highlighting"))   ,QString::null,SmallIcon("paintbrush"));
+//    OSDPane = addVBoxPage(QStringList::split(',', i18n("Notification") + "," + i18n("On Screen Display")),
+//        QString::null, SmallIcon("tv"));
 
-    QWidget* dialogsPane = addVBoxPage(i18n("Warning Dialogs"), QString::null, SmallIcon("messagebox_warning"));
+//    QWidget* dialogsPane = addVBoxPage(i18n("Warning Dialogs"), QString::null, SmallIcon("messagebox_warning"));
 
     // TODO: Uncomment this again when it's ready to go
     // QWidget* scriptsPane        =addPage(i18n("Scripting"));
 
     // Add pages to preferences dialog
-    PrefsPageChatWinAppearance* chatWinAppearancePage = new PrefsPageChatWinAppearance(chatWinAppearancePane, preferences);
-    PrefsPageFontsAppearance* fontsAppearancePage = new PrefsPageFontsAppearance(fontsAppearancePane, preferences);
-    PrefsPageColorsAppearance* colorsAppearancePage = new PrefsPageColorsAppearance(colorsAppearancePane, preferences);
+/*    PrefsPageChatWinAppearance* chatWinAppearancePage = new PrefsPageChatWinAppearance(chatWinAppearancePane);
+    PrefsPageFontsAppearance* fontsAppearancePage = new PrefsPageFontsAppearance(fontsAppearancePane);
 
-    PrefsPageBehaviour* generalBehaviorPage = new PrefsPageBehaviour(generalBehaviorPane, preferences);
-    PrefsPageConnectionBehavior* connectionBehaviorPage = new PrefsPageConnectionBehavior(connectionBehaviorPane, preferences);
-    PrefsPageChatWinBehavior* chatWinBehaviorPage = new PrefsPageChatWinBehavior(chatWinBehaviorPane, preferences);
-    PrefsPageNicklistBehavior* nicklistBehaviorPage = new PrefsPageNicklistBehavior(nicklistBehaviorPane, preferences);
-    tabBehaviorPage = new PrefsPageTabBehavior(tabBehaviorPane, preferences);
-    ignorePage = new PrefsPageIgnore(ignorePane, preferences);
-    aliasesPage = new PrefsPageAliases(aliasesPane, preferences);
-    buttonsPage = new PrefsPageButtons(buttonsPane, preferences);
-    logSettingsPage = new PrefsPageLog(logSettingsPane, preferences);
-    dccSettingsPage = new PrefsPageDccSettings(dccSettingsPane, preferences);
+    PrefsPageBehaviour* generalBehaviorPage = new PrefsPageBehaviour(generalBehaviorPane);
+    PrefsPageConnectionBehavior* connectionBehaviorPage = new PrefsPageConnectionBehavior(connectionBehaviorPane);
+    PrefsPageNicklistBehavior* nicklistBehaviorPage = new PrefsPageNicklistBehavior(nicklistBehaviorPane);
+    tabBehaviorPage = new PrefsPageTabBehavior(tabBehaviorPane);
+    ignorePage = new PrefsPageIgnore(ignorePane);
+    aliasesPage = new PrefsPageAliases(aliasesPane);
+    buttonsPage = new PrefsPageButtons(buttonsPane);
+    logSettingsPage = new PrefsPageLog(logSettingsPane);
+    dccSettingsPage = new PrefsPageDccSettings(dccSettingsPane);
 
-    notifyPage = new PrefsPageNotify(notifyPane,preferences);
-    highlightPage = new PrefsPageHighlight(highlightPane,preferences);
-    OSDPage = new PrefsPageOSD(OSDPane,preferences);
+    notifyPage = new PrefsPageNotify(notifyPane);
+    highlightPage = new PrefsPageHighlight(highlightPane);
+    OSDPage = new PrefsPageOSD(OSDPane);
 
-    dialogsPage = new PrefsPageDialogs(dialogsPane,preferences);
+    dialogsPage = new PrefsPageDialogs(dialogsPane);
 
-    themesPage = new PrefsPageThemes(themesPane,preferences);
+    themesPage = new PrefsPageThemes(themesPane);
 
     // TODO: Uncomment this again when it's ready to go
-    // PrefsPageScripts* scriptsPage=new PrefsPageScripts(scriptsPane, preferences);
+    // PrefsPageScripts* scriptsPage=new PrefsPageScripts(scriptsPane);
 
     setButtonOK(KGuiItem(i18n("&OK"),"button_ok",i18n("Keep changes made to configuration and close the window")));
     setButtonApply(KGuiItem(i18n("&Apply"),"apply",i18n("Keep changes made to configuration")));
@@ -117,12 +109,10 @@
     // connect standard signals and slots
     connect(this, SIGNAL(applyPreferences()), chatWinAppearancePage, SLOT(applyPreferences()));
     connect(this, SIGNAL(applyPreferences()), fontsAppearancePage, SLOT(applyPreferences()));
-    connect(this, SIGNAL(applyPreferences()), colorsAppearancePage, SLOT(applyPreferences()));
     connect(this, SIGNAL(applyPreferences()), themesPage, SLOT(applyPreferences()));
 
     connect(this, SIGNAL(applyPreferences()), generalBehaviorPage, SLOT(applyPreferences()));
     connect(this, SIGNAL(applyPreferences()), connectionBehaviorPage, SLOT(applyPreferences()));
-    connect(this, SIGNAL(applyPreferences()), chatWinBehaviorPage, SLOT(applyPreferences()));
     connect(this, SIGNAL(applyPreferences()), nicklistBehaviorPage, SLOT(applyPreferences()));
     connect(this, SIGNAL(applyPreferences()), tabBehaviorPage, SLOT(applyPreferences()));
     connect(this, SIGNAL(applyPreferences()), buttonsPage, SLOT(applyPreferences()));
@@ -154,7 +144,7 @@
     showPage(lastActiveModule);
     if(lastActiveModule == pageIndex(OSDPane))
         OSDPage->aboutToShow();
-    unfoldTreeList(true);
+    unfoldTreeList(true);*/
 }
 
 PrefsDialog::~PrefsDialog()
@@ -188,11 +178,6 @@
     emit cancelClicked();
 }
 
-void PrefsDialog::setPreferences(Preferences* newPrefs)
-{
-    preferences = newPrefs;
-}
-
 void PrefsDialog::openPage(Preferences::Pages page)
 {
     if(page==Preferences::NotifyPage)
Index: src/prefspagenicklistbehavior.h
===================================================================
--- src/prefspagenicklistbehavior.h	(revision 454905)
+++ src/prefspagenicklistbehavior.h	(working copy)
@@ -20,7 +20,7 @@
 {
     Q_OBJECT
         public:
-        PrefsPageNicklistBehavior(QWidget* newParent, Preferences* newPreferences);
+        PrefsPageNicklistBehavior(QWidget* newParent);
 
     public slots:
         void applyPreferences();
@@ -30,7 +30,5 @@
         void moveUp();
         void moveDown();
 
-    private:
-        Preferences* preferences;
 };
 #endif
Index: src/statuspanel.cpp
===================================================================
--- src/statuspanel.cpp	(revision 454905)
+++ src/statuspanel.cpp	(working copy)
@@ -50,10 +50,10 @@
 
     nicknameCombobox=new QComboBox(commandLineBox);
     nicknameCombobox->setEditable(true);
-    nicknameCombobox->insertStringList(KonversationApplication::preferences.getNicknameList());
+    nicknameCombobox->insertStringList(Preferences::nicknameList());
     oldNick=nicknameCombobox->currentText();
 
-    setShowNicknameBox(KonversationApplication::preferences.showNicknameBox());
+    setShowNicknameBox(Preferences::showNicknameBox());
 
     awayLabel=new QLabel(i18n("(away)"),commandLineBox);
     awayLabel->hide();
@@ -62,7 +62,7 @@
     getTextView()->installEventFilter(statusInput);
     statusInput->installEventFilter(this);
 
-    setLog(KonversationApplication::preferences.getLog());
+    setLog(Preferences::log());
     setLogfileName("konversation");
 
     connect(getTextView(),SIGNAL (gotFocus()),statusInput,SLOT (setFocus()) );
@@ -139,7 +139,7 @@
         for(unsigned int index=0;index<multiline.count();index++)
         {
             QString line=multiline[index];
-            QString cChar(KonversationApplication::preferences.getCommandChar());
+            QString cChar(Preferences::commandChar());
             // make sure that lines starting with command char get escaped
             if(line.startsWith(cChar)) line=cChar+line;
             sendStatusText(line);
@@ -149,41 +149,38 @@
 
 void StatusPanel::updateFonts()
 {
-    QString fgString;
-    QString bgString;
-
-    if(KonversationApplication::preferences.getColorInputFields())
+    QColor fg;
+    QColor bg;
+    if(Preferences::inputFieldsBackgroundColor())
     {
-        fgString="#"+KonversationApplication::preferences.getColor("ChannelMessage");
-        bgString="#"+KonversationApplication::preferences.getColor("TextViewBackground");
+        fg=Preferences::color(Preferences::ChannelMessage);
+        bg=Preferences::color(Preferences::TextViewBackground);
     }
     else
     {
-        fgString=colorGroup().foreground().name();
-        bgString=colorGroup().base().name();
+        fg=colorGroup().foreground();
+        bg=colorGroup().base();
     }
 
-    const QColor fg(fgString);
-    const QColor bg(bgString);
 
     statusInput->setPaletteForegroundColor(fg);
     statusInput->setPaletteBackgroundColor(bg);
-    statusInput->setFont(KonversationApplication::preferences.getTextFont());
+    statusInput->setFont(Preferences::textFont());
 
-    getTextView()->setFont(KonversationApplication::preferences.getTextFont());
+    getTextView()->setFont(Preferences::textFont());
 
-    if(KonversationApplication::preferences.getShowBackgroundImage())
+    if(Preferences::showBackgroundImage())
     {
-        getTextView()->setViewBackground(KonversationApplication::preferences.getColor("TextViewBackground"),
-            KonversationApplication::preferences.getBackgroundImageName());
+        getTextView()->setViewBackground(Preferences::color(Preferences::TextViewBackground),
+            Preferences::backgroundImage());
     }
     else
     {
-        getTextView()->setViewBackground(KonversationApplication::preferences.getColor("TextViewBackground"),
+        getTextView()->setViewBackground(Preferences::color(Preferences::TextViewBackground),
             QString::null);
     }
 
-    nicknameCombobox->setFont(KonversationApplication::preferences.getTextFont());
+    nicknameCombobox->setFont(Preferences::textFont());
 }
 
 void StatusPanel::sendFileMenu()
@@ -275,12 +272,12 @@
                                                   // virtual
 void StatusPanel::setChannelEncoding(const QString& encoding)
 {
-    KonversationApplication::preferences.setChannelEncoding(m_server->getServerGroup(), ":server", encoding);
+    Preferences::setChannelEncoding(m_server->getServerGroup(), ":server", encoding);
 }
 
 QString StatusPanel::getChannelEncoding()         // virtual
 {
-    return KonversationApplication::preferences.getChannelEncoding(m_server->getServerGroup(), ":server");
+    return Preferences::channelEncoding(m_server->getServerGroup(), ":server");
 }
 
                                                   // virtual
Index: src/irccolorchooser.h
===================================================================
--- src/irccolorchooser.h	(revision 454905)
+++ src/irccolorchooser.h	(working copy)
@@ -25,7 +25,7 @@
 {
     Q_OBJECT
         public:
-        IRCColorChooser(QWidget* parent, Preferences* p, const char* name = 0);
+        IRCColorChooser(QWidget* parent, const char* name = 0);
         QString color();
 
     protected slots:
@@ -36,6 +36,5 @@
 
     protected:
         IRCColorChooserUI* m_view;
-        Preferences* m_preferences;
 };
 #endif
Index: src/servergroupsettings.cpp
===================================================================
--- src/servergroupsettings.cpp	(revision 454905)
+++ src/servergroupsettings.cpp	(working copy)
@@ -123,7 +123,7 @@
 
     IdentityPtr ServerGroupSettings::identity() const
     {
-        return KonversationApplication::preferences.getIdentityById(m_identityId);
+        return Preferences::identityById(m_identityId);
     }
 
     void ServerGroupSettings::appendChannelHistory(const ChannelSettings& channel)
Index: src/preferences.h
===================================================================
--- src/preferences.h	(revision 454905)
+++ src/preferences.h	(working copy)
@@ -28,6 +28,7 @@
 
 #include "servergroupsettings.h"
 #include "identity.h"
+#include "preferences_base.h"
 
 /*
   @author Dario Abatianni
@@ -45,462 +46,90 @@
 class Ignore;
 class Highlight;
 
-class Preferences : public QObject
+class Preferences : public QObject, public PreferencesBase 
 {
     Q_OBJECT
 
-        public:
-        enum TabPlacement
-        {
-            Top=0,
-            Bottom,
-            Left,                                 // not yet supported
-            Right                                 // not yet supported
-        };
+    protected:
+        Preferences();
+        static Preferences *mSelf;
+	    
+    public:
 
+        static Preferences *self();
+        ~Preferences();
         enum Pages
         {
             NotifyPage,
             ChatWinAppearancePage
         };
+        static const Konversation::ServerGroupList serverGroupList();
+        static void setServerGroupList(const Konversation::ServerGroupList& list);
+        static void addServerGroup(Konversation::ServerGroupSettingsPtr serverGroup);
+        static const Konversation::ServerGroupSettingsPtr serverGroupById(int id);
+        static const Konversation::ServerGroupSettingsPtr serverGroupByServer(const QString& server);
+        static int serverGroupIdByName(const QString& serverGroup);
+        static bool isServerGroup(const QString& server);
+        static void removeServerGroup(int id);
 
-        Preferences();
-        ~Preferences();
+	//notifylist is in kconfigxt - FIXME
+        static const QMap<QString, QStringList> notifyList();
+        static const QStringList notifyListByGroup(const QString& groupName);
+        static const QString notifyStringByGroup(const QString& groupName);
+        static void setNotifyList(const QMap<QString, QStringList>& newList);
+        static const bool addNotify(const QString& groupName, const QString& newPattern);
+        static const bool removeNotify(const QString& groupName, const QString& pattern);
 
-        const Konversation::ServerGroupList serverGroupList();
-        void setServerGroupList(const Konversation::ServerGroupList& list);
-        void addServerGroup(Konversation::ServerGroupSettingsPtr serverGroup);
-        const Konversation::ServerGroupSettingsPtr serverGroupById(int id);
-        const Konversation::ServerGroupSettingsPtr serverGroupByServer(const QString& server);
-        int serverGroupIdByName(const QString& serverGroup);
-        bool isServerGroup(const QString& server);
-        void removeServerGroup(int id);
+        static const QPtrList<Highlight> highlightList();
+        static void setHighlightList(QPtrList<Highlight> newList);
+        static void addHighlight(const QString& newHighlight,bool regExp, const QColor &color,const QString& sound,const QString& autoText);
 
-        const bool getAutoReconnect();
-        void setAutoReconnect(bool state);
-        const unsigned int getReconnectCount();
-        void setReconnectCount(unsigned int count);
-        const bool getAutoRejoin();
-        void setAutoRejoin(bool state);
-        const bool getAutojoinOnInvite();
-        void setAutojoinOnInvite(bool state);
+	/* All of the below work on the first (default) identity in your identity list*/
+	static void addIgnore(const QString &newIgnore);
+        static void clearIgnoreList();
+        static const QPtrList<Ignore> ignoreList();
+        static void setIgnoreList(QPtrList<Ignore> newList);
+        static void addIdentity(IdentityPtr identity);
+        static void removeIdentity(IdentityPtr identity);
+        static void clearIdentityList();
+        static const QValueList<IdentityPtr> identityList();
+        static void setIdentityList(const QValueList<IdentityPtr>& list);
+        static const IdentityPtr identityByName(const QString& name);
+        static const IdentityPtr identityById(int id);
+        static const QString ident();
+        static void setIdent(const QString &ident);
+        static const QString realName();
+        static void setRealName(const QString &name);
+        static const QString partReason();
+        static void setPartReason(const QString &newReason);
+        static const QString kickReason();
+        static void setKickReason(const QString &newReason);
+        static void setShowAwayMessage(bool state);
+        static const bool showAwayMessage();
+        static const QString awayMessage();
+        static void setAwayMessage(const QString &newMessage);
+        static const QString unAwayMessage();
+        static void setUnAwayMessage(const QString &newMessage);
+        static const QString nickname(int index);
+        static const QStringList nicknameList();
+        static void setNickname(int index,const QString &newName);
+        static void setNicknameList(const QStringList &newList);
 
-        const bool getBeep();
-        void setBeep(bool state);
-        const bool getRawLog();
-        void setRawLog(bool state);
+        static const bool dialogFlag(const QString& flagName);
+        static void setDialogFlag(const QString& flagName,bool state);
 
-        const bool getCustomVersionReplyEnabled();
-        void setCustomVersionReplyEnabled(bool state);
-        QString getCustomVersionReply();
-        void setCustomVersionReply(const QString &reply);
+        static const QString channelEncoding(const QString& server,const QString& channel);
+        static void setChannelEncoding(const QString& server,const QString& channel,const QString& encoding);
+        static const QStringList channelEncodingsServerList();
+        static const QStringList channelEncodingsChannelList(const QString& server);
 
-        void setLog(bool state);
-        const bool getLog();
-        void setLowerLog(bool state);
-        const bool getLowerLog();
-        void setAddHostnameToLog(bool state);
-        const bool getAddHostnameToLog();
-        void setLogFollowsNick(bool state);
-        const bool getLogFollowsNick();
-        void setLogPath(const QString &path);
-        const QString getLogPath();
-        void setScrollbackMax(int max);
-        const int getScrollbackMax();
+	static void setShowTrayIcon(bool state);
+	static void setSystrayOnly(bool state);
+	static void setTrayNotify(bool state);
+	static void setAutoUserhost(bool state);
 
-        void setAutoWhoNicksLimit(int limit);
-        const int getAutoWhoNicksLimit();
-        void setAutoWhoContinuousEnabled(bool state);
-        const bool getAutoWhoContinuousEnabled();
-        void setAutoWhoContinuousInterval(int interval);
-        const int getAutoWhoContinuousInterval();
 
-        void setShowRealNames(bool show);
-        const bool getShowRealNames();
-
-        void setDccAddPartner(bool state);
-        const bool getDccAddPartner();
-        void setDccCreateFolder(bool state);
-        const bool getDccCreateFolder();
-        void setDccAutoGet(bool state);
-        const bool getDccAutoGet();
-        void setDccAutoResume(bool state);
-        const bool getDccAutoResume();
-        void setDccBufferSize(unsigned long size);
-        const unsigned long getDccBufferSize();
-        void setDccPath(const QString &path);
-        const QString getDccPath();
-        void setDccMethodToGetOwnIp(int methodId);
-        const int getDccMethodToGetOwnIp();
-        void setDccSpecificOwnIp(const QString& ip);
-        const QString getDccSpecificOwnIp();
-        void setDccSpecificSendPorts(bool state);
-        const bool getDccSpecificSendPorts();
-        void setDccSendPortsFirst(unsigned long port);
-        const unsigned int getDccSendPortsFirst();
-        void setDccSendPortsLast(unsigned long port);
-        const unsigned int getDccSendPortsLast();
-        void setDccSpecificChatPorts(bool state);
-        const bool getDccSpecificChatPorts();
-        void setDccChatPortsFirst(unsigned long port);
-        const unsigned int getDccChatPortsFirst();
-        void setDccChatPortsLast(unsigned long port);
-        const unsigned int getDccChatPortsLast();
-        void setDccFastSend(bool state);
-        const bool getDccFastSend();
-        void setDccSendTimeout(int sec);
-        const int getDccSendTimeout();
-        bool getIPv4Fallback();
-        void setIPv4Fallback(bool fallback);
-        const QString& getIPv4FallbackIface();
-        void setIPv4FallbackIface(const QString& interface);
-
-        const TabPlacement getTabPlacement();
-        void setTabPlacement(TabPlacement where);
-        void setBlinkingTabs(bool blink);
-        const bool getBlinkingTabs();
-        void setBringToFront(bool state);
-        const bool getBringToFront();
-        void setCloseButtonsOnTabs(bool state);
-        const bool getCloseButtonsOnTabs();
-        void setCloseButtonsAlignRight(bool state);
-        const bool getCloseButtonsAlignRight();
-
-        // sorting stuff
-        const bool getSortByStatus();
-        void setSortByStatus(bool state);
-        const bool getSortCaseInsensitive();
-        void setSortCaseInsensitive(bool state);
-        // more sorting stuff
-        const int getAdminValue();
-        void setAdminValue(int value);
-        const int getOwnerValue();
-        void setOwnerValue(int value);
-        const int getOpValue();
-        void setOpValue(int value);
-        const int getHalfopValue();
-        void setHalfopValue(int value);
-        const int getVoiceValue();
-        void setVoiceValue(int value);
-        const int getNoRightsValue();
-        void setNoRightsValue(int value);
-
-        // Geometry functions
-        const QSize getNicksOnlineSize();
-        const QSize getNicknameSize();
-        const QSize getLogfileReaderSize();
-        const QSize getMultilineEditSize();
-
-        void setNicksOnlineSize(const QSize &newSize);
-        void setNicknameSize(const QSize &newSize);
-        void setLogfileReaderSize(const QSize &newSize);
-        void setMultilineEditSize(const QSize &newSize);
-
-        const int getLogfileBufferSize();
-        void setLogfileBufferSize(int newSize);
-
-        const int getNotifyDelay();
-        void setNotifyDelay(int delay);
-        const bool getUseNotify();
-        void setUseNotify(bool use);
-        const QMap<QString, QStringList> getNotifyList();
-        const QStringList getNotifyListByGroup(const QString& groupName);
-        const QString getNotifyStringByGroup(const QString& groupName);
-        void setNotifyList(const QMap<QString, QStringList>& newList);
-        const bool addNotify(const QString& groupName, const QString& newPattern);
-        const bool removeNotify(const QString& groupName, const QString& pattern);
-
-        const QPtrList<Highlight> getHighlightList();
-        void setHighlightList(QPtrList<Highlight> newList);
-        void addHighlight(const QString& newHighlight,bool regExp, const QColor &color,const QString& sound,const QString& autoText);
-        void setHighlightSoundEnabled(bool enabled);
-        const bool getHighlightSoundEnabled();
-
-        void setHighlightNick(bool state);        // shall we highlight the current nick?
-        const bool getHighlightNick();
-
-        void setUseClickableNicks(bool state);
-        const bool getUseClickableNicks();
-
-        void setHighlightNickColor(const QString &color);
-        const QColor getHighlightNickColor();
-
-        void setHighlightOwnLines(bool state);    // shall we highlight all our own lines?
-        const bool getHighlightOwnLines();
-
-        void setHighlightOwnLinesColor(const QString &color);
-        const QColor getHighlightOwnLinesColor();
-
-        // On Screen Display
-        void setOSDUsage(bool state);
-        const bool getOSDUsage();
-
-        void setOSDShowOwnNick(bool state);
-        const bool getOSDShowOwnNick();
-
-        void setOSDShowChannel(bool state);
-        const bool getOSDShowChannel();
-
-        void setOSDShowQuery(bool state);
-        const bool getOSDShowQuery();
-
-        void setOSDShowChannelEvent(bool state);
-        const bool getOSDShowChannelEvent();
-
-        const QFont getOSDFont();
-        void setOSDFont(const QFont &newFont);
-        void setOSDFontRaw(const QString &rawFont);
-
-        void setOSDUseCustomColors(bool state);
-        const bool getOSDUseCustomColors();
-
-        void setOSDTextColor(const QString &color);
-        const QColor getOSDTextColor();
-
-        void setOSDBackgroundColor(const QString& color);
-        const QColor getOSDBackgroundColor();
-
-        void setOSDDuration(int ms);
-        const int getOSDDuration();
-
-        void setOSDScreen(uint screen);
-        const uint getOSDScreen();
-
-        void setOSDDrawShadow(bool state);
-        const bool getOSDDrawShadow();
-
-        void setOSDOffsetX(int offset);
-        const int getOSDOffsetX();
-
-        void setOSDOffsetY(int offset);
-        const int getOSDOffsetY();
-
-        void setOSDAlignment(int alignment);
-        const int getOSDAlignment();
-
-        const QStringList getButtonList();
-        void setButtonList(QStringList newList);
-
-        void addIgnore(const QString &newIgnore);
-        void clearIgnoreList();
-        const QPtrList<Ignore> getIgnoreList();
-        void setIgnoreList(QPtrList<Ignore> newList);
-
-        void addIdentity(IdentityPtr identity);
-        void removeIdentity(IdentityPtr identity);
-        void clearIdentityList();
-        const QValueList<IdentityPtr> getIdentityList();
-        void setIdentityList(const QValueList<IdentityPtr>& list);
-        const IdentityPtr getIdentityByName(const QString& name);
-        const IdentityPtr getIdentityById(int id);
-        IdentityPtr identity;
-
-        const QString getIdent();
-        void setIdent(const QString &ident);
-
-        const QString getRealName();
-        void setRealName(const QString &name);
-
-        const QString getPartReason();
-        void setPartReason(const QString &newReason);
-
-        const QString getKickReason();
-        void setKickReason(const QString &newReason);
-
-        void setShowAwayMessage(bool state);
-        const bool getShowAwayMessage();
-        const QString getAwayMessage();
-        void setAwayMessage(const QString &newMessage);
-        const QString getUnAwayMessage();
-        void setUnAwayMessage(const QString &newMessage);
-
-        const QString getNickname(int index);
-        const QStringList getNicknameList();
-        void setNickname(int index,const QString &newName);
-        void setNicknameList(const QStringList &newList);
-
-        const QString getColor(const QString& name);
-        void setColor(const QString& name,const QString& color);
-
-        // Colored nicknames
-        const bool getUseColoredNicks();
-        void setUseColoredNicks(bool usecolor);
-
-        const QStringList getNickColorList();
-        void setNickColorList(const QStringList &cl);
-
-        const bool getUseBoldNicks();
-        void setUseBoldNicks(bool boldNicks);
-
-        const bool getUseLiteralModes();
-        void setUseLiteralModes(bool literalModes);
-
-        const bool getFilterColors();
-        void setFilterColors(bool filter);
-
-        const bool getColorInputFields();
-        void setColorInputFields(bool state);
-
-        const QString& getBackgroundImageName();
-        void setBackgroundImageName(const QString& name);
-
-        void setNickCompleteSuffixStart(const QString &suffix);
-        void setNickCompleteSuffixMiddle(const QString &suffix);
-        const QString getNickCompleteSuffixStart();
-        const QString getNickCompleteSuffixMiddle();
-
-        const bool getFixedMOTD();
-        void setFixedMOTD(bool fixed);
-
-        void setCommandChar(const QString &newCommandChar);
-        const QString getCommandChar();
-
-        const QFont getTextFont();
-        const QFont getListFont();
-        void setTextFont(const QFont &newFont);
-        void setListFont(const QFont &newFont);
-        void setTextFontRaw(const QString &rawFont);
-        void setListFontRaw(const QString &newFont);
-
-        void setTimestamping(bool state);
-        const bool getTimestamping();
-        void setShowDate(bool state);
-        const bool getShowDate();
-        void setTimestampFormat(const QString& newFormat);
-        const QString getTimestampFormat();
-
-        void setShowQuickButtons(bool state);
-        const bool getShowQuickButtons();
-
-        void setShowModeButtons(bool state);
-        const bool getShowModeButtons();
-
-        void setShowServerList(bool state);
-        const bool getShowServerList();
-
-        void setShowTrayIcon(bool state);
-        const bool getShowTrayIcon();
-
-        void setSystrayOnly(bool state);
-        const bool getSystrayOnly();
-
-        void setShowBackgroundImage(bool state);
-        const bool getShowBackgroundImage();
-
-        void setTrayNotify(bool state);
-        const bool getTrayNotify() const;
-        void setTrayNotifyOnlyOwnNick(bool onlyOwnNick);
-        bool trayNotifyOnlyOwnNick() const;
-
-        void setChannelSplitterSizes(QValueList<int> sizes);
-        const QValueList<int> channelSplitterSizes();
-
-        void setTopicSplitterSizes(QValueList<int> sizes);
-        const QValueList<int> topicSplitterSizes();
-
-        void setChannelDoubleClickAction(const QString &action);
-        const QString getChannelDoubleClickAction();
-
-        void setNotifyDoubleClickAction(const QString &action);
-        const QString getNotifyDoubleClickAction();
-
-        void setUseSpacing(bool state);
-        const bool getUseSpacing();
-        void setSpacing(int newSpacing);
-        const int getSpacing();
-        void setMargin(int newMargin);
-        const int getMargin();
-
-        void setUseParagraphSpacing(bool state);
-        const bool getUseParagraphSpacing();
-        void setParagraphSpacing(int newSpacing);
-        const int getParagraphSpacing();
-
-        void setAutoUserhost(bool state);
-        const bool getAutoUserhost();
-
-        const bool getDialogFlag(const QString& flagName);
-        void setDialogFlag(const QString& flagName,bool state);
-
-        const int getMaximumLagTime();
-        void setMaximumLagTime(int maxLag);
-
-        // IRC colors
-        const QStringList getIRCColorList();
-        void setIRCColorList(const QStringList &cl);
-
-        // aliases
-        const QStringList getAliasList();
-        void setAliasList(const QStringList &aliasList);
-
-        // Nick completion
-        const int getNickCompletionMode();
-        void setNickCompletionMode(int mode);
-        const QString getPrefixCharacter();
-        void  setPrefixCharacter(const QString &prefix);
-        const bool nickCompletionCaseSensitive() const;
-        void setNickCompletionCaseSensitive(bool caseSensitive);
-
-        //User interface
-        const bool getShowMenuBar();
-        void setShowMenuBar(bool s);
-        const bool getShowTabBarCloseButton();
-        void setShowTabBarCloseButton(bool s);
-
-        const bool getShowTopic();
-        void setShowTopic(bool s);
-
-        const bool getShowRememberLineInAllWindows();
-        void setShowRememberLineInAllWindows(bool s);
-
-        const bool getFocusNewQueries();
-        void setFocusNewQueries(bool s);
-
-        const bool getHideUnimportantEvents();
-        void setHideUnimportantEvents(bool state);
-
-        const bool getDisableExpansion();
-        void setDisableExpansion(bool state);
-
-        // Web Browser
-        const bool getWebBrowserUseKdeDefault();
-        void setWebBrowserUseKdeDefault(bool state);
-        const QString getWebBrowserCmd();
-        void setWebBrowserCmd(const QString &cmd);
-
-        const bool getRedirectToStatusPane();
-        void setRedirectToStatusPane(bool redirect);
-
-        const bool getOpenWatchedNicksAtStartup();
-        void setOpenWatchedNicksAtStartup(bool open);
-
-        const QString getChannelEncoding(const QString& server,const QString& channel);
-        void setChannelEncoding(const QString& server,const QString& channel,const QString& encoding);
-        const QStringList getChannelEncodingsServerList();
-        const QStringList getChannelEncodingsChannelList(const QString& server);
-
-        // Themes
-        void setIconTheme(const QString& name);
-        const QString getIconTheme();
-
-        void setEmotIconsEnabled(bool enabled) { m_emotIconsEnabled = enabled; }
-        bool emotIconsEnabled() const { return m_emotIconsEnabled; }
-        void setEmotIconsTheme(const QString& theme) { m_emotIconsTheme = theme; }
-        QString emotIconsTheme() const { return m_emotIconsTheme; }
-
-        bool showNicknameBox() const;
-        void setShowNicknameBox(bool show);
-
-        bool disableNotifyWhileAway() const { return m_disableNotifyWhileAway; }
-        void setDisableNotifyWhileAway(bool disable) { m_disableNotifyWhileAway = disable; }
-
-        QString getWikiUrl() const;
-        void setWikiUrl(const QString& url);
-
-        bool getExpandWikiUrl() const;
-        void setExpandWikiUrl(bool expandUrl);
-
-        signals:
+    signals:
         void requestServerConnection(int number);
         void requestSaveOptions();
         void autoUserhostChanged(bool state);
@@ -508,205 +137,58 @@
         void updateTrayIcon();
 
     protected:
-        const QString getDefaultColor(const QString& name);
-
-        bool log;
-        bool lowerLog;
-        bool addHostnameToLog;
-        bool logFollowsNick;
-        QString logPath;
-        int scrollbackMax;
-
-        int autoWhoNicksLimit;
-        bool autoWhoContinuousEnabled;
-        int autoWhoContinuousInterval;
-
-        bool showRealNames;
-
-        TabPlacement tabPlacement;                // where do the tabs go?
-        bool blinkingTabs;                        // Do we want the LEDs on the tabs to blink?
-        bool closeButtonsOnTabs;                  // Do we want close widgets on the tabs?
-        bool closeButtonsAlignRight;              // Display close widgets on the right side?
-        bool bringToFront;                        // Do we want to see newly created tabs immediately?
-
-        bool fixedMOTD;
-        bool beep;
-        bool rawLog;
-
-        bool customVersionReplyEnabled;
-        QString customVersionReply;
-
-        bool dccAddPartner;
-        bool dccCreateFolder;                     // create folders for each DCC partner?
-        int dccMethodToGetOwnIp;
-        QString dccSpecificOwnIp;
-        bool dccSpecificSendPorts;
-        unsigned long dccSendPortsFirst;
-        unsigned long dccSendPortsLast;
-        bool dccSpecificChatPorts;
-        unsigned long dccChatPortsFirst;
-        unsigned long dccChatPortsLast;
-        bool dccAutoGet;
-        bool dccAutoResume;
-        unsigned long dccBufferSize;
-        QString dccPath;
-        bool dccFastSend;
-        int dccSendTimeout;
-        bool ipv4Fallback;
-        QString ipv4Interface;
-
-        bool autoReconnect;
-        unsigned int reconnectCounter;
-        bool autoRejoin;
-        bool autojoinOnInvite;
-
-        int maximumLag;                           // ask for reconnect
-
-        int notifyDelay;
-        bool useNotify;
-
-        bool timestamping;
-        bool showDate;
-        QString timestampFormat;
-
-        bool showQuickButtons;
-        bool showModeButtons;
-        bool showServerList;
-        bool showTrayIcon;
-        bool systrayOnly;
-        bool showBackgroundImage;
-        bool trayNotify;
-        bool m_trayNotifyOnlyOwnNick;
-
-        QValueList<int> channelSplitter;
-        QValueList<int> m_topicSplitterSizes;
-
-        QMap<QString, QStringList> notifyList;
-        QString commandChar;
-        QString preShellCommandStr;
-
-        QString nickCompleteSuffixStart;
-        QString nickCompleteSuffixMiddle;
-
-        QString channelDoubleClickAction;
-        QString notifyDoubleClickAction;
-
+/*
+        bool mCustomVersionReplyEnabled;
+        QString mCustomVersionReply;
         // Geometries
-        QSize mainWindowSize;
-        QSize nicksOnlineSize;
-        QSize nicknameSize;
-        QSize logfileReaderSize;
-        QSize colorConfigurationSize;
-        QSize multilineEditSize;
+        QSize mMainWindowSize;
+        QSize mNicksOnlineSize;
+        QSize mNicknameSize;
+        QSize mColorConfigurationSize;
+        QSize mMultilineEditSize;
 
-        int logfileBufferSize;
 
-        bool useSpacing;
-        int spacing;
-        int margin;
 
         // sorting stuff
-        bool sortByStatus;
-        bool sortCaseInsensitive;
 
         // more sorting stuff
-        int adminValue;
-        int ownerValue;
-        int opValue;
-        int halfopValue;
-        int voiceValue;
-        int awayValue;
-        int noRightsValue;
+        int mOpValue;
 
         // flag for hostmasks next to nicknames
-        bool autoUserhost;
+        bool mClickableNicks;
 
-        bool useParagraphSpacing;
-        int paragraphSpacing;
-
-        QFont textFont;
-        QFont listFont;
-
-        bool highlightNick;
-        bool highlightOwnLines;
-        QColor highlightNickColor;
-        QColor highlightOwnLinesColor;
-        bool highlightSoundEnabled;
-
-        bool clickableNicks;
-
-        // On Screen Display
-        bool OSDUsage;                            // Use OSD?
-        bool OSDShowOwnNick;                      // Message, if own nick appears
-        bool OSDShowChannel;                      // Message on any channel acticity
-        bool OSDShowQuery;                        // Message on query acticity
-        bool OSDShowChannelEvent;                 // Message on channel join/part events
-        QFont osdFont;                            // Which font to use
-        bool useOSDCustomColors;
-        bool OSDDrawShadow;
-        int OSDDuration;
-        uint OSDScreen;
-        QColor osdTextColor;
-        QColor osdBackgroundColor;
-        int OSDOffsetX;
-        int OSDOffsetY;
-        int OSDAlignment;                         // 0: Left, 1: Middle, 2: Center, 3: Right
-
-        bool colorInputFields;
-
-        QString backgroundImage;
-
-        QStringList buttonList;
-
-        Konversation::ServerGroupList m_serverGroupList;
-        QPtrList<Ignore> ignoreList;
-        QValueList<IdentityPtr> identityList;
-        QPtrList<Highlight> highlightList;
-        QMap< QString,QMap<QString,QString> > channelEncodingsMap;
-
-        bool m_disableNotifyWhileAway;
-
+*/
+        IdentityPtr mIdentity;
+        Konversation::ServerGroupList mServerGroupList;
+        QPtrList<Ignore> mIgnoreList;
+        QValueList<IdentityPtr> mIdentityList;
+        QPtrList<Highlight> mHighlightList;
+	QMap<QString, QStringList> mNotifyList;
+        QMap< QString,QMap<QString,QString> > mChannelEncodingsMap;
+/*
         // IRC colors
-        QStringList ircColorList;
-        QStringList nickColorList;
-        bool filterColors;
-        bool useColoredNicks;
-        bool useBoldNicks;
-        bool useLiteralModes;
+        QStringList mIrcColorList;
+        bool mFilterColors;
 
         // aliases
-        QStringList aliasList;
 
         //Nick completion
-        int nickCompletionMode;
-        QString prefixCharacter;
-        bool m_nickCompletionCaseSensitive;
+        int mNickCompletionMode;
+        bool mNickCompletionCaseSensitive;
 
         //User interface
-        bool showMenuBar;
-        bool showTabBarCloseButton;
-        bool m_showNicknameBox;
+        bool mShowMenuBar;
 
-        bool showTopic;
-        bool showRememberLineInAllWindows;
-        bool focusNewQueries;
-        bool hideUnimportantEvents;
-        bool disableExpansion;
-
         // Web Browser
-        bool webBrowserUseKdeDefault;
-        QString webBrowserCmd;
+        bool mWebBrowserUseKdeDefault;
 
-        bool redirectToStatusPane;
+        bool mOpenWatchedNicksAtStartup;
 
-        bool m_openWatchedNicksAtStartup;
-
         // Themes
-        QString iconTheme;
-        bool m_emotIconsEnabled;
-        QString m_emotIconsTheme;
+        bool mEmotIconsEnabled;
+        QString mEmotIconsTheme;
 
-        QString wikiUrl;
-        bool expandWikiUrl;
+        QString mWikiUrl;
+        bool mExpandWikiUrl;*/
 };
 #endif
Index: src/prefspagefontsappearance.cpp
===================================================================
--- src/prefspagefontsappearance.cpp	(revision 454905)
+++ src/prefspagefontsappearance.cpp	(working copy)
@@ -1,38 +0,0 @@
-/*
-  This program is free software; you can redistribute it and/or modify
-  it under the terms of the GNU General Public License as published by
-  the Free Software Foundation; either version 2 of the License, or
-  (at your option) any later version.
-*/
-
-/*
-  copyright: (C) 2005 by Peter Simonsson
-*/
-#include "prefspagefontsappearance.h"
-
-#include <qcheckbox.h>
-
-#include <kfontrequester.h>
-
-#include "preferences.h"
-
-PrefsPageFontsAppearance::PrefsPageFontsAppearance(QWidget* newParent, Preferences* newPreferences)
-: FontAppearance_Config(newParent)
-{
-    preferences = newPreferences;
-
-    kcfg_TextFont->setFont(preferences->getTextFont());
-    kcfg_ListFont->setFont(preferences->getListFont());
-    kcfg_FixedMOTD->setChecked(preferences->getFixedMOTD());
-    kcfg_UseBoldNicks->setChecked(preferences->getUseBoldNicks());
-}
-
-void PrefsPageFontsAppearance::applyPreferences()
-{
-    preferences->setTextFont(kcfg_TextFont->font());
-    preferences->setListFont(kcfg_ListFont->font());
-    preferences->setFixedMOTD(kcfg_FixedMOTD->isChecked());
-    preferences->setUseBoldNicks(kcfg_UseBoldNicks->isChecked());
-}
-
-#include "prefspagefontsappearance.moc"
Index: src/dcctransfersend.cpp
===================================================================
--- src/dcctransfersend.cpp	(revision 454905)
+++ src/dcctransfersend.cpp	(working copy)
@@ -52,14 +52,14 @@
     m_fileURL = fileURL;
     m_ownIp = ownIp;
 
-    if(KonversationApplication::preferences.getIPv4Fallback())
+    if(Preferences::iPv4Fallback())
     {
         KIpAddress ip(m_ownIp);
         if(ip.isIPv6Addr())
         {
             /* This is fucking ugly but there is no KDE way to do this yet :| -cartman */
             struct ifreq ifr;
-            const char* address = KonversationApplication::preferences.getIPv4FallbackIface().ascii();
+            const char* address = Preferences::iPv4FallbackIface().ascii();
             int sock = socket(AF_INET, SOCK_DGRAM, 0);
             strncpy( ifr.ifr_name, address, IF_NAMESIZE );
             ifr.ifr_addr.sa_family = AF_INET;
@@ -76,7 +76,7 @@
 
     m_serverSocket = 0;
     m_sendSocket = 0;
-    m_fastSend = KonversationApplication::preferences.getDccFastSend();
+    m_fastSend = Preferences::dccFastSend();
     kdDebug() << "DccTransferSend::DccTransferSend(): Fast DCC send: " << m_fastSend << endl;
 
     m_connectionTimer = new QTimer( this );
@@ -192,12 +192,12 @@
     m_serverSocket->setFamily( KNetwork::KResolver::InetFamily );
 
                                                   // user is specifing ports
-    if ( KonversationApplication::preferences.getDccSpecificSendPorts() )
+    if ( Preferences::dccSpecificSendPorts() )
     {
         // set port
         bool found = false;                       // whether succeeded to set port
-        unsigned long port = KonversationApplication::preferences.getDccSendPortsFirst();
-        for ( ; port <= KonversationApplication::preferences.getDccSendPortsLast() ; ++port )
+        unsigned long port = Preferences::dccSendPortsFirst();
+        for ( ; port <= Preferences::dccSendPortsLast() ; ++port )
         {
             kdDebug() << "DccTransferSend::start(): trying port " << port << endl;
             m_serverSocket->setAddress( QString::number( port ) );
@@ -239,7 +239,7 @@
     setStatus( WaitingRemote, i18n( "Waiting remote user's acceptance" ) );
     updateView();
 
-    startConnectionTimer( KonversationApplication::preferences.getDccSendTimeout() );
+    startConnectionTimer( Preferences::dccSendTimeout() );
 
     emit sendReady( m_partnerNick, m_fileName, getNumericalIpText( m_ownIp ), m_ownPort, m_fileSize );
 }
Index: src/konversationmainwindow.cpp
===================================================================
--- src/konversationmainwindow.cpp	(revision 454905)
+++ src/konversationmainwindow.cpp	(working copy)
@@ -105,7 +105,7 @@
     //  viewContainer->setHoverCloseButtonDelayed(false);
     setCentralWidget(viewContainer);
     updateTabPlacement();
-    viewContainer->setHoverCloseButton(KonversationApplication::preferences.getCloseButtonsOnTabs());
+    viewContainer->setHoverCloseButton(Preferences::closeButtonsOnTabs());
     viewContainer->hide();
     KPushButton* closeBtn = new KPushButton(viewContainer);
     closeBtn->setPixmap(KGlobal::iconLoader()->loadIcon("tab_remove", KIcon::Small));
@@ -289,7 +289,7 @@
 
     resize(700, 500);                             // Give the app a sane default size
     setAutoSaveSettings();
-    showMenuBarAction->setChecked(KonversationApplication::preferences.getShowMenuBar());
+    showMenuBarAction->setChecked(Preferences::showMenuBar());
     showMenubar(true);
 
     // set up KABC with a nice gui error dialog
@@ -302,7 +302,7 @@
     //  QListView* dockList=new QListView(this);
     //  addToolWindow(dockList,KDockWidget::DockLeft,getMainDockWidget());
 
-    if(KonversationApplication::preferences.getOpenWatchedNicksAtStartup())
+    if(Preferences::openWatchedNicksAtStartup())
     {
         openNicksOnlinePanel();
     }
@@ -316,9 +316,9 @@
 
 void KonversationMainWindow::updateTabPlacement()
 {
-    viewContainer->setTabPosition((KonversationApplication::preferences.getTabPlacement()==Preferences::Top) ?
+    viewContainer->setTabPosition((Preferences::tabPlacement()==Preferences::Top) ?
         QTabWidget::Top : QTabWidget::Bottom);
-    //  getViewContainer()->setHoverCloseButton(KonversationApplication::preferences.getCloseButtonsOnTabs());
+    //  getViewContainer()->setHoverCloseButton(Preferences::closeButtonsOnTabs());
 }
 
 void KonversationMainWindow::openPreferences()
@@ -358,7 +358,7 @@
         menuBar()->hide();
     }
 
-    KonversationApplication::preferences.setShowMenuBar(showMenuBarAction->isChecked());
+    Preferences::setOpenWatchedNicksAtStartup(showMenuBarAction->isChecked());
 }
 
 void KonversationMainWindow::showStatusbar()
@@ -374,7 +374,7 @@
     updateFrontView();
     if(m_frontView && (ChatWindow *)m_frontView != serverView &&
         m_frontView->getServer()==serverView->getServer() &&
-        !KonversationApplication::preferences.getRedirectToStatusPane()
+        !Preferences::redirectServerAndAppMsgToStatusPane()
         )
         m_frontView->appendServerMessage(type,message);
 }
@@ -392,7 +392,7 @@
                                                   // if it does not belong to this server or...
         serverView->getServer()!=m_frontView->getServer() ||
                                                   // if the user decided to force it.
-        KonversationApplication::preferences.getRedirectToStatusPane())
+        Preferences::redirectServerAndAppMsgToStatusPane())
     {
         // if not, take server specified fallback view instead
         serverView->appendServerMessage(type,message);
@@ -418,7 +418,7 @@
     switch (view->getType())
     {
         case ChatWindow::Channel:
-            if(KonversationApplication::preferences.getCloseButtonsOnTabs())
+            if(Preferences::closeButtonsOnTabs())
             {
                 iconSet = UserIconSet("led_green_on");
             }
@@ -448,7 +448,7 @@
             break;
 
         case ChatWindow::RawLog:
-            if(KonversationApplication::preferences.getCloseButtonsOnTabs())
+            if(Preferences::closeButtonsOnTabs())
             {
                 iconSet = UserIconSet("led_blue_on");
             }
@@ -467,7 +467,7 @@
             break;
 
         case ChatWindow::Query:
-            if(KonversationApplication::preferences.getCloseButtonsOnTabs())
+            if(Preferences::closeButtonsOnTabs())
             {
                 iconSet = UserIconSet("led_red_on");
             }
@@ -497,7 +497,7 @@
             break;
 
         case ChatWindow::DccChat:
-            if(KonversationApplication::preferences.getCloseButtonsOnTabs())
+            if(Preferences::closeButtonsOnTabs())
             {
                 iconSet = UserIconSet("led_blue_on");
             }
@@ -526,7 +526,7 @@
             }
 
         default:
-            if(KonversationApplication::preferences.getCloseButtonsOnTabs())
+            if(Preferences::closeButtonsOnTabs())
             {
                 iconSet = UserIconSet("led_blue_on");
             }
@@ -546,11 +546,11 @@
         if(!m_frontView->getTextInLine().isEmpty()) doBringToFront=false;
     }
 
-    if(!KonversationApplication::preferences.getFocusNewQueries() && view->getType()==ChatWindow::Query && !weinitiated)
+    if(!Preferences::focusNewQueries() && view->getType()==ChatWindow::Query && !weinitiated)
         doBringToFront = false;
 
     // bring view to front unless it's a raw log window or the user was typing
-    if(KonversationApplication::preferences.getBringToFront() && doBringToFront &&
+    if(Preferences::bringToFront() && doBringToFront &&
         view->getType()!=ChatWindow::RawLog)
     {
         showView(view);
@@ -1150,7 +1150,7 @@
         m_closeApp = true;
     }
 
-    if(KonversationApplication::preferences.getShowTrayIcon() && !m_closeApp)
+    if(Preferences::showTrayIcon() && !m_closeApp)
     {
 
         // Compute size and position of the pixmap to be grabbed:
@@ -1286,7 +1286,7 @@
         ChatWindow* view = static_cast<ChatWindow*>(viewContainer->page(i));
         QIconSet iconSet;
 
-        if(KonversationApplication::preferences.getCloseButtonsOnTabs())
+        if(Preferences::closeButtonsOnTabs())
         {
             switch (view->getType())
             {
@@ -1307,7 +1307,7 @@
         viewContainer->setTabIconSet(view, iconSet);
     }
 
-    viewContainer->setHoverCloseButton(KonversationApplication::preferences.getCloseButtonsOnTabs());
+    viewContainer->setHoverCloseButton(Preferences::closeButtonsOnTabs());
 
     emit prefsChanged();
 }
@@ -1504,17 +1504,17 @@
 
 void KonversationMainWindow::updateTrayIcon()
 {
-    if(KonversationApplication::preferences.getShowTrayIcon())
+    if(Preferences::showTrayIcon())
     {
         tray->show();
     }
     else
         tray->hide();
 
-    tray->setNotificationEnabled(KonversationApplication::preferences.getTrayNotify());
+    tray->setNotificationEnabled(Preferences::trayNotify());
 
-    if(KonversationApplication::preferences.getShowTrayIcon() &&
-        KonversationApplication::preferences.getSystrayOnly())
+    if(Preferences::showTrayIcon() &&
+        Preferences::systrayOnly())
     {
         KWin::setState(winId(), NET::SkipTaskbar);
     }
@@ -1526,7 +1526,7 @@
 
 void KonversationMainWindow::addIRCColor()
 {
-    IRCColorChooser dlg(this, &(KonversationApplication::preferences));
+    IRCColorChooser dlg(this);
 
     if(dlg.exec() == QDialog::Accepted)
     {
@@ -1537,7 +1537,7 @@
 void KonversationMainWindow::insertRememberLine()
 {
     kdDebug() << "insertRememberLine in konversationMainWindow" << endl;
-    if(KonversationApplication::preferences.getShowRememberLineInAllWindows())
+    if(Preferences::showRememberLineInAllWindows())
     {
         int total = getViewContainer()->count()-1;
         ChatWindow* nextPage;
@@ -1753,7 +1753,7 @@
         port = "6667";
     }
 
-    if (KonversationApplication::preferences.isServerGroup(server))
+    if (Preferences::isServerGroup(server))
     {
         Server* newServer = KonversationApplication::instance()->connectToServerGroup(server);
         newServer->setAutoJoin(true);
Index: src/ircviewbox.cpp
===================================================================
--- src/ircviewbox.cpp	(revision 454905)
+++ src/ircviewbox.cpp	(working copy)
@@ -36,9 +36,10 @@
 IRCViewBox::IRCViewBox(QWidget* parent, Server* newServer)
 : QVBox(parent)
 {
-    m_ircView = new IRCView(this, newServer);
     m_searchBar = new SearchBar(this);
     m_searchBar->hide();
+    m_ircView = new IRCView(this, newServer);
+    m_searchBar->hide();
     m_matchedOnce = false;
 
     connect(m_searchBar, SIGNAL(signalSearchChanged(const QString&)),
Index: src/prefspagethemes.cpp
===================================================================
--- src/prefspagethemes.cpp	(revision 454905)
+++ src/prefspagethemes.cpp	(working copy)
@@ -51,7 +51,7 @@
     updateList();
     updateButtons();
 
-    m_oldTheme = KonversationApplication::preferences.getIconTheme();
+    m_oldTheme = Preferences::iconTheme();
 
     connect(themeList,SIGNAL(highlighted(int)),this,SLOT(updatePreview(int)));
     connect(themeList,SIGNAL(currentChanged(QListBoxItem*)),this,SLOT(updateButtons()));
@@ -196,7 +196,7 @@
 void PrefsPageThemes::updateList()
 {
     QString themeName,themeComment;
-    QString currentTheme = KonversationApplication::preferences.getIconTheme();
+    QString currentTheme = Preferences::iconTheme();
     int index = 0;
     bool found = false;
 
@@ -204,7 +204,7 @@
     {
         m_oldTheme=currentTheme;
         currentTheme = "default";
-        KonversationApplication::preferences.setIconTheme("default");
+        Preferences::setIconTheme("default");
     }
 
     m_dirs = KGlobal::dirs()->findAllResources("data","konversation/themes/*/index.desktop");
Index: src/serverlistdialog.cpp
===================================================================
--- src/serverlistdialog.cpp	(revision 454905)
+++ src/serverlistdialog.cpp	(working copy)
@@ -165,7 +165,6 @@
     ServerListDialog::ServerListDialog(QWidget *parent, const char *name)
         : KDialogBase(Plain, i18n("Server List"), Ok|Close, Ok, parent, name, false)
     {
-        m_preferences = &KonversationApplication::preferences;
         setButtonOK(KGuiItem(i18n("C&onnect"), "connect_creating", i18n("Connect to the server"), i18n("Click here to connect to the selected IRC network and channel.")));
 
         QFrame* mainWidget = plainPage();
@@ -278,7 +277,6 @@
               item = static_cast<ServerListItem*>(branch->firstChild());
 
               while(item) {
-                m_preferences->changeServerProperty(item->serverId(), 6, item->autoConnect() ? "1" : "0");
                 item = static_cast<ServerListItem*>(item->nextSibling());
               }
 
@@ -309,7 +307,7 @@
 
         if(item)
         {
-            Konversation::ServerGroupSettingsPtr serverGroup = m_preferences->serverGroupById(item->serverId());
+            Konversation::ServerGroupSettingsPtr serverGroup = Preferences::serverGroupById(item->serverId());
 
             if(serverGroup)
             {
@@ -356,7 +354,7 @@
             // find branch this item belongs to
             QListViewItem* branch = server->parent();
             // remove server from preferences
-            m_preferences->removeServerGroup(server->serverId());
+	    Preferences::removeServerGroup(server->serverId());
             // remove item from view
             delete server;
             // if the branch has no other items, remove it
@@ -383,7 +381,7 @@
 
     void ServerListDialog::addServerGroup(ServerGroupSettingsPtr serverGroup)
     {
-        m_preferences->addServerGroup(serverGroup);
+        Preferences::addServerGroup(serverGroup);
         QListViewItem* item = addListItem(serverGroup);
         m_serverList->clearSelection();
         m_serverList->setSelected(item, true);
@@ -411,7 +409,7 @@
     void ServerListDialog::updateServerGroupList()
     {
         m_serverList->clear();
-        Konversation::ServerGroupList serverGroups = m_preferences->serverGroupList();
+        Konversation::ServerGroupList serverGroups = Preferences::serverGroupList();
         Konversation::ServerGroupList::iterator it;
 
         for(it = serverGroups.begin(); it != serverGroups.end(); ++it)
Index: src/chatwindowbehaviour_preferences.ui
===================================================================
--- src/chatwindowbehaviour_preferences.ui	(revision 454905)
+++ src/chatwindowbehaviour_preferences.ui	(working copy)
@@ -32,7 +32,7 @@
                 </property>
                 <widget class="QCheckBox" row="2" column="0" rowspan="1" colspan="3">
                     <property name="name">
-                        <cstring>kcfg_DisableExpansions</cstring>
+                        <cstring>kcfg_DisableExpansion</cstring>
                     </property>
                     <property name="text">
                         <string>Disable variable (e.g. %C, %B, %G...) e&amp;xpansion</string>
@@ -43,7 +43,7 @@
                 </widget>
                 <widget class="QCheckBox" row="0" column="0" rowspan="1" colspan="3">
                     <property name="name">
-                        <cstring>kcfg_BeepOnAsciiBel</cstring>
+                        <cstring>kcfg_Beep</cstring>
                     </property>
                     <property name="text">
                         <string>Enable s&amp;ystem bell on incoming ASCII BEL</string>
@@ -54,7 +54,7 @@
                 </widget>
                 <widget class="QCheckBox" row="4" column="0" rowspan="1" colspan="3">
                     <property name="name">
-                        <cstring>kcfg_RedirectStatusMessages</cstring>
+                        <cstring>kcfg_RedirectServerAndAppMsgToStatusPane</cstring>
                     </property>
                     <property name="text">
                         <string>&amp;Redirect all status messages to the server status window</string>
@@ -62,7 +62,7 @@
                 </widget>
                 <widget class="QCheckBox" row="1" column="0" rowspan="1" colspan="3">
                     <property name="name">
-                        <cstring>kcfg_HideJoinPart</cstring>
+                        <cstring>kcfg_HideUnimportantEvents</cstring>
                     </property>
                     <property name="text">
                         <string>Hide &amp;Join/Part/Nick events</string>
@@ -70,7 +70,7 @@
                 </widget>
                 <widget class="QCheckBox" row="3" column="0" rowspan="1" colspan="3">
                     <property name="name">
-                        <cstring>kcfg_ShowRememberLine</cstring>
+                        <cstring>kcfg_ShowRememberLineInAllWindows</cstring>
                     </property>
                     <property name="text">
                         <string>Show remember line in all channels and &amp;queries</string>
@@ -101,7 +101,7 @@
                         <string>Scroll&amp;back limit:</string>
                     </property>
                     <property name="buddy" stdset="0">
-                        <cstring>kcfg_ScrollBackLimit</cstring>
+                        <cstring>kcfg_ScrollbackMax</cstring>
                     </property>
                     <property name="whatsThis" stdset="0">
                         <string>How many lines to keep in buffers, 0 = unlimitied</string>
@@ -109,7 +109,7 @@
                 </widget>
                 <widget class="QSpinBox" row="6" column="1">
                     <property name="name">
-                        <cstring>kcfg_ScrollBackLimit</cstring>
+                        <cstring>kcfg_ScrollbackMax</cstring>
                     </property>
                     <property name="suffix">
                         <string> lines</string>
@@ -153,7 +153,7 @@
         </spacer>
         <widget class="QGroupBox" row="1" column="0">
             <property name="name">
-                <cstring>kcfg_autoWhoContinuous</cstring>
+                <cstring>kcfg_AutoWhoContinuousEnabled</cstring>
             </property>
             <property name="title">
                 <string>Enable Automatic User Information Look Up (/WHO)</string>
@@ -176,12 +176,12 @@
                         <string>Update interval:</string>
                     </property>
                     <property name="buddy" stdset="0">
-                        <cstring>kcfg_WhoInterval</cstring>
+                        <cstring>kcfg_AutoWhoContinuousInterval</cstring>
                     </property>
                 </widget>
                 <widget class="QSpinBox" row="2" column="1">
                     <property name="name">
-                        <cstring>kcfg_WhoInterval</cstring>
+                        <cstring>kcfg_AutoWhoContinuousInterval</cstring>
                     </property>
                     <property name="enabled">
                         <bool>false</bool>
@@ -218,7 +218,7 @@
                 </spacer>
                 <widget class="QSpinBox" row="1" column="1">
                     <property name="name">
-                        <cstring>kcfg_AutoWhoLimit</cstring>
+                        <cstring>kcfg_AutoWhoNicksLimit</cstring>
                     </property>
                     <property name="suffix">
                         <string> nicks</string>
@@ -258,7 +258,7 @@
                         <string>Max. number of users in a channel:</string>
                     </property>
                     <property name="buddy" stdset="0">
-                        <cstring>kcfg_AutoWhoLimit</cstring>
+                        <cstring>kcfg_AutoWhoNicksLimit</cstring>
                     </property>
                 </widget>
                 <widget class="QCheckBox" row="0" column="0" rowspan="1" colspan="2">
@@ -278,9 +278,9 @@
 </widget>
 <connections>
     <connection>
-        <sender>kcfg_autoWhoContinuous</sender>
+        <sender>kcfg_AutoWhoContinuousEnabled</sender>
         <signal>toggled(bool)</signal>
-        <receiver>kcfg_WhoInterval</receiver>
+        <receiver>kcfg_AutoWhoContinuousInterval</receiver>
         <slot>setEnabled(bool)</slot>
     </connection>
 </connections>
Index: src/irccolorchooser.cpp
===================================================================
--- src/irccolorchooser.cpp	(revision 454905)
+++ src/irccolorchooser.cpp	(working copy)
@@ -23,11 +23,9 @@
 #include "irccolorchooserui.h"
 #include "preferences.h"
 
-IRCColorChooser::IRCColorChooser(QWidget* parent, Preferences* p, const char* name)
+IRCColorChooser::IRCColorChooser(QWidget* parent, const char* name)
 : KDialogBase(parent, name, true, i18n("IRC Color Chooser"), Ok|Cancel, Ok)
 {
-    m_preferences = p;
-
     m_view = new IRCColorChooserUI(this);
     setMainWidget(m_view);
     initColors(m_view->m_fgColorCBox);
@@ -56,33 +54,29 @@
 
 void IRCColorChooser::updatePreview()
 {
-    QStringList colors = m_preferences->getIRCColorList();
     QColor bgc;
 
     if(m_view->m_bgColorCBox->currentItem() > 0)
     {
-        bgc = QColor(colors[m_view->m_bgColorCBox->currentItem() - 1]);
+        bgc = Preferences::color(m_view->m_bgColorCBox->currentItem() - 1);
     }
     else
     {
-        bgc = QColor("#" + m_preferences->getColor("TextViewBackground"));
+        bgc = Preferences::color(Preferences::TextViewBackground);
     }
 
     m_view->m_previewLbl->setBackgroundColor(bgc);
-    m_view->m_previewLbl->setPaletteForegroundColor(QColor(colors[m_view->m_fgColorCBox->currentItem()]));
+    m_view->m_previewLbl->setPaletteForegroundColor(Preferences::color(m_view->m_fgColorCBox->currentItem()));
 }
 
 void IRCColorChooser::initColors(KComboBox* combo)
 {
     QPixmap pix(width(), combo->fontMetrics().height() + 4);
-    int i = 0;
-    QStringList colors = m_preferences->getIRCColorList();
 
-    for (QStringList::iterator it = colors.begin(); it != colors.end(); ++it )
+    for (int i =0; i < 11; i++)
     {
-        QString c = *it;
-        pix.fill(QColor(c));
-        combo->insertItem(pix, i++);
+        pix.fill(Preferences::color(i));
+        combo->insertItem(pix, i);
     }
 }
 
Index: src/servergroupdialog.cpp
===================================================================
--- src/servergroupdialog.cpp	(revision 454905)
+++ src/servergroupdialog.cpp	(working copy)
@@ -65,7 +65,7 @@
         QPushButton* editIdentityBtn = new QPushButton(i18n("Edit..."), mainWidget);
         connect(editIdentityBtn, SIGNAL(clicked()), this, SLOT(editIdentity()));
 
-        QValueList<IdentityPtr> identities = KonversationApplication::preferences.getIdentityList();
+        QValueList<IdentityPtr> identities = Preferences::identityList();
 
         for(QValueList<IdentityPtr>::iterator it = identities.begin(); it != identities.end(); ++it)
         {
@@ -208,7 +208,7 @@
         ServerGroupSettingsPtr settings = new ServerGroupSettings(m_id);
         settings->setName(m_nameEdit->text());
         settings->setGroup(m_groupCBox->currentText());
-        QValueList<IdentityPtr> identities = KonversationApplication::preferences.getIdentityList();
+        QValueList<IdentityPtr> identities = Preferences::identityList();
         settings->setIdentityId(identities[m_identityCBox->currentItem()]->id());
         settings->setConnectCommands(m_commandEdit->text());
         settings->setAutoConnectEnabled(m_autoConnectCBox->isChecked());
@@ -402,12 +402,12 @@
     {
         IdentityDialog dlg(this);
         dlg.setCurrentIdentity(m_identityCBox->currentItem());
-        QValueList<IdentityPtr> identities = KonversationApplication::preferences.getIdentityList();
+        QValueList<IdentityPtr> identities = Preferences::identityList();
         int identityId = identities[m_identityCBox->currentItem()]->id();
 
         if(dlg.exec() == KDialog::Accepted)
         {
-            identities = KonversationApplication::preferences.getIdentityList();
+            identities = Preferences::identityList();
             m_identityCBox->clear();
 
             for(QValueList<IdentityPtr>::iterator it = identities.begin(); it != identities.end(); ++it)
@@ -415,7 +415,7 @@
                 m_identityCBox->insertItem((*it)->getName());
             }
 
-            m_identityCBox->setCurrentText(KonversationApplication::preferences.getIdentityById(identityId)->getName());
+            m_identityCBox->setCurrentText(Preferences::identityById(identityId)->getName());
             m_identitiesNeedsUpdate = true;
         }
     }
Index: src/prefspagehighlight.cpp
===================================================================
--- src/prefspagehighlight.cpp	(revision 454905)
+++ src/prefspagehighlight.cpp	(working copy)
@@ -83,7 +83,7 @@
     }
     // End copy
 
-    enableSoundCheck->setChecked(preferences->getHighlightSoundEnabled());
+    enableSoundCheck->setChecked(preferences->getHighlightSoundsEnabled());
 
     currentNickCheck->setChecked(preferences->getHighlightNick());
     currentNickColor->setColor(preferences->getHighlightNickColor());
Index: src/prefspagefontsappearance.h
===================================================================
--- src/prefspagefontsappearance.h	(revision 454905)
+++ src/prefspagefontsappearance.h	(working copy)
@@ -1,30 +0,0 @@
-/*
-  This program is free software; you can redistribute it and/or modify
-  it under the terms of the GNU General Public License as published by
-  the Free Software Foundation; either version 2 of the License, or
-  (at your option) any later version.
-*/
-
-/*
-  copyright: (C) 2005 by Peter Simonsson
-*/
-#ifndef PREFSPAGEFONTSAPPEARANCE_H
-#define PREFSPAGEFONTSAPPEARANCE_H
-
-#include <fontappearance_preferences.h>
-
-class Preferences;
-
-class PrefsPageFontsAppearance : public FontAppearance_Config
-{
-    Q_OBJECT
-        public:
-        PrefsPageFontsAppearance(QWidget* newParent, Preferences* newPreferences);
-
-    public slots:
-        void applyPreferences();
-
-    protected:
-        Preferences* preferences;
-};
-#endif
Index: src/nicklistbehavior_preferences.ui
===================================================================
--- src/nicklistbehavior_preferences.ui	(revision 454905)
+++ src/nicklistbehavior_preferences.ui	(working copy)
@@ -33,7 +33,7 @@
                 <string>&amp;Command to be executed on double click:</string>
             </property>
             <property name="buddy" stdset="0">
-                <cstring>kcfg_DoubleClickCommand</cstring>
+                <cstring>kcfg_ChannelDoubleClickAction</cstring>
             </property>
         </widget>
         <widget class="QCheckBox" row="1" column="0" rowspan="1" colspan="2">
@@ -46,12 +46,12 @@
         </widget>
         <widget class="KLineEdit" row="0" column="2" rowspan="1" colspan="2">
             <property name="name">
-                <cstring>kcfg_DoubleClickCommand</cstring>
+                <cstring>kcfg_ChannelDoubleClickAction</cstring>
             </property>
         </widget>
         <widget class="QCheckBox" row="2" column="0" rowspan="1" colspan="2">
             <property name="name">
-                <cstring>kcfg_SortUserStatus</cstring>
+                <cstring>kcfg_SortByStatus</cstring>
             </property>
             <property name="text">
                 <string>Sort b&amp;y user status</string>
@@ -59,7 +59,7 @@
         </widget>
         <widget class="QToolButton" row="4" column="3">
             <property name="name">
-                <cstring>kcfg_DownButton</cstring>
+                <cstring>downButton</cstring>
             </property>
             <property name="enabled">
                 <bool>false</bool>
@@ -78,7 +78,7 @@
         </widget>
         <widget class="QToolButton" row="3" column="3">
             <property name="name">
-                <cstring>kcfg_UpButton</cstring>
+                <cstring>upButton</cstring>
             </property>
             <property name="enabled">
                 <bool>false</bool>
@@ -128,7 +128,7 @@
                 </property>
             </column>
             <property name="name">
-                <cstring>kcfg_SortOrder</cstring>
+                <cstring>sortOrder</cstring>
             </property>
             <property name="enabled">
                 <bool>false</bool>
@@ -164,21 +164,21 @@
 </widget>
 <connections>
     <connection>
-        <sender>kcfg_SortUserStatus</sender>
+        <sender>kcfg_SortByStatus</sender>
         <signal>toggled(bool)</signal>
-        <receiver>kcfg_SortOrder</receiver>
+        <receiver>sortOrder</receiver>
         <slot>setEnabled(bool)</slot>
     </connection>
     <connection>
-        <sender>kcfg_SortUserStatus</sender>
+        <sender>kcfg_SortByStatus</sender>
         <signal>toggled(bool)</signal>
-        <receiver>kcfg_UpButton</receiver>
+        <receiver>upButton</receiver>
         <slot>setEnabled(bool)</slot>
     </connection>
     <connection>
-        <sender>kcfg_SortUserStatus</sender>
+        <sender>kcfg_SortByStatus</sender>
         <signal>toggled(bool)</signal>
-        <receiver>kcfg_DownButton</receiver>
+        <receiver>downButton</receiver>
         <slot>setEnabled(bool)</slot>
     </connection>
 </connections>
Index: src/ircview.h
===================================================================
--- src/ircview.h	(revision 454905)
+++ src/ircview.h	(working copy)
@@ -42,7 +42,7 @@
         ~IRCView();
 
         void clear();
-        void setViewBackground(const QString& color, const QString& pixmapName);
+        void setViewBackground(const QColor& backgroundColor, const QString& pixmapName);
         void setServer(Server* server);
 
         // Returns the current nick under context menu.
Index: src/notificationhandler.cpp
===================================================================
--- src/notificationhandler.cpp	(revision 454905)
+++ src/notificationhandler.cpp	(working copy)
@@ -43,7 +43,7 @@
             return;
         }
 
-        if(KonversationApplication::preferences.disableNotifyWhileAway() && chatWin->getServer()->isAway())
+        if(Preferences::disableNotifyWhileAway() && chatWin->getServer()->isAway())
         {
             return;
         }
@@ -55,12 +55,12 @@
         //   Popup *pop = new Popup(m_mainWindow,chatWin,
         //     QString("<qt>&lt;%2&gt; %3</qt>").arg(chatWin->getName()).arg(fromNick).arg(cutup));
 
-        if(!KonversationApplication::preferences.trayNotifyOnlyOwnNick())
+        if(!Preferences::trayNotifyOnlyOwnNick())
         {
             startTrayNotification(chatWin);
         }
 
-        if(KonversationApplication::preferences.getOSDShowChannel() &&
+        if(Preferences::oSDShowChannel() &&
             (!m_mainWindow->isActiveWindow() || (chatWin != m_mainWindow->frontView())))
         {
             KonversationApplication* konvApp = static_cast<KonversationApplication*>(kapp);
@@ -75,7 +75,7 @@
             return;
         }
 
-        if(KonversationApplication::preferences.disableNotifyWhileAway() && chatWin->getServer()->isAway())
+        if(Preferences::disableNotifyWhileAway() && chatWin->getServer()->isAway())
         {
             return;
         }
@@ -93,8 +93,8 @@
 
         if(chatWin->getType() == ChatWindow::Channel)
         {
-            if((KonversationApplication::preferences.getOSDShowChannel() ||
-                KonversationApplication::preferences.getOSDShowOwnNick()) &&
+            if((Preferences::oSDShowChannel() ||
+                Preferences::oSDShowOwnNick()) &&
                 (!m_mainWindow->isActiveWindow() || (chatWin != m_mainWindow->frontView())))
             {
                 konvApp->osd->showOSD(i18n("[HighLight] (%1) <%2> %3").arg(chatWin->getName()).arg(fromNick).arg(cleanedMessage));
@@ -102,7 +102,7 @@
         }
         else if(chatWin->getType() == ChatWindow::Query)
         {
-            if(KonversationApplication::preferences.getOSDShowQuery() &&
+            if(Preferences::oSDShowQuery() &&
                 (!m_mainWindow->isActiveWindow() || (chatWin != m_mainWindow->frontView())))
             {
                 konvApp->osd->showOSD(i18n("(Query) <%1> %2").arg(fromNick).arg(cleanedMessage));
@@ -117,7 +117,7 @@
             return;
         }
 
-        if(KonversationApplication::preferences.disableNotifyWhileAway() && chatWin->getServer()->isAway())
+        if(Preferences::disableNotifyWhileAway() && chatWin->getServer()->isAway())
         {
             return;
         }
@@ -135,7 +135,7 @@
             return;
         }
 
-        if(KonversationApplication::preferences.disableNotifyWhileAway() && chatWin->getServer()->isAway())
+        if(Preferences::disableNotifyWhileAway() && chatWin->getServer()->isAway())
         {
             return;
         }
@@ -143,7 +143,7 @@
         KNotifyClient::event(winId(), "join", i18n("%1 joined %2").arg(nick, chatWin->getName()));
 
         // OnScreen Message
-        if(KonversationApplication::preferences.getOSDShowChannelEvent() &&
+        if(Preferences::oSDShowChannelEvent() &&
             (!m_mainWindow->isActiveWindow() || (chatWin != m_mainWindow->frontView())))
         {
             KonversationApplication* konvApp = static_cast<KonversationApplication*>(kapp);
@@ -158,7 +158,7 @@
             return;
         }
 
-        if(KonversationApplication::preferences.disableNotifyWhileAway() && chatWin->getServer()->isAway())
+        if(Preferences::disableNotifyWhileAway() && chatWin->getServer()->isAway())
         {
             return;
         }
@@ -166,7 +166,7 @@
         KNotifyClient::event(winId(), "part", i18n("%1 parted %2").arg(nick, chatWin->getName()));
 
         // OnScreen Message
-        if(KonversationApplication::preferences.getOSDShowChannelEvent() &&
+        if(Preferences::oSDShowChannelEvent() &&
             (!m_mainWindow->isActiveWindow() || (chatWin != m_mainWindow->frontView())))
         {
             KonversationApplication* konvApp = static_cast<KonversationApplication*>(kapp);
@@ -191,7 +191,7 @@
             return;
         }
 
-        if(KonversationApplication::preferences.disableNotifyWhileAway() && chatWin->getServer()->isAway())
+        if(Preferences::disableNotifyWhileAway() && chatWin->getServer()->isAway())
         {
             return;
         }
@@ -206,7 +206,7 @@
             return;
         }
 
-        if(KonversationApplication::preferences.disableNotifyWhileAway() && chatWin->getServer()->isAway())
+        if(Preferences::disableNotifyWhileAway() && chatWin->getServer()->isAway())
         {
             return;
         }
@@ -221,7 +221,7 @@
             return;
         }
 
-        if(KonversationApplication::preferences.disableNotifyWhileAway() && chatWin->getServer()->isAway())
+        if(Preferences::disableNotifyWhileAway() && chatWin->getServer()->isAway())
         {
             return;
         }
@@ -236,7 +236,7 @@
             return;
         }
 
-        if(KonversationApplication::preferences.disableNotifyWhileAway() && chatWin->getServer()->isAway())
+        if(Preferences::disableNotifyWhileAway() && chatWin->getServer()->isAway())
         {
             return;
         }
@@ -251,7 +251,7 @@
             return;
         }
 
-        if(KonversationApplication::preferences.disableNotifyWhileAway() && chatWin->getServer()->isAway())
+        if(Preferences::disableNotifyWhileAway() && chatWin->getServer()->isAway())
         {
             return;
         }
@@ -267,7 +267,7 @@
             return;
         }
 
-        if(KonversationApplication::preferences.disableNotifyWhileAway() && chatWin->getServer()->isAway())
+        if(Preferences::disableNotifyWhileAway() && chatWin->getServer()->isAway())
         {
             return;
         }
@@ -283,7 +283,7 @@
             return;
         }
 
-        if(KonversationApplication::preferences.disableNotifyWhileAway() && chatWin->getServer()->isAway())
+        if(Preferences::disableNotifyWhileAway() && chatWin->getServer()->isAway())
         {
             return;
         }
@@ -321,7 +321,7 @@
             return;
         }
 
-        if(KonversationApplication::preferences.getOSDShowOwnNick() &&
+        if(Preferences::oSDShowOwnNick() &&
             (!m_mainWindow->isActiveWindow() || (chatWin != m_mainWindow->frontView())))
         {
             KonversationApplication* konvApp = static_cast<KonversationApplication*>(kapp);
Index: src/serverlistdialog.h
===================================================================
--- src/serverlistdialog.h	(revision 454905)
+++ src/serverlistdialog.h	(working copy)
@@ -83,7 +83,6 @@
             QPushButton* m_addButton;
             QPushButton* m_editButton;
             QPushButton* m_delButton;
-            Preferences* m_preferences;
     };
 }
 #endif
Index: src/rawlog.cpp
===================================================================
--- src/rawlog.cpp	(revision 454905)
+++ src/rawlog.cpp	(working copy)
@@ -40,16 +40,16 @@
 
 void RawLog::updateFonts()
 {
-    getTextView()->setFont(KonversationApplication::preferences.getTextFont());
+    getTextView()->setFont(Preferences::textFont());
 
-    if(KonversationApplication::preferences.getShowBackgroundImage())
+    if(Preferences::showBackgroundImage())
     {
-        getTextView()->setViewBackground(KonversationApplication::preferences.getColor("TextViewBackground"),
-            KonversationApplication::preferences.getBackgroundImageName());
+        getTextView()->setViewBackground(Preferences::color(Preferences::TextViewBackground),
+            Preferences::backgroundImage());
     }
     else
     {
-        getTextView()->setViewBackground(KonversationApplication::preferences.getColor("TextViewBackground"),
+        getTextView()->setViewBackground(Preferences::color(Preferences::TextViewBackground),
             QString::null);
     }
 }
Index: src/colorsappearance_preferences.ui
===================================================================
--- src/colorsappearance_preferences.ui	(revision 454905)
+++ src/colorsappearance_preferences.ui	(working copy)
@@ -37,7 +37,7 @@
                 </property>
                 <widget class="QCheckBox" row="5" column="0" rowspan="1" colspan="5">
                     <property name="name">
-                        <cstring>kcfg_UseCustomColors</cstring>
+                        <cstring>kcfg_InputFieldsBackgroundColor</cstring>
                     </property>
                     <property name="text">
                         <string>Input fields and nick list uses custom colors</string>
@@ -45,7 +45,7 @@
                 </widget>
                 <widget class="KColorButton" row="3" column="4">
                     <property name="name">
-                        <cstring>kcfg_TimestampColor</cstring>
+                        <cstring>kcfg_TimeColor</cstring>
                     </property>
                     <property name="text">
                         <string></string>
@@ -77,7 +77,7 @@
                 </widget>
                 <widget class="KColorButton" row="0" column="4">
                     <property name="name">
-                        <cstring>kcfg_BacklogColor</cstring>
+                        <cstring>kcfg_BacklogMessageColor</cstring>
                     </property>
                     <property name="text">
                         <string></string>
@@ -85,7 +85,7 @@
                 </widget>
                 <widget class="KColorButton" row="4" column="1">
                     <property name="name">
-                        <cstring>kcfg_BackgroundColor</cstring>
+                        <cstring>kcfg_TextViewBackgroundColor</cstring>
                     </property>
                     <property name="text">
                         <string></string>
@@ -117,7 +117,7 @@
                 </widget>
                 <widget class="KColorButton" row="0" column="1">
                     <property name="name">
-                        <cstring>kcfg_ActionColor</cstring>
+                        <cstring>kcfg_ActionMessageColor</cstring>
                     </property>
                     <property name="text">
                         <string></string>
@@ -301,7 +301,7 @@
                         <string>&amp;Background:</string>
                     </property>
                     <property name="buddy" stdset="0">
-                        <cstring>kcfg_BackgroundColor</cstring>
+                        <cstring>kcfg_TextViewBackgroundColor</cstring>
                     </property>
                 </widget>
                 <widget class="QLabel" row="3" column="0">
@@ -345,7 +345,7 @@
                         <string>Actio&amp;n:</string>
                     </property>
                     <property name="buddy" stdset="0">
-                        <cstring>kcfg_ActionColor</cstring>
+                        <cstring>kcfg_ActionMessageColor</cstring>
                     </property>
                 </widget>
                 <widget class="QLabel" row="0" column="3">
@@ -356,7 +356,7 @@
                         <string>Bac&amp;klog:</string>
                     </property>
                     <property name="buddy" stdset="0">
-                        <cstring>kcfg_BacklogColor</cstring>
+                        <cstring>kcfg_BacklogMessageColor</cstring>
                     </property>
                 </widget>
                 <widget class="QLabel" row="1" column="3">
@@ -389,7 +389,7 @@
                         <string>&amp;Timestamp:</string>
                     </property>
                     <property name="buddy" stdset="0">
-                        <cstring>kcfg_TimestampColor</cstring>
+                        <cstring>kcfg_TimeColor</cstring>
                     </property>
                 </widget>
                 <widget class="QLabel" row="4" column="3">
@@ -440,7 +440,7 @@
                 </widget>
                 <widget class="KColorButton" row="0" column="7">
                     <property name="name">
-                        <cstring>kcfg_NickColor5</cstring>
+                        <cstring>kcfg_NickColor4</cstring>
                     </property>
                     <property name="text">
                         <string></string>
@@ -464,7 +464,7 @@
                 </widget>
                 <widget class="KColorButton" row="1" column="7">
                     <property name="name">
-                        <cstring>kcfg_NickColor6</cstring>
+                        <cstring>kcfg_NickColor5</cstring>
                     </property>
                     <property name="text">
                         <string></string>
@@ -488,7 +488,7 @@
                 </widget>
                 <widget class="KColorButton" row="0" column="4">
                     <property name="name">
-                        <cstring>kcfg_NickColor3</cstring>
+                        <cstring>kcfg_NickColor2</cstring>
                     </property>
                     <property name="text">
                         <string></string>
@@ -496,7 +496,7 @@
                 </widget>
                 <widget class="KColorButton" row="1" column="4">
                     <property name="name">
-                        <cstring>kcfg_NickColor4</cstring>
+                        <cstring>kcfg_NickColor3</cstring>
                     </property>
                     <property name="text">
                         <string></string>
@@ -588,7 +588,7 @@
                 </spacer>
                 <widget class="KColorButton" row="0" column="1">
                     <property name="name">
-                        <cstring>kcfg_NickColor1</cstring>
+                        <cstring>kcfg_NickColor0</cstring>
                     </property>
                     <property name="text">
                         <string></string>
@@ -612,7 +612,7 @@
                 </widget>
                 <widget class="KColorButton" row="1" column="1">
                     <property name="name">
-                        <cstring>kcfg_NickColor2</cstring>
+                        <cstring>kcfg_NickColor1</cstring>
                     </property>
                     <property name="text">
                         <string></string>
@@ -670,7 +670,7 @@
                 </spacer>
                 <widget class="KColorButton" row="1" column="10">
                     <property name="name">
-                        <cstring>kcfg_NickColor8</cstring>
+                        <cstring>kcfg_NickColor7</cstring>
                     </property>
                     <property name="text">
                         <string></string>
@@ -678,7 +678,7 @@
                 </widget>
                 <widget class="KColorButton" row="0" column="10">
                     <property name="name">
-                        <cstring>kcfg_NickColor7</cstring>
+                        <cstring>kcfg_NickColor6</cstring>
                     </property>
                     <property name="text">
                         <string></string>
@@ -868,7 +868,7 @@
                 </widget>
                 <widget class="KColorButton" row="3" column="1">
                     <property name="name">
-                        <cstring>kcfg_IrcColorCode4</cstring>
+                        <cstring>kcfg_IrcColorCode3</cstring>
                     </property>
                     <property name="text">
                         <string></string>
@@ -876,7 +876,7 @@
                 </widget>
                 <widget class="KColorButton" row="2" column="1">
                     <property name="name">
-                        <cstring>kcfg_IrcColorCode3</cstring>
+                        <cstring>kcfg_IrcColorCode2</cstring>
                     </property>
                     <property name="text">
                         <string></string>
@@ -884,7 +884,7 @@
                 </widget>
                 <widget class="KColorButton" row="0" column="1">
                     <property name="name">
-                        <cstring>kcfg_IrcColorCode1</cstring>
+                        <cstring>kcfg_IrcColorCode0</cstring>
                     </property>
                     <property name="text">
                         <string></string>
@@ -892,7 +892,7 @@
                 </widget>
                 <widget class="KColorButton" row="1" column="1">
                     <property name="name">
-                        <cstring>kcfg_IrcColorCode2</cstring>
+                        <cstring>kcfg_IrcColorCode1</cstring>
                     </property>
                     <property name="text">
                         <string></string>
@@ -948,7 +948,7 @@
                 </widget>
                 <widget class="KColorButton" row="1" column="4">
                     <property name="name">
-                        <cstring>kcfg_IrcColorCode6</cstring>
+                        <cstring>kcfg_IrcColorCode5</cstring>
                     </property>
                     <property name="text">
                         <string></string>
@@ -956,7 +956,7 @@
                 </widget>
                 <widget class="KColorButton" row="0" column="4">
                     <property name="name">
-                        <cstring>kcfg_IrcColorCode5</cstring>
+                        <cstring>kcfg_IrcColorCode4</cstring>
                     </property>
                     <property name="text">
                         <string></string>
@@ -964,7 +964,7 @@
                 </widget>
                 <widget class="KColorButton" row="3" column="4">
                     <property name="name">
-                        <cstring>kcfg_IrcColorCode8</cstring>
+                        <cstring>kcfg_IrcColorCode7</cstring>
                     </property>
                     <property name="text">
                         <string></string>
@@ -972,7 +972,7 @@
                 </widget>
                 <widget class="KColorButton" row="2" column="4">
                     <property name="name">
-                        <cstring>kcfg_IrcColorCode7</cstring>
+                        <cstring>kcfg_IrcColorCode6</cstring>
                     </property>
                     <property name="text">
                         <string></string>
@@ -1116,7 +1116,7 @@
                 </spacer>
                 <widget class="KColorButton" row="3" column="7">
                     <property name="name">
-                        <cstring>kcfg_IrcColorCode12</cstring>
+                        <cstring>kcfg_IrcColorCode11</cstring>
                     </property>
                     <property name="text">
                         <string></string>
@@ -1132,7 +1132,7 @@
                 </widget>
                 <widget class="KColorButton" row="1" column="7">
                     <property name="name">
-                        <cstring>kcfg_IrcColorCode10</cstring>
+                        <cstring>kcfg_IrcColorCode9</cstring>
                     </property>
                     <property name="text">
                         <string></string>
@@ -1140,7 +1140,7 @@
                 </widget>
                 <widget class="KColorButton" row="2" column="7">
                     <property name="name">
-                        <cstring>kcfg_IrcColorCode11</cstring>
+                        <cstring>kcfg_IrcColorCode10</cstring>
                     </property>
                     <property name="text">
                         <string></string>
@@ -1148,7 +1148,7 @@
                 </widget>
                 <widget class="KColorButton" row="0" column="7">
                     <property name="name">
-                        <cstring>kcfg_IrcColorCode9</cstring>
+                        <cstring>kcfg_IrcColorCode8</cstring>
                     </property>
                     <property name="text">
                         <string></string>
@@ -1248,7 +1248,7 @@
                 </spacer>
                 <widget class="KColorButton" row="3" column="10">
                     <property name="name">
-                        <cstring>kcfg_IrcColorCode16</cstring>
+                        <cstring>kcfg_IrcColorCode15</cstring>
                     </property>
                     <property name="text">
                         <string></string>
@@ -1264,7 +1264,7 @@
                 </widget>
                 <widget class="KColorButton" row="1" column="10">
                     <property name="name">
-                        <cstring>kcfg_IrcColorCode14</cstring>
+                        <cstring>kcfg_IrcColorCode13</cstring>
                     </property>
                     <property name="text">
                         <string></string>
@@ -1280,7 +1280,7 @@
                 </widget>
                 <widget class="KColorButton" row="0" column="10">
                     <property name="name">
-                        <cstring>kcfg_IrcColorCode13</cstring>
+                        <cstring>kcfg_IrcColorCode12</cstring>
                     </property>
                     <property name="text">
                         <string></string>
@@ -1288,7 +1288,7 @@
                 </widget>
                 <widget class="KColorButton" row="2" column="10">
                     <property name="name">
-                        <cstring>kcfg_IrcColorCode15</cstring>
+                        <cstring>kcfg_IrcColorCode14</cstring>
                     </property>
                     <property name="text">
                         <string></string>
Index: src/nickinfo.cpp
===================================================================
--- src/nickinfo.cpp	(revision 454905)
+++ src/nickinfo.cpp	(working copy)
@@ -79,19 +79,20 @@
 {
     uint& offset = KonversationApplication::instance()->getColorOffset();
     QMap<QString,QString>& colorMap = KonversationApplication::instance()->getColorMap();
-    QStringList& colorList = KonversationApplication::instance()->getColorList();
 
     if(!colorMap.contains(m_nickname))
     {
         if(offset >= 8)
             offset=0;
 
-        QString backgroundColor=KonversationApplication::preferences.getColor("TextViewBackground");
-
-        if(backgroundColor==colorList[offset])
+        QString backgroundColor=Preferences::color(Preferences::TextViewBackground).name();
+        QString color = Preferences::color(offset).name();
+        if(backgroundColor==color) {
             offset = (offset+1)%8;
+	    color = Preferences::color(offset).name();
+	}
 
-        colorMap[m_nickname]=colorList[offset];
+        colorMap[m_nickname]=color;
         ++offset;
     }
     return colorMap[m_nickname];
Index: src/outputfilter.cpp
===================================================================
--- src/outputfilter.cpp	(revision 454905)
+++ src/outputfilter.cpp	(working copy)
@@ -54,8 +54,8 @@
     // replace all aliases in the string and return true if anything got replaced at all
     bool OutputFilter::replaceAliases(QString& line)
     {
-        QStringList aliasList=KonversationApplication::preferences.getAliasList();
-        QString cc(KonversationApplication::preferences.getCommandChar());
+        QStringList aliasList=Preferences::aliasList();
+        QString cc(Preferences::commandChar());
         // check if the line starts with a defined alias
         for(unsigned int index=0;index<aliasList.count();index++)
         {
@@ -105,7 +105,7 @@
         if(inputLine.isEmpty() || inputLine == "\n")
             return result;
 
-        if(!KonversationApplication::preferences.getDisableExpansion())
+        if(!Preferences::disableExpansion())
         {
             // replace placeholders
             inputLine.replace("%%","%\x01");      // make sure to protect double %%
@@ -867,10 +867,10 @@
             for(unsigned int index = 0; index < list.count(); index++)
             {
                 // Try to remove current pattern
-                if(!KonversationApplication::preferences.removeNotify(groupName, list[index]))
+                if(!Preferences::removeNotify(groupName, list[index]))
                 {
                     // If remove failed, try to add it instead
-                    if(!KonversationApplication::preferences.addNotify(groupName, list[index]))
+                    if(!Preferences::addNotify(groupName, list[index]))
                     {
                         kdDebug() << "OutputFilter::parseNotify(): Adding failed!" << endl;
                     }
@@ -879,7 +879,7 @@
         }
 
         // show (new) notify list to user
-        QString list = KonversationApplication::preferences.getNotifyStringByGroup(groupName) + " " + Konversation::Addressbook::self()->allContactsNicksForServer(m_server->getServerName(), m_server->getServerGroup()).join(" ");
+        QString list = Preferences::notifyStringByGroup(groupName) + " " + Konversation::Addressbook::self()->allContactsNicksForServer(m_server->getServerName(), m_server->getServerGroup()).join(" ");
 
         result.typeString = i18n("Notify");
 
@@ -1081,7 +1081,7 @@
                         parameterList[index] += "!*";
                     }
 
-                    KonversationApplication::preferences.addIgnore(parameterList[index] + "," + QString::number(value));
+                    Preferences::addIgnore(parameterList[index] + "," + QString::number(value));
                 }
 
                 result.output = i18n("Added %1 to your ignore list.").arg(parameterList.join(", "));
@@ -1141,7 +1141,7 @@
 
     // Accessors
 
-    void OutputFilter::setCommandChar() { commandChar=KonversationApplication::preferences.getCommandChar(); }
+    void OutputFilter::setCommandChar() { commandChar=Preferences::commandChar(); }
 
     // # & + and ! are *often*, but not necessarily, channel identifiers. + and ! are non-RFC, so if a server doesn't offer 005 and
     // supports + and ! channels, I think thats broken behaviour on their part - not ours.
@@ -1270,7 +1270,7 @@
 
             kdDebug() << "Server : " << address << " Port : " << port << " Password : " << password << endl;
 
-            if (KonversationApplication::preferences.isServerGroup(address))
+            if (Preferences::isServerGroup(address))
             {
                 emit connectToServerGroup(address);
             }
Index: src/identitydialog.cpp
===================================================================
--- src/identitydialog.cpp	(revision 454905)
+++ src/identitydialog.cpp	(working copy)
@@ -48,7 +48,7 @@
         m_identityCBox->setEditable(false);
         identityLabel->setBuddy(m_identityCBox);
 
-        QValueList<IdentityPtr> tmpList = KonversationApplication::preferences.getIdentityList();
+        QValueList<IdentityPtr> tmpList = Preferences::identityList();
 
         for(QValueList<IdentityPtr>::iterator it = tmpList.begin(); it != tmpList.end(); ++it)
         {
@@ -428,7 +428,7 @@
         }
 
         refreshCurrentIdentity();
-        KonversationApplication::preferences.setIdentityList(m_identityList);
+        Preferences::setIdentityList(m_identityList);
         static_cast<KonversationApplication*>(kapp)->saveOptions(true);
         accept();
     }
@@ -484,7 +484,7 @@
             return;
         }
 
-        ServerGroupList serverGroups = KonversationApplication::preferences.serverGroupList();
+        ServerGroupList serverGroups = Preferences::serverGroupList();
         ServerGroupList::iterator it = serverGroups.begin();
         bool found = false;
 
Index: src/emoticon.cpp
===================================================================
--- src/emoticon.cpp	(revision 454905)
+++ src/emoticon.cpp	(working copy)
@@ -42,9 +42,9 @@
     {
         s_self = this;
 
-        if(KonversationApplication::preferences.emotIconsEnabled())
+        if(Preferences::enableEmotIcons())
         {
-            changeTheme(KonversationApplication::preferences.emotIconsTheme());
+            changeTheme(Preferences::emotIconTheme());
         }
     }
 
@@ -148,7 +148,7 @@
 
     QString EmotIcon::filter(const QString& txt, const QFontMetrics& fm)
     {
-        if(!KonversationApplication::preferences.emotIconsEnabled())
+        if(!Preferences::enableEmotIcons())
         {
             return txt;
         }
Index: src/dcctransferrecv.cpp
===================================================================
--- src/dcctransferrecv.cpp	(revision 454905)
+++ src/dcctransferrecv.cpp	(working copy)
@@ -84,7 +84,7 @@
     // add a slash if there is none
     m_fileURL.adjustPath( 1 );
     // Append folder with partner's name if wanted
-    if ( KonversationApplication::preferences.getDccCreateFolder() )
+    if ( Preferences::dccCreateFolder() )
         m_fileURL.addPath( m_partnerNick.lower() + "/" );
 
     if (!kapp->authorize("allow_downloading"))
@@ -106,7 +106,7 @@
         fileNameTmp = "unnamed";
 
     // Append partner's name to file name if wanted
-    if ( KonversationApplication::preferences.getDccAddPartner() )
+    if ( Preferences::dccAddPartner() )
         m_fileURL.addPath( m_partnerNick.lower() + "." + fileNameTmp );
     else
         m_fileURL.addPath( fileNameTmp );
@@ -125,7 +125,7 @@
         return;
     }
 
-    if ( KonversationApplication::preferences.getDccAutoGet() )
+    if ( Preferences::dccAutoGet() )
     {
         kdDebug() << "DccTransferRecv::DccTransferRecv(): starting automatically..." << endl;
         start();
@@ -295,7 +295,7 @@
         disconnect( transferJob, 0, 0, 0 );
         transferJob->kill();
 
-        if ( KonversationApplication::preferences.getDccAutoResume() )
+        if ( Preferences::dccAutoResume() )
             prepareLocalKio( false, true, size );
         else
             askAndPrepareLocalKio( i18n( "<b>A partial file is existing.</b><br>"
Index: src/prefspagecolorsappearance.cpp
===================================================================
--- src/prefspagecolorsappearance.cpp	(revision 454905)
+++ src/prefspagecolorsappearance.cpp	(working copy)
@@ -1,141 +0,0 @@
-/*
-  This program is free software; you can redistribute it and/or modify
-  it under the terms of the GNU General Public License as published by
-  the Free Software Foundation; either version 2 of the License, or
-  (at your option) any later version.
-*/
-
-/*
-  copyright: (C) 2002 by Dario Abatianni
-             (C) 2004 by Peter Simonsson
-         (C) 2004 by İsmail Dönmez
-*/
-
-#include <kcolorbutton.h>
-#include <kdebug.h>
-
-#include <qstringlist.h>
-#include <qcheckbox.h>
-#include <qgroupbox.h>
-
-#include "prefspagecolorsappearance.h"
-#include "colorsappearance_preferences.h"
-#include "preferences.h"
-
-PrefsPageColorsAppearance::PrefsPageColorsAppearance(QWidget* newParent,Preferences* newPreferences)
-: ColorsAppearance_Config(newParent)
-{
-    preferences = newPreferences;
-
-    // Checkboxes
-    kcfg_UseCustomColors->setChecked(preferences->getColorInputFields());
-    coloredNicksGBox->setChecked(preferences->getUseColoredNicks());
-    ircColorsGBox->setChecked(!preferences->getFilterColors());
-
-    // Custom Colors
-    kcfg_ActionColor->setColor("#"+preferences->getColor("ActionMessage"));
-    kcfg_BacklogColor->setColor("#"+preferences->getColor("BacklogMessage"));
-    kcfg_ChannelMessageColor->setColor("#"+preferences->getColor("ChannelMessage"));
-    kcfg_CommandMessageColor->setColor("#"+preferences->getColor("CommandMessage"));
-    kcfg_HyperlinkColor->setColor("#"+preferences->getColor("LinkMessage"));
-    kcfg_QueryMessageColor->setColor("#"+preferences->getColor("QueryMessage"));
-    kcfg_ServerMessageColor->setColor("#"+preferences->getColor("ServerMessage"));
-    kcfg_TimestampColor->setColor("#"+preferences->getColor("Time"));
-    kcfg_BackgroundColor->setColor("#"+preferences->getColor("TextViewBackground"));
-    kcfg_AlternateBackgroundColor->setColor("#"+preferences->getColor("AlternateBackground"));
-
-    // Nick colors
-    QStringList colorList = preferences->getNickColorList();
-    kcfg_NickColor1->setColor(colorList[0]);
-    kcfg_NickColor2->setColor(colorList[1]);
-    kcfg_NickColor3->setColor(colorList[2]);
-    kcfg_NickColor4->setColor(colorList[3]);
-    kcfg_NickColor5->setColor(colorList[4]);
-    kcfg_NickColor6->setColor(colorList[5]);
-    kcfg_NickColor7->setColor(colorList[6]);
-    kcfg_NickColor8->setColor(colorList[7]);
-    if(colorList[8].isEmpty())
-        colorList[8]="#000000";
-    kcfg_NickColor9->setColor(colorList[8]);
-
-    // IRC Color Codes
-    QStringList ircColorList = preferences->getIRCColorList();
-    kcfg_IrcColorCode1->setColor(ircColorList[0]);
-    kcfg_IrcColorCode2->setColor(ircColorList[1]);
-    kcfg_IrcColorCode3->setColor(ircColorList[2]);
-    kcfg_IrcColorCode4->setColor(ircColorList[3]);
-    kcfg_IrcColorCode5->setColor(ircColorList[4]);
-    kcfg_IrcColorCode6->setColor(ircColorList[5]);
-    kcfg_IrcColorCode7->setColor(ircColorList[6]);
-    kcfg_IrcColorCode8->setColor(ircColorList[7]);
-    kcfg_IrcColorCode9->setColor(ircColorList[8]);
-    kcfg_IrcColorCode10->setColor(ircColorList[9]);
-    kcfg_IrcColorCode11->setColor(ircColorList[10]);
-    kcfg_IrcColorCode12->setColor(ircColorList[11]);
-    kcfg_IrcColorCode13->setColor(ircColorList[12]);
-    kcfg_IrcColorCode14->setColor(ircColorList[13]);
-    kcfg_IrcColorCode15->setColor(ircColorList[14]);
-    kcfg_IrcColorCode16->setColor(ircColorList[15]);
-
-}
-
-PrefsPageColorsAppearance::~PrefsPageColorsAppearance()
-{
-}
-
-void PrefsPageColorsAppearance::applyPreferences()
-{
-    // Custom Colors
-    preferences->setColor("ActionMessage",kcfg_ActionColor->color().name().mid(1));
-    preferences->setColor("BacklogMessage",kcfg_BacklogColor->color().name().mid(1));
-    preferences->setColor("ChannelMessage",kcfg_ChannelMessageColor->color().name().mid(1));
-    preferences->setColor("CommandMessage",kcfg_CommandMessageColor->color().name().mid(1));
-    preferences->setColor("LinkMessage",kcfg_HyperlinkColor->color().name().mid(1));
-    preferences->setColor("QueryMessage",kcfg_QueryMessageColor->color().name().mid(1));
-    preferences->setColor("ServerMessage",kcfg_ServerMessageColor->color().name().mid(1));
-    preferences->setColor("Time",kcfg_TimestampColor->color().name().mid(1));
-    preferences->setColor("TextViewBackground",kcfg_BackgroundColor->color().name().mid(1));
-    preferences->setColor("AlternateBackground",kcfg_AlternateBackgroundColor->color().name().mid(1));
-
-    // Nick colors
-    QStringList nickColorList;
-
-    nickColorList.append(kcfg_NickColor1->color().name());
-    nickColorList.append(kcfg_NickColor2->color().name());
-    nickColorList.append(kcfg_NickColor3->color().name());
-    nickColorList.append(kcfg_NickColor4->color().name());
-    nickColorList.append(kcfg_NickColor5->color().name());
-    nickColorList.append(kcfg_NickColor6->color().name());
-    nickColorList.append(kcfg_NickColor7->color().name());
-    nickColorList.append(kcfg_NickColor8->color().name());
-    nickColorList.append(kcfg_NickColor9->color().name());
-    preferences->setNickColorList(nickColorList);
-
-    // IRC Colors
-    QStringList ircColorList;
-
-    ircColorList.append(kcfg_IrcColorCode1->color().name());
-    ircColorList.append(kcfg_IrcColorCode2->color().name());
-    ircColorList.append(kcfg_IrcColorCode3->color().name());
-    ircColorList.append(kcfg_IrcColorCode4->color().name());
-    ircColorList.append(kcfg_IrcColorCode5->color().name());
-    ircColorList.append(kcfg_IrcColorCode6->color().name());
-    ircColorList.append(kcfg_IrcColorCode7->color().name());
-    ircColorList.append(kcfg_IrcColorCode8->color().name());
-    ircColorList.append(kcfg_IrcColorCode9->color().name());
-    ircColorList.append(kcfg_IrcColorCode10->color().name());
-    ircColorList.append(kcfg_IrcColorCode11->color().name());
-    ircColorList.append(kcfg_IrcColorCode12->color().name());
-    ircColorList.append(kcfg_IrcColorCode13->color().name());
-    ircColorList.append(kcfg_IrcColorCode14->color().name());
-    ircColorList.append(kcfg_IrcColorCode15->color().name());
-    ircColorList.append(kcfg_IrcColorCode16->color().name());
-    preferences->setIRCColorList(ircColorList);
-
-    // Checkboxes
-    preferences->setColorInputFields(kcfg_UseCustomColors->isChecked());
-    preferences->setUseColoredNicks(coloredNicksGBox->isChecked());
-    preferences->setFilterColors(!ircColorsGBox->isChecked());
-}
-
-#include "prefspagecolorsappearance.moc"
Index: src/ledtabbar.cpp
===================================================================
--- src/ledtabbar.cpp	(revision 454905)
+++ src/ledtabbar.cpp	(working copy)
@@ -194,7 +194,7 @@
     }
 
     // do we want close widgets on the tabs?
-    if(KonversationApplication::preferences.getCloseButtonsOnTabs())
+    if(Preferences::closeButtonsOnTabs())
     {
         QStyle::SFlags flags = QStyle::Style_Default;
 
@@ -238,9 +238,9 @@
         int y=r.top()+r.height()/2;
         int x2=r.right()-4-iw;
 
-        if(KonversationApplication::preferences.getCloseButtonsOnTabs())
+        if(Preferences::closeButtonsOnTabs())
         {
-            if(KonversationApplication::preferences.getCloseButtonsAlignRight())
+            if(Preferences::closeButtonsAlignRight())
             {
                 x-=(LABEL_OFFSET/2+2);
                 x2+=(LABEL_OFFSET/2-2);
@@ -281,9 +281,9 @@
         r.setRight( r.right() + 2);
 
         // do we want close widgets on the tabs?
-        if(KonversationApplication::preferences.getCloseButtonsOnTabs())
+        if(Preferences::closeButtonsOnTabs())
         {
-            if(!KonversationApplication::preferences.getCloseButtonsAlignRight())
+            if(!Preferences::closeButtonsAlignRight())
             {
                 // Shift the text to the right
                 r.setLeft( r.left() + LABEL_OFFSET);
@@ -354,7 +354,7 @@
     QTabBar::layoutTabs();
 
     // do we want close widgets on the tabs?
-    if(KonversationApplication::preferences.getCloseButtonsOnTabs())
+    if(Preferences::closeButtonsOnTabs())
     {
         // make necessary modifications
         int offset=0;
@@ -380,7 +380,7 @@
 void LedTabBar::mouseReleaseEvent(QMouseEvent* e)
 {
     // do we have close widgets on the tabs?
-    if(KonversationApplication::preferences.getCloseButtonsOnTabs())
+    if(Preferences::closeButtonsOnTabs())
     {
         if(e->button()==LeftButton)
         {
@@ -390,7 +390,7 @@
             QRect target(t->rect());
 
             // move target area to aprop. place
-            if(KonversationApplication::preferences.getCloseButtonsAlignRight())
+            if(Preferences::closeButtonsAlignRight())
                 target.moveBy(target.width() - 20,4);
             else
                 target.moveBy(8,4);
Index: src/editnotifydialog.cpp
===================================================================
--- src/editnotifydialog.cpp	(revision 454905)
+++ src/editnotifydialog.cpp	(working copy)
@@ -61,7 +61,7 @@
     // Build a list of unique server network names.
     // TODO: The "ServerGroupList type is a misnomer (it is actually networks), which
     // should be fixed at some point.
-    Konversation::ServerGroupList serverNetworks = KonversationApplication::preferences.serverGroupList();
+    Konversation::ServerGroupList serverNetworks = Preferences::serverGroupList();
     QStringList networkNames;
 
     for(Konversation::ServerGroupList::iterator it = serverNetworks.begin(); it != serverNetworks.end(); ++it)
Index: src/osd_preferences.ui
===================================================================
--- src/osd_preferences.ui	(revision 454905)
+++ src/osd_preferences.ui	(working copy)
@@ -58,7 +58,7 @@
                         <string>&amp;Duration:</string>
                     </property>
                     <property name="buddy" stdset="0">
-                        <cstring>kcfg_OsdDuration</cstring>
+                        <cstring>kcfg_OSDDuration</cstring>
                     </property>
                 </widget>
                 <widget class="QLabel" row="1" column="0">
@@ -69,12 +69,12 @@
                         <string>S&amp;creen:</string>
                     </property>
                     <property name="buddy" stdset="0">
-                        <cstring>kcfg_OsdScreen</cstring>
+                        <cstring>kcfg_OSDScreen</cstring>
                     </property>
                 </widget>
                 <widget class="QSpinBox" row="0" column="1">
                     <property name="name">
-                        <cstring>kcfg_OsdDuration</cstring>
+                        <cstring>kcfg_OSDDuration</cstring>
                     </property>
                     <property name="suffix">
                         <string> ms</string>
@@ -91,7 +91,7 @@
                 </widget>
                 <widget class="KComboBox" row="1" column="1">
                     <property name="name">
-                        <cstring>kcfg_OsdScreen</cstring>
+                        <cstring>kcfg_OSDScreen</cstring>
                     </property>
                 </widget>
                 <spacer row="0" column="2" rowspan="2" colspan="1">
@@ -115,7 +115,7 @@
         </widget>
         <widget class="QGroupBox" row="3" column="0">
             <property name="name">
-                <cstring>kcfg_OsdCustomColor</cstring>
+                <cstring>kcfg_OSDUseCustomColors</cstring>
             </property>
             <property name="enabled">
                 <bool>false</bool>
@@ -141,7 +141,7 @@
                         <string>Te&amp;xt color:</string>
                     </property>
                     <property name="buddy" stdset="0">
-                        <cstring>kcfg_OsdTextColor</cstring>
+                        <cstring>kcfg_OSDTextColor</cstring>
                     </property>
                 </widget>
                 <widget class="QLabel" row="2" column="0">
@@ -152,17 +152,17 @@
                         <string>&amp;Background color:</string>
                     </property>
                     <property name="buddy" stdset="0">
-                        <cstring>kcfg_OsdBackgroundColor</cstring>
+                        <cstring>kcfg_OSDBackgroundColor</cstring>
                     </property>
                 </widget>
                 <widget class="KColorCombo" row="2" column="1">
                     <property name="name">
-                        <cstring>kcfg_OsdBackgroundColor</cstring>
+                        <cstring>kcfg_OSDBackgroundColor</cstring>
                     </property>
                 </widget>
                 <widget class="KColorCombo" row="1" column="1">
                     <property name="name">
-                        <cstring>kcfg_OsdTextColor</cstring>
+                        <cstring>kcfg_OSDTextColor</cstring>
                     </property>
                 </widget>
                 <spacer row="1" column="2" rowspan="2" colspan="1">
@@ -200,7 +200,7 @@
                 </property>
                 <widget class="QCheckBox" row="0" column="0">
                     <property name="name">
-                        <cstring>kcfg_OsdNickAppear</cstring>
+                        <cstring>kcfg_OSDShowOwnNick</cstring>
                     </property>
                     <property name="text">
                         <string>&amp;If own nick appears in channel message</string>
@@ -208,7 +208,7 @@
                 </widget>
                 <widget class="QCheckBox" row="1" column="0">
                     <property name="name">
-                        <cstring>kcfg_OsdChannelMessage</cstring>
+                        <cstring>kcfg_OSDShowChannel</cstring>
                     </property>
                     <property name="text">
                         <string>On an&amp;y channel message</string>
@@ -216,7 +216,7 @@
                 </widget>
                 <widget class="QCheckBox" row="2" column="0">
                     <property name="name">
-                        <cstring>kcfg_OsdQueryActivity</cstring>
+                        <cstring>kcfg_OSDShowQuery</cstring>
                     </property>
                     <property name="text">
                         <string>On &amp;query activity</string>
@@ -224,7 +224,7 @@
                 </widget>
                 <widget class="QCheckBox" row="3" column="0">
                     <property name="name">
-                        <cstring>kcfg_OsdJoinPart</cstring>
+                        <cstring>kcfg_OSDShowChannelEvent</cstring>
                     </property>
                     <property name="text">
                         <string>On &amp;Join/Part events</string>
@@ -245,7 +245,7 @@
                 </property>
                 <widget class="QCheckBox" row="1" column="0" rowspan="1" colspan="2">
                     <property name="name">
-                        <cstring>kcfg_OsdDrawShadow</cstring>
+                        <cstring>kcfg_OSDDrawShadow</cstring>
                     </property>
                     <property name="enabled">
                         <bool>false</bool>
@@ -273,7 +273,7 @@
                 </widget>
                 <widget class="KFontRequester" row="2" column="1">
                     <property name="name">
-                        <cstring>kcfg_OsdFont</cstring>
+                        <cstring>kcfg_OSDFont</cstring>
                     </property>
                     <property name="enabled">
                         <bool>false</bool>
@@ -283,7 +283,7 @@
         </widget>
         <widget class="QCheckBox" row="0" column="0">
             <property name="name">
-                <cstring>kcfg_UseOsdDisplay</cstring>
+                <cstring>kcfg_UseOSD</cstring>
             </property>
             <property name="text">
                 <string>&amp;Enable On Screen Display</string>
@@ -293,39 +293,39 @@
 </widget>
 <connections>
     <connection>
-        <sender>kcfg_UseOsdDisplay</sender>
+        <sender>kcfg_UseOSD</sender>
         <signal>toggled(bool)</signal>
-        <receiver>kcfg_OsdDrawShadow</receiver>
+        <receiver>kcfg_OSDDrawShadow</receiver>
         <slot>setEnabled(bool)</slot>
     </connection>
     <connection>
-        <sender>kcfg_UseOsdDisplay</sender>
+        <sender>kcfg_UseOSD</sender>
         <signal>toggled(bool)</signal>
         <receiver>groupBox3</receiver>
         <slot>setEnabled(bool)</slot>
     </connection>
     <connection>
-        <sender>kcfg_UseOsdDisplay</sender>
+        <sender>kcfg_UseOSD</sender>
         <signal>toggled(bool)</signal>
-        <receiver>kcfg_OsdCustomColor</receiver>
+        <receiver>kcfg_OSDUseCustomColors</receiver>
         <slot>setEnabled(bool)</slot>
     </connection>
     <connection>
-        <sender>kcfg_UseOsdDisplay</sender>
+        <sender>kcfg_UseOSD</sender>
         <signal>toggled(bool)</signal>
         <receiver>groupBox4</receiver>
         <slot>setEnabled(bool)</slot>
     </connection>
     <connection>
-        <sender>kcfg_UseOsdDisplay</sender>
+        <sender>kcfg_UseOSD</sender>
         <signal>toggled(bool)</signal>
         <receiver>textLabel1</receiver>
         <slot>setEnabled(bool)</slot>
     </connection>
     <connection>
-        <sender>kcfg_UseOsdDisplay</sender>
+        <sender>kcfg_UseOSD</sender>
         <signal>toggled(bool)</signal>
-        <receiver>kcfg_OsdFont</receiver>
+        <receiver>kcfg_OSDFont</receiver>
         <slot>setEnabled(bool)</slot>
     </connection>
 </connections>
Index: src/logfilereader.cpp
===================================================================
--- src/logfilereader.cpp	(revision 454905)
+++ src/logfilereader.cpp	(working copy)
@@ -50,7 +50,7 @@
     new QLabel(i18n("Show last:"),toolBar,"logfile_size_label");
     sizeSpin = new QSpinBox(10,1000,10,toolBar,"logfile_size_spinbox");
     QWhatsThis::add(sizeSpin, i18n("Use this box to set the maximum size of the log file. This setting does not take effect until you restart Konversation. Each log file may have a separate setting."));
-    sizeSpin->setValue(KonversationApplication::preferences.getLogfileBufferSize());
+    sizeSpin->setValue(Preferences::logfileBufferSize());
     sizeSpin->setSuffix(i18n(" KB"));
 
     toolBar->insertButton("reload",0,SIGNAL(clicked()),this,SLOT(updateView()),true,i18n("Reload"));
@@ -61,13 +61,13 @@
     QWhatsThis::add(getTextView(), i18n("The messages in the log file are displayed here. The oldest messages are at the top and the most recent are at the bottom."));
 
     updateView();
-    resize(KonversationApplication::preferences.getLogfileReaderSize());
+    resize(Preferences::logfileReaderSize());
 }
 
 LogfileReader::~LogfileReader()
 {
-    KonversationApplication::preferences.setLogfileReaderSize(size());
-    KonversationApplication::preferences.setLogfileBufferSize(sizeSpin->value());
+    Preferences::setLogfileReaderSize(size());
+    Preferences::setLogfileBufferSize(sizeSpin->value());
 
     delete toolBar;
 }
Index: src/channeloptionsdialog.cpp
===================================================================
--- src/channeloptionsdialog.cpp	(revision 454905)
+++ src/channeloptionsdialog.cpp	(working copy)
@@ -73,7 +73,7 @@
 
         if(newTopic != m_channel->getTopicHistory().first().section(' ', 1))
         {
-            m_channel->sendChannelText(KonversationApplication::preferences.getCommandChar() + "TOPIC " + m_channel->getName() + " " + newTopic);
+            m_channel->sendChannelText(Preferences::commandChar() + "TOPIC " + m_channel->getName() + " " + newTopic);
         }
 
         QStringList newModeList = modes();
Index: src/generalbehavior_preferences.ui
===================================================================
--- src/generalbehavior_preferences.ui	(revision 454905)
+++ src/generalbehavior_preferences.ui	(working copy)
@@ -27,7 +27,7 @@
         </property>
         <widget class="QGroupBox" row="0" column="0">
             <property name="name">
-                <cstring>systrayGBox</cstring>
+                <cstring>kcfg_ShowTrayIcon</cstring>
             </property>
             <property name="title">
                 <string>Enable System Tray</string>
@@ -44,7 +44,7 @@
                 </property>
                 <widget class="QCheckBox" row="0" column="0" rowspan="1" colspan="2">
                     <property name="name">
-                        <cstring>trayNotifyCheck</cstring>
+                        <cstring>kcfg_TrayNotify</cstring>
                     </property>
                     <property name="text">
                         <string>Use sys&amp;tem tray for new message notification</string>
@@ -69,7 +69,7 @@
                 </spacer>
                 <widget class="QCheckBox" row="1" column="1">
                     <property name="name">
-                        <cstring>trayNotifyOwnNickOnlyCheck</cstring>
+                        <cstring>kcfg_TrayNotifyOnlyOwnNick</cstring>
                     </property>
                     <property name="enabled">
                         <bool>false</bool>
@@ -314,9 +314,9 @@
 </widget>
 <connections>
     <connection>
-        <sender>trayNotifyCheck</sender>
+        <sender>kcfg_TrayNotify</sender>
         <signal>toggled(bool)</signal>
-        <receiver>trayNotifyOwnNickOnlyCheck</receiver>
+        <receiver>kcfg_TrayNotifyOnlyOwnNick</receiver>
         <slot>setEnabled(bool)</slot>
     </connection>
     <connection>
Index: src/prefspagecolorsappearance.h
===================================================================
--- src/prefspagecolorsappearance.h	(revision 454905)
+++ src/prefspagecolorsappearance.h	(working copy)
@@ -1,35 +0,0 @@
-/*
-  This program is free software; you can redistribute it and/or modify
-  it under the terms of the GNU General Public License as published by
-  the Free Software Foundation; either version 2 of the License, or
-  (at your option) any later version.
-*/
-
-/*
-  copyright: (C) 2002 by Dario Abatianni
-             (C) 2004 by Peter Simonsson
-         (C) 2004 by İsmail Dönmez
-*/
-#ifndef PREFSPAGECOLORSAPPEARANCE_H
-#define PREFSPAGECOLORSAPPEARANCE_H
-
-#include <qframe.h>
-
-#include "colorsappearance_preferences.h"
-
-class Preferences;
-
-class PrefsPageColorsAppearance : public ColorsAppearance_Config
-{
-    Q_OBJECT
-        public:
-        PrefsPageColorsAppearance(QWidget* newParent,Preferences* newPreferences);
-        ~PrefsPageColorsAppearance();
-
-    public slots:
-        void applyPreferences();
-
-    protected:
-        Preferences* preferences;
-};
-#endif
Index: src/Makefile.am
===================================================================
--- src/Makefile.am	(revision 454905)
+++ src/Makefile.am	(working copy)
@@ -1,4 +1,4 @@
-SUBDIRS = blowfish linkaddressbook
+SUBDIRS = linkaddressbook blowfish .
 
 METASOURCES = AUTO
 
@@ -6,35 +6,35 @@
 bin_SCRIPTS = konversationircprotocolhandler
 
 konversation_SOURCES = konviface.skel\
-	 konversationmainwindow.cpp valuelistviewitem.cpp urlcatcher.cpp searchdialog.cpp prefspagehighlight.cpp \
-	 scriptlauncher.cpp rawlog.cpp prefspagenotify.cpp prefspagedialogs.cpp \
-	 prefspagebuttons.cpp konvdcop.cpp channellistpanel.cpp konsolepanel.cpp \
-	 dcctransferhandler.cpp prefspageignore.cpp identity.cpp \
-	 statuspanel.cpp dccrecipientdialog.cpp topiccombobox.cpp prefspagelog.cpp prefspagedccsettings.cpp \
-	 nicksonline.cpp prefspage.cpp dccpanel.cpp dcctransfer.cpp nicklistviewitem.cpp \
+	 konversationmainwindow.cpp valuelistviewitem.cpp urlcatcher.cpp searchdialog.cpp \
+	 scriptlauncher.cpp rawlog.cpp \
+	 konvdcop.cpp channellistpanel.cpp konsolepanel.cpp \
+	 dcctransferhandler.cpp identity.cpp \
+	 statuspanel.cpp dccrecipientdialog.cpp topiccombobox.cpp \
+	 nicksonline.cpp dccpanel.cpp dcctransfer.cpp nicklistviewitem.cpp \
 	 highlight.cpp highlightviewitem.cpp modebutton.cpp ignorelistviewitem.cpp \
 	 ignorecheckbox.cpp ignore.cpp nicklistview.cpp ircinput.cpp \
-	 images.cpp prefsdialog.cpp quickbutton.cpp preferences.cpp \
+	 images.cpp quickbutton.cpp preferences.cpp \
 	 chatwindow.cpp outputfilter.cpp query.cpp konversationapplication.cpp nick.cpp \
          inputfilter.cpp channel.cpp ircview.cpp server.cpp main.cpp dcc_preferences.ui \
 	 log_preferences.ui tabbar_preferences.ui chatwindowappearance_preferences.ui \
          irccolorchooserui.ui colorsappearance_preferences.ui irccolorchooser.cpp \
-	 prefspagealiases.cpp channellistviewitem.cpp osd.cpp prefspageosd.cpp ircevent.cpp \
-         trayicon.cpp prefspagetabbehavior.cpp dccchat.cpp logfilereader.cpp \
+	 channellistviewitem.cpp osd.cpp ircevent.cpp \
+         trayicon.cpp dccchat.cpp logfilereader.cpp \
 	 multilineedit.cpp nickinfo.cpp dccresumedialog.cpp konversationsound.cpp \
-	 quickconnectdialog.cpp prefspagebehaviour.cpp prefspagechatwinbehavior.cpp \
-	 prefspagechatwinappearance.cpp prefspagecolorsappearance.cpp serverlistdialog.cpp \
+	 quickconnectdialog.cpp \
+	 serverlistdialog.cpp \
 	 dcctransfersend.cpp dcctransferrecv.cpp channelnick.cpp dccdetaildialog.cpp \
 	 insertchardialog.cpp irccharsets.cpp editnotifydialog.cpp common.cpp serverison.cpp \
 	 sslsocket.cpp servergroupsettings.cpp serversettings.cpp servergroupdialog.cpp \
 	 ssllabel.cpp serverdialog.cpp channeldialog.cpp identitydialog.cpp topiclabel.cpp \
-	 channeloptionsui.ui channeloptionsdialog.cpp prefspagethemes.cpp notificationhandler.cpp \
-	 joinchannelui.ui joinchanneldialog.cpp konversation_settings.kcfgc emoticon.cpp \
+	 channeloptionsui.ui channeloptionsdialog.cpp notificationhandler.cpp \
+	 joinchannelui.ui joinchanneldialog.cpp preferences_base.kcfgc emoticon.cpp \
          chatwindowbehaviour_preferences.ui alias_preferences.ui osd_preferences.ui theme_preferences.ui \
 	 highlight_preferences.ui warnings_preferences.ui quickbuttons_preferences.ui \
 	 watchednicknames_preferences.ui generalbehavior_preferences.ui connectionbehavior_preferences.ui \
-	 prefspageconnectionbehavior.cpp fontappearance_preferences.ui prefspagefontsappearance.cpp \
-	 nicklistbehavior_preferences.ui prefspagenicklistbehavior.cpp \
+	 fontappearance_preferences.ui \
+	 nicklistbehavior_preferences.ui \
 	 konvibookmarkhandler.cpp konvibookmarkmenu.cpp popup.cpp ircviewbox.cpp searchbar.cpp
 
 konversation_LDADD = $(LIB_KIO) $(LIB_KABC) $(LIB_KIMIFACE) linkaddressbook/liblinkaddressbookui.la blowfish/libblowfish.la
@@ -64,10 +64,9 @@
 		$(XGETTEXT) $$LIST -o $(podir)/konversation.pot; \
 	fi
 
-noinst_HEADERS = prefspagebehaviour.h prefspagechatwinbehavior.h 	 		 \
-		prefspagechatwinappearance.h prefspagecolorsappearance.h serverlistdialog.h dcctransfersend.h 		 \
+noinst_HEADERS =serverlistdialog.h dcctransfersend.h 		 \
 		dcctransferrecv.h dccdetaildialog.h insertchardialog.h editnotifydialog.h serverison.h 		 \
 		servergroupsettings.h serversettings.h	servergroupdialog.h serverdialog.h channeldialog.h 		 \
 		identitydialog.h topiclabel.h channeloptionsdialog.h joinchanneldialog.h \
-		prefspageconnectionbehavior.h prefspagefontsappearance.h prefspagenicklistbehavior.h popup.h
+		popup.h
 
Index: src/trayicon.cpp
===================================================================
--- src/trayicon.cpp	(revision 454905)
+++ src/trayicon.cpp	(working copy)
@@ -39,8 +39,8 @@
         m_blinkTimer = new QTimer(this);
         connect(m_blinkTimer, SIGNAL(timeout()), SLOT(blinkTimeout()));
 
-        if(KonversationApplication::preferences.getShowTrayIcon() &&
-            KonversationApplication::preferences.getSystrayOnly())
+        if(Preferences::showTrayIcon() &&
+            Preferences::systrayOnly())
             KWin::setState(parent->winId(), NET::SkipTaskbar);
 
         QToolTip::add(this,i18n("Konversation - IRC Client"));
@@ -90,8 +90,8 @@
 
     void TrayIcon::mousePressEvent(QMouseEvent *e)
     {
-        if(KonversationApplication::preferences.getShowTrayIcon() &&
-            KonversationApplication::preferences.getSystrayOnly())
+        if(Preferences::showTrayIcon() &&
+            Preferences::systrayOnly())
         {
             KWin::setState(static_cast<QWidget*>(parent())->winId(), NET::SkipTaskbar);
         }
Index: src/ledtab.cpp
===================================================================
--- src/ledtab.cpp	(revision 454905)
+++ src/ledtab.cpp	(working copy)
@@ -52,7 +52,7 @@
     if(state!=Off)
     {
         // if the user wants us to blink, toggle LED blink status
-        if(KonversationApplication::preferences.getBlinkingTabs())
+        if(Preferences::blinkingTabs())
         {
             blinkOn=!blinkOn;
             // draw the new LED
Index: src/ircinput.cpp
===================================================================
--- src/ircinput.cpp	(revision 454905)
+++ src/ircinput.cpp	(working copy)
@@ -382,7 +382,7 @@
     // did we find the nick in the middle of the line?
     if(pos)
     {
-        QString addMiddle(KonversationApplication::preferences.getNickCompleteSuffixMiddle());
+        QString addMiddle(Preferences::nickCompleteSuffixMiddle());
         line.insert(pos, nick + addMiddle);
         pos += nick.length() + addMiddle.length();
     }
@@ -390,7 +390,7 @@
     else
     {
         setLastCompletion(nick);
-        QString addStart(KonversationApplication::preferences.getNickCompleteSuffixStart());
+        QString addStart(Preferences::nickCompleteSuffixStart());
         line.insert(pos, nick + addStart);
         pos += nick.length() + addStart.length();
     }
Index: src/serverison.cpp
===================================================================
--- src/serverison.cpp	(revision 454905)
+++ src/serverison.cpp	(working copy)
@@ -88,7 +88,7 @@
 void ServerISON::recalculateAddressees()
 {
     // If not watching nicks, no need to build notify list.
-    if (KonversationApplication::preferences.getUseNotify())
+    if (Preferences::useNotify())
     {
         // Get all nicks known to be online.
         const NickInfoMap* allNicks = m_server->getAllNicks();
@@ -170,7 +170,7 @@
         // TODO: Don't add nick on user watch list if nick is known to be online
         // under a different nickname?
         QStringList prefsWatchList =
-            KonversationApplication::preferences.getNotifyListByGroup(m_server->getServerGroup());
+            Preferences::notifyListByGroup(m_server->getServerGroup());
         QStringList::iterator itEnd = prefsWatchList.end();
 
         for(QStringList::iterator it = prefsWatchList.begin(); it != itEnd; ++it)
Index: src/query.cpp
===================================================================
--- src/query.cpp	(revision 454905)
+++ src/query.cpp	(working copy)
@@ -100,7 +100,7 @@
 
     updateFonts();
 
-    setLog(KonversationApplication::preferences.getLog());
+    setLog(Preferences::log());
 }
 
 Query::~Query()
@@ -116,11 +116,11 @@
     // This will prevent Nick-Changers to create more than one log file,
     // unless we want this by turning the option Log Follows Nick off.
 
-    if((logName.isEmpty()) || !(KonversationApplication::preferences.getLogFollowsNick()))
+    if((logName.isEmpty()) || !(Preferences::logFollowsNick()))
     {
-        QString logName =  (KonversationApplication::preferences.getLowerLog()) ? getName().lower() : getName() ;
+        QString logName =  (Preferences::lowerLog()) ? getName().lower() : getName() ;
 
-        if(KonversationApplication::preferences.getAddHostnameToLog())
+        if(Preferences::addHostnameToLog())
         {
             if(m_nickInfo)
                 logName += m_nickInfo->getHostmask();
@@ -144,7 +144,7 @@
 
 void Query::queryPassthroughCommand()
 {
-    QString commandChar = KonversationApplication::preferences.getCommandChar();
+    QString commandChar = Preferences::commandChar();
     QString line = queryInput->text();
 
     queryInput->clear();
@@ -187,41 +187,38 @@
 
 void Query::updateFonts()
 {
-    QString fgString;
-    QString bgString;
+    QColor fg;
+    QColor bg;
 
-    if(KonversationApplication::preferences.getColorInputFields())
+    if(Preferences::inputFieldsBackgroundColor())
     {
-        fgString="#"+KonversationApplication::preferences.getColor("ChannelMessage");
-        bgString="#"+KonversationApplication::preferences.getColor("TextViewBackground");
+        fg=Preferences::color(Preferences::ChannelMessage);
+        bg=Preferences::color(Preferences::TextViewBackground);
     }
     else
     {
-        fgString=colorGroup().foreground().name();
-        bgString=colorGroup().base().name();
+        fg=colorGroup().foreground();
+        bg=colorGroup().base();
     }
 
-    const QColor fg(fgString);
-    const QColor bg(bgString);
-
     queryInput->setPaletteForegroundColor(fg);
     queryInput->setPaletteBackgroundColor(bg);
-    queryInput->setFont(KonversationApplication::preferences.getTextFont());
+    queryInput->setFont(Preferences::textFont());
 
     //  queryHostmask->setPaletteForegroundColor(fg);
     //  queryHostmask->setPaletteBackgroundColor(bg);
-    //  queryHostmask->setFont(KonversationApplication::preferences.getTextFont());
+    //  queryHostmask->setFont(Preferences::textFont());
 
-    getTextView()->setFont(KonversationApplication::preferences.getTextFont());
+    getTextView()->setFont(Preferences::textFont());
 
-    if(KonversationApplication::preferences.getShowBackgroundImage())
+    if(Preferences::showBackgroundImage())
     {
-        getTextView()->setViewBackground(KonversationApplication::preferences.getColor("TextViewBackground"),
-            KonversationApplication::preferences.getBackgroundImageName());
+        getTextView()->setViewBackground(Preferences::color(Preferences::TextViewBackground),
+            Preferences::backgroundImage());
     }
     else
     {
-        getTextView()->setViewBackground(KonversationApplication::preferences.getColor("TextViewBackground"),
+        getTextView()->setViewBackground(Preferences::color(Preferences::TextViewBackground),
             QString::null);
     }
 }
@@ -234,7 +231,7 @@
         for(unsigned int index=0;index<multiline.count();index++)
         {
             QString line=multiline[index];
-            QString cChar(KonversationApplication::preferences.getCommandChar());
+            QString cChar(Preferences::commandChar());
             // make sure that lines starting with command char get escaped
             if(line.startsWith(cChar)) line=cChar+line;
             sendQueryText(line);
@@ -273,10 +270,10 @@
 void Query::popup(int id)
 {
     if(id==POPUP_WHOIS)
-        sendQueryText(KonversationApplication::preferences.getCommandChar()+"WHOIS "+getName());
+        sendQueryText(Preferences::commandChar()+"WHOIS "+getName());
     else if(id==POPUP_IGNORE)
     {
-        sendQueryText(KonversationApplication::preferences.getCommandChar()+"IGNORE -ALL "+getName()+"!*");
+        sendQueryText(Preferences::commandChar()+"IGNORE -ALL "+getName()+"!*");
         int rc=KMessageBox::questionYesNo(this,
             i18n("Do you want to close this query after ignoring this nickname?"),
             i18n("Close This Query"),
@@ -403,12 +400,12 @@
                                                   // virtual
 void Query::setChannelEncoding(const QString& encoding)
 {
-    KonversationApplication::preferences.setChannelEncoding(m_server->getServerGroup(), getName(), encoding);
+    Preferences::setChannelEncoding(m_server->getServerGroup(), getName(), encoding);
 }
 
 QString Query::getChannelEncoding()               // virtual
 {
-    return KonversationApplication::preferences.getChannelEncoding(m_server->getServerGroup(), getName());
+    return Preferences::channelEncoding(m_server->getServerGroup(), getName());
 }
 
 QString Query::getChannelEncodingDefaultDesc()    // virtual
Index: src/ircview.cpp
===================================================================
--- src/ircview.cpp	(revision 454905)
+++ src/ircview.cpp	(working copy)
@@ -53,6 +53,7 @@
 #include "channel.h"
 #include "konversationapplication.h"
 #include "konversationmainwindow.h"
+#include "preferences.h"
 #include "ircview.h"
 #include "highlight.h"
 #include "server.h"
@@ -91,8 +92,8 @@
     setStyleSheet(sheet);
 
     setServer(newServer);
-    setFont(KonversationApplication::preferences.getTextFont());
-    setViewBackground(KonversationApplication::preferences.getColor("TextViewBackground"),QString::null);
+    setFont(Preferences::textFont());
+    setViewBackground(Preferences::color(Preferences::TextViewBackground),QString::null);
 
     m_popup = new QPopupMenu(this,"ircview_context_menu");
     m_popup->insertItem(SmallIconSet("editcopy"),i18n("&Copy"),Copy);
@@ -128,8 +129,8 @@
 
     int paragraphSpacing;
 
-    if(KonversationApplication::preferences.getUseParagraphSpacing())
-        paragraphSpacing=KonversationApplication::preferences.getParagraphSpacing();
+    if(Preferences::useParagraphSpacing())
+        paragraphSpacing=Preferences::paragraphSpacing();
     else
         paragraphSpacing = 0;
 
@@ -146,9 +147,8 @@
     style->setSelfNesting(false);
 }
 
-void IRCView::setViewBackground(const QString& color, const QString& pixmapName)
+void IRCView::setViewBackground(const QColor& backgroundColor, const QString& pixmapName)
 {
-    QColor backgroundColor("#"+color);
     QPixmap backgroundPixmap;
     backgroundPixmap.load(pixmapName);
 
@@ -224,7 +224,7 @@
     if (!url.isEmpty() && !url.startsWith("#"))
     {
         // Always use KDE default mailer.
-        if (KonversationApplication::preferences.getWebBrowserUseKdeDefault() || url.startsWith("mailto:"))
+        if (Preferences::webBrowserUseKdeDefault() || url.startsWith("mailto:"))
         {
             if(newTab && !url.startsWith("mailto:"))
             {
@@ -242,7 +242,7 @@
         }
         else
         {
-            QString cmd = KonversationApplication::preferences.getWebBrowserCmd();
+            QString cmd = Preferences::webBrowserCmd();
             cmd.replace("%u", url);
             KProcess *proc = new KProcess;
             QStringList cmdAndArgs = KShell::splitArgs(cmd);
@@ -294,7 +294,7 @@
     filteredLine.replace(">","&gt;");
 
     #if 0
-    if(!KonversationApplication::preferences.getDisableExpansion())
+    if(!Preferences::disableExpansion())
     {
         QRegExp boldRe("\\*\\*([a-zA-Z0-9]+)\\*\\*");
         QRegExp underRe("\\_\\_([a-zA-Z0-9]+)\\_\\_");
@@ -333,8 +333,8 @@
 
     bool inverted = false;                        // TODO this flag should be stored somewhere
     {
-        QColor fg("#"+KonversationApplication::preferences.getColor("ChannelMessage"));
-        QColor  bg("#"+KonversationApplication::preferences.getColor("TextViewBackground"));
+        QColor fg(Preferences::color(Preferences::ChannelMessage));
+        QColor  bg(Preferences::color(Preferences::TextViewBackground));
 
         int h = 0, s = 0,fv = 0,bv = 0;
         fg.getHsv(&h,&s,&fv);
@@ -360,7 +360,7 @@
 
     if(filteredLine.find("\x07") != -1)
     {
-        if(KonversationApplication::preferences.getBeep())
+        if(Preferences::beep())
         {
             kapp->beep();
         }
@@ -371,10 +371,9 @@
     QRegExp colorRegExp("(\003([0-9]|0[0-9]|1[0-5])(,([0-9]|0[0-9]|1[0-5])|)|\017)");
 
     int pos;
-    bool filterColors = KonversationApplication::preferences.getFilterColors();
+    bool filterColors = Preferences::filterColors();
     bool firstColor = true;
     QString colorString;
-    QStringList colorCodes = KonversationApplication::preferences.getIRCColorList();
 
     while((pos=colorRegExp.search(filteredLine))!=-1)
     {
@@ -388,11 +387,11 @@
 
             // reset colors on \017 to default value
             if(colorRegExp.cap(1) == "\017")
-                colorString += "<font color=\"#"+defaultColor+"\">";
+                colorString += "<font color=\""+defaultColor+"\">";
             else
             {
                 int foregroundColor = colorRegExp.cap(2).toInt();
-                colorString += "<font color=\"" + colorCodes[foregroundColor] + "\">";
+                colorString += "<font color=\"" + Preferences::color(foregroundColor).name() + "\">";
             }
 
             firstColor = false;
@@ -433,18 +432,18 @@
         QString highlightColor;
 
         // FIXME: We got to get rid of m_server dependance here
-        if(KonversationApplication::preferences.getHighlightNick() &&
+        if(Preferences::highlightNick() &&
             filteredLine.lower().find(QRegExp("(^|[^\\d\\w])" +
             QRegExp::escape(ownNick.lower()) +
             "([^\\d\\w]|$)")) != -1)
         {
             // highlight current nickname
-            highlightColor = KonversationApplication::preferences.getHighlightNickColor().name();
+            highlightColor = Preferences::highlightNickColor();
             m_tabNotification = Konversation::tnfNick;
         }
         else
         {
-            QPtrList<Highlight> highlightList = KonversationApplication::preferences.getHighlightList();
+            QPtrList<Highlight> highlightList = Preferences::highlightList();
             QPtrListIterator<Highlight> it(highlightList);
             Highlight* highlight = it.current();
             bool patternFound = false;
@@ -486,7 +485,7 @@
                 highlightColor = highlight->getColor().name();
                 m_tabNotification = Konversation::tnfHighlight;
 
-                if(KonversationApplication::preferences.getHighlightSoundEnabled())
+                if(Preferences::highlightSoundsEnabled())
                 {
                     konvApp->sound()->play(highlight->getSoundURL());
                 }
@@ -502,10 +501,10 @@
             filteredLine = "<font color=\"" + highlightColor + "\">" + filteredLine + "</font>";
         }
     }
-    else if(doHighlight && (whoSent == ownNick) && KonversationApplication::preferences.getHighlightOwnLines())
+    else if(doHighlight && (whoSent == ownNick) && Preferences::highlightOwnLines())
     {
         // highlight own lines
-        filteredLine = "<font color=\"" + KonversationApplication::preferences.getHighlightOwnLinesColor().name() +
+        filteredLine = "<font color=\"" + Preferences::highlightOwnLinesColor().name() +
             "\">" + filteredLine + "</font>";
     }
 
@@ -520,43 +519,43 @@
 
 void IRCView::append(const QString& nick,const QString& message)
 {
-    QString channelColor = KonversationApplication::preferences.getColor("ChannelMessage");
+    QString channelColor = Preferences::color(Preferences::ChannelMessage).name();
     QString line;
     QString nickLine = "%2";
-    QString color;
+    QString scolor;
     m_tabNotification = Konversation::tnfNormal;
 
     if(nick != m_server->getNickname())
     {
-        bool linkNicks = KonversationApplication::preferences.getUseClickableNicks();
+        bool linkNicks = Preferences::useClickableNicks();
         if(linkNicks)
             nickLine = "<a href=\"#" + nick + "\">%2</a>";
         KonversationApplication::instance()->increaseKarma(nick,1);
     }
 
-    if(KonversationApplication::preferences.getUseBoldNicks())
+    if(Preferences::useBoldNicks())
         nickLine = "<b>"+nickLine+"</b>";
 
-    if(KonversationApplication::preferences.getUseColoredNicks())
+    if(Preferences::useColoredNicks())
     {
 
         if(nick != m_server->getNickname())
-            color = m_server->obtainNickInfo(nick)->getNickColor();
+            scolor = m_server->obtainNickInfo(nick)->getNickColor();
         else
-            color = KonversationApplication::preferences.getNickColorList()[8];
+            scolor =  "#000001";
 
-        nickLine = "<font color=\"" + color + "\">"+nickLine+"</font>";
-
-        if(color == "#000000")
+        if(scolor == "#000000")
         {
-            color = "#000001";                    // HACK Working around QTextBrowser's auto link coloring
+            scolor = "#000001";                    // HACK Working around QTextBrowser's auto link coloring
         }
+
+        nickLine = "<font color=\"" + scolor + "\">"+nickLine+"</font>";
     }
     else
     {
-        if(channelColor  == "000000")
+        if(channelColor  == "#000000")
         {
-            channelColor = "000001";              // HACK Working around QTextBrowser's auto link coloring
+            channelColor = "#000001";              // HACK Working around QTextBrowser's auto link coloring
         }
     }
 
@@ -564,11 +563,11 @@
     {
         line = RLO;
         line += LRE;
-        line += "<p><font color=\"#" + channelColor + "\"><b>&lt;</b>" + nickLine + "<b>&gt;</b> %1" + PDF + " %3</font></p>\n";
+        line += "<p><font color=\"" + channelColor + "\"><b>&lt;</b>" + nickLine + "<b>&gt;</b> %1" + PDF + " %3</font></p>\n";
     }
     else
     {
-        line = "<p><font color=\"#" + channelColor + "\">%1 <b>&lt;</b>" + nickLine + "<b>&gt;</b> %3</font></p>\n";
+        line = "<p><font color=\"" + channelColor + "\">%1 <b>&lt;</b>" + nickLine + "<b>&gt;</b> %3</font></p>\n";
     }
 
     line = line.arg(timeStamp(), nick, filter(message, channelColor, nick, true));
@@ -580,17 +579,17 @@
 
 void IRCView::appendRaw(const QString& message, bool suppressTimestamps, bool self)
 {
-    QString channelColor=KonversationApplication::preferences.getColor("ChannelMessage");
+    QColor channelColor=Preferences::color(Preferences::ChannelMessage);
     QString line;
     m_tabNotification = Konversation::tnfNone;
 
     if(suppressTimestamps)
     {
-        line = QString("<p><font color=\"#" + channelColor + "\">" + message + "</font></p>\n");
+        line = QString("<p><font color=\"" + channelColor.name() + "\">" + message + "</font></p>\n");
     }
     else
     {
-        line = QString("<p>" + timeStamp() + " <font color=\"#" + channelColor + "\">" + message + "</font></p>\n");
+        line = QString("<p>" + timeStamp() + " <font color=\"" + channelColor.name() + "\">" + message + "</font></p>\n");
     }
 
     doAppend(line, true, self);
@@ -598,7 +597,7 @@
 
 void IRCView::appendQuery(const QString& nick,const QString& message)
 {
-    QString queryColor=KonversationApplication::preferences.getColor("QueryMessage");
+    QString queryColor=Preferences::color(Preferences::QueryMessage).name();
     QString line;
     QString nickLine = "%2";
     QString color;
@@ -606,35 +605,35 @@
 
     if(nick != m_server->getNickname())
     {
-        bool linkNicks = KonversationApplication::preferences.getUseClickableNicks();
+        bool linkNicks = Preferences::useClickableNicks();
         if(linkNicks)
             nickLine = "<a href=\"#" + nick + "\">%2</a>";
         KonversationApplication::instance()->increaseKarma(nick,2);
     }
 
-    if(KonversationApplication::preferences.getUseBoldNicks())
+    if(Preferences::useBoldNicks())
         nickLine = "<b>"+nickLine+"</b>";
 
-    if(KonversationApplication::preferences.getUseColoredNicks())
+    if(Preferences::useColoredNicks())
     {
 
         if(nick != m_server->getNickname())
             color = m_server->obtainNickInfo(nick)->getNickColor();
         else
-            color = KonversationApplication::preferences.getNickColorList()[8];
+            color = "#000001";
 
-        nickLine = "<font color=\"" + color + "\">"+nickLine+"</font>";
-
         if(color == "#000000")
         {
             color = "#000001";                    // HACK Working around QTextBrowser's auto link coloring
         }
+
+        nickLine = "<font color=\"" + color + "\">"+nickLine+"</font>";
     }
     else
     {
-        if(queryColor  == "000000")
+        if(queryColor  == "#000000")
         {
-            queryColor = "000001";                // HACK Working around QTextBrowser's auto link coloring
+            queryColor = "#000001";                // HACK Working around QTextBrowser's auto link coloring
         }
     }
 
@@ -642,11 +641,11 @@
     {
         line = RLO;
         line += LRE;
-        line += "<p><font color=\"#" + queryColor + "\"><b>&lt;</b>" + nickLine + "<b>&gt;</b> %1" + PDF + " %3</font></p>\n";
+        line += "<p><font color=\"" + queryColor + "\"><b>&lt;</b>" + nickLine + "<b>&gt;</b> %1" + PDF + " %3</font></p>\n";
     }
     else
     {
-        line = "<p><font color=\"#" + queryColor + "\">%1 <b>&lt;</b>" + nickLine + "<b>&gt;</b> %3</font></p>\n";
+        line = "<p><font color=\"" + queryColor + "\">%1 <b>&lt;</b>" + nickLine + "<b>&gt;</b> %3</font></p>\n";
     }
 
     line = line.arg(timeStamp(), nick, filter(message, queryColor, nick, true));
@@ -658,7 +657,7 @@
 
 void IRCView::appendAction(const QString& nick,const QString& message)
 {
-    QString actionColor=KonversationApplication::preferences.getColor("ActionMessage");
+    QString actionColor=Preferences::color(Preferences::ActionMessage).name();
     QString line;
     QString nickLine = "%2";
     QString color;
@@ -666,22 +665,22 @@
 
     if(nick != m_server->getNickname())
     {
-        bool linkNicks = KonversationApplication::preferences.getUseClickableNicks();
+        bool linkNicks = Preferences::useClickableNicks();
         if(linkNicks)
             nickLine = "<a href=\"#" + nick + "\">%2</a>";
         KonversationApplication::instance()->increaseKarma(nick,1);
     }
 
-    if(KonversationApplication::preferences.getUseBoldNicks())
+    if(Preferences::useBoldNicks())
         nickLine = "<b>"+nickLine+"</b>";
 
-    if(KonversationApplication::preferences.getUseColoredNicks())
+    if(Preferences::useColoredNicks())
     {
 
         if(nick != m_server->getNickname())
             color = m_server->obtainNickInfo(nick)->getNickColor();
         else
-            color = KonversationApplication::preferences.getNickColorList()[8];
+            color = "#000001";
 
         if(color == "#000000")
         {
@@ -692,9 +691,9 @@
     }
     else
     {
-        if(actionColor  == "000000")
+        if(actionColor  == "#000000")
         {
-            actionColor = "000001";               // HACK Working around QTextBrowser's auto link coloring
+            actionColor = "#000001";               // HACK Working around QTextBrowser's auto link coloring
         }
     }
 
@@ -702,11 +701,11 @@
     {
         line = RLO;
         line += LRE;
-        line += "<p><font color=\"#" + actionColor + "\">" + nickLine + " * %1" + PDF + " %3</font></p>\n";
+        line += "<p><font color=\"" + actionColor + "\">" + nickLine + " * %1" + PDF + " %3</font></p>\n";
     }
     else
     {
-        line = "<p><font color=\"#" + actionColor + "\">%1 * " + nickLine + " %3</font></p>\n";
+        line = "<p><font color=\"" + actionColor + "\">%1 * " + nickLine + " %3</font></p>\n";
     }
 
     line = line.arg(timeStamp(), nick, filter(message, actionColor, nick, true));
@@ -718,12 +717,12 @@
 
 void IRCView::appendServerMessage(const QString& type, const QString& message)
 {
-    QString m_serverColor = KonversationApplication::preferences.getColor("ServerMessage");
+    QString serverColor = Preferences::color(Preferences::ServerMessage).name();
     m_tabNotification = Konversation::tnfControl;
 
     // Fixed width font option for MOTD
     QString fixed;
-    if(KonversationApplication::preferences.getFixedMOTD())
+    if(Preferences::fixedMOTD())
     {
         if(type == "MOTD")
             fixed=" face=\"" + KGlobalSettings::fixedFont().family() + "\"";
@@ -735,17 +734,17 @@
     {
         line = RLO;
         line += LRE;
-        line += "<p><font color=\"#" + m_serverColor + "\"" + fixed + "><b>[</b>%2<b>]</b> %1" + PDF + " %3</font></p>\n";
+        line += "<p><font color=\"" + serverColor + "\"" + fixed + "><b>[</b>%2<b>]</b> %1" + PDF + " %3</font></p>\n";
     }
     else
     {
-        line = "<p><font color=\"#" + m_serverColor + "\"" + fixed + ">%1 <b>[</b>%2<b>]</b> %3</font></p>\n";
+        line = "<p><font color=\"" + serverColor + "\"" + fixed + ">%1 <b>[</b>%2<b>]</b> %3</font></p>\n";
     }
 
     if(type != "Notify")
-        line = line.arg(timeStamp(), type, filter(message,m_serverColor));
+        line = line.arg(timeStamp(), type, filter(message,serverColor));
     else
-        line = "<font color=\"#" + m_serverColor + "\">"+line.arg(timeStamp(), type, message)+"</font>";
+        line = "<font color=\"" + serverColor + "\">"+line.arg(timeStamp(), type, message)+"</font>";
 
     emit textToLog(QString("%1\t%2").arg(type).arg(message));
 
@@ -754,7 +753,7 @@
 
 void IRCView::appendCommandMessage(const QString& type,const QString& message, bool important, bool parseURL, bool self)
 {
-    QString commandColor = KonversationApplication::preferences.getColor("CommandMessage");
+    QString commandColor = Preferences::color(Preferences::CommandMessage).name();
     QString line;
     QString prefix="***";
     m_tabNotification = Konversation::tnfControl;
@@ -775,11 +774,11 @@
     {
         line = RLO;
         line += LRE;
-        line += "<p><font color=\"#" + commandColor + "\">%2 %1" + PDF + " %3</font></p>\n";
+        line += "<p><font color=\"" + commandColor + "\">%2 %1" + PDF + " %3</font></p>\n";
     }
     else
     {
-        line = "<p><font color=\"#" + commandColor + "\">%1 %2 %3</font></p>\n";
+        line = "<p><font color=\"" + commandColor + "\">%1 %2 %3</font></p>\n";
     }
 
     line = line.arg(timeStamp(), prefix, filter(message, commandColor, 0, true, parseURL, self));
@@ -794,7 +793,7 @@
     QString time;
     QString message = rawMessage;
     QString nick = firstColumn;
-    QString backlogColor = KonversationApplication::preferences.getColor("BacklogMessage");
+    QString backlogColor = Preferences::color(Preferences::BacklogMessage).name();
     m_tabNotification = Konversation::tnfNone;
 
     time = nick.section(' ', 0, 4);
@@ -813,11 +812,11 @@
 
     if(basicDirection(message) == QChar::DirR)
     {
-        line = "<p><font color=\"#" + backlogColor + "\">%2 %1 %3</font></p>\n";
+        line = "<p><font color=\"" + backlogColor + "\">%2 %1 %3</font></p>\n";
     }
     else
     {
-        line = "<p><font color=\"#" + backlogColor + "\">%1 %2 %3</font></p>\n";
+        line = "<p><font color=\"" + backlogColor + "\">%1 %2 %3</font></p>\n";
     }
 
     line = line.arg(time, nick, filter(message, backlogColor, NULL, false));
@@ -854,7 +853,7 @@
     // Add line to buffer
     QString line(newLine);
 
-    if(important || !KonversationApplication::preferences.getHideUnimportantEvents())
+    if(important || !Preferences::hideUnimportantEvents())
     {
         if(!self)
         {
@@ -879,7 +878,7 @@
         // TODO: make this eat multiple lines at once when the preference is changed so it doesn't take so long
         if (doScroll)
         {
-            int sbm = KonversationApplication::preferences.getScrollbackMax();
+            int sbm = Preferences::scrollbackMax();
             if (sbm)
             {
                 //loop for two reasons: 1) preference changed 2) lines added while scrolled up
@@ -1279,21 +1278,21 @@
 
 QString IRCView::timeStamp()
 {
-    if(KonversationApplication::preferences.getTimestamping())
+    if(Preferences::timestamping())
     {
         QTime time = QTime::currentTime();
-        QString timeColor = KonversationApplication::preferences.getColor("Time");
-        QString timeFormat = KonversationApplication::preferences.getTimestampFormat();
+        QString timeColor = Preferences::color(Preferences::Time).name();
+        QString timeFormat = Preferences::timestampFormat();
         QString timeString;
 
-        if(!KonversationApplication::preferences.getShowDate())
+        if(!Preferences::showDate())
         {
-            timeString = QString("<font color=\"#" + timeColor + "\">[%1]</font> ").arg(time.toString(timeFormat));
+            timeString = QString("<font color=\"" + timeColor + "\">[%1]</font> ").arg(time.toString(timeFormat));
         }
         else
         {
             QDate date = QDate::currentDate();
-            timeString = QString("<font color=\"#" +
+            timeString = QString("<font color=\"" +
                 timeColor + "\">[%1 %2]</font> ").arg(date.toString(Qt::ISODate), time.toString(timeFormat));
         }
 
Index: src/prefspagechatwinappearance.cpp
===================================================================
--- src/prefspagechatwinappearance.cpp	(revision 454905)
+++ src/prefspagechatwinappearance.cpp	(working copy)
@@ -23,13 +23,12 @@
 
 #include "preferences.h"
 
-PrefsPageChatWinAppearance::PrefsPageChatWinAppearance(QWidget* newParent,Preferences* newPreferences)
+PrefsPageChatWinAppearance::PrefsPageChatWinAppearance(QWidget* newParent)
 : ChatWindowAppearance_Config(newParent)
 {
-    preferences = newPreferences;
 
-    kcfg_Timestamping->setChecked(preferences->getTimestamping());
-    kcfg_ShowDate->setChecked(preferences->getShowDate());
+    kcfg_Timestamping->setChecked(Preferences::timestamping());
+    kcfg_ShowDate->setChecked(Preferences::showDate());
 
     kcfg_TimestampFormat->insertItem("hh");
     kcfg_TimestampFormat->insertItem("hh:mm");
@@ -41,22 +40,22 @@
     // find actual timestamp format
     for(int index=0; index < kcfg_TimestampFormat->count(); index++)
     {
-        if(kcfg_TimestampFormat->text(index) == preferences->getTimestampFormat())
+        if(kcfg_TimestampFormat->text(index) == Preferences::timestampFormat())
         {
             kcfg_TimestampFormat->setCurrentItem(index);
         }
     }
 
-    kcfg_ShowTopic->setChecked(preferences->getShowTopic());
-    kcfg_ShowModeButtons->setChecked(preferences->getShowModeButtons());
-    kcfg_ShowQuickButtons->setChecked(preferences->getShowQuickButtons());
-    kcfg_AutoUserhost->setChecked(preferences->getAutoUserhost());
+    kcfg_ShowTopic->setChecked(Preferences::showTopic());
+    kcfg_ShowModeButtons->setChecked(Preferences::showModeButtons());
+    kcfg_ShowQuickButtons->setChecked(Preferences::showQuickButtons());
+    kcfg_AutoUserhost->setChecked(Preferences::autoUserhost());
     kcfg_ShowNicknameBox->setChecked(preferences->showNicknameBox());
 
-    kcfg_ShowBackgroundImage->setChecked(preferences->getShowBackgroundImage());
+    kcfg_ShowBackgroundImage->setChecked(Preferences::showBackgroundImage());
 
     kcfg_BackgroundImage->setCaption(i18n("Select Background Image"));
-    kcfg_BackgroundImage->setURL(preferences->getBackgroundImageName());
+    kcfg_BackgroundImage->setURL(Preferences::backgroundImage());
 
     connect(kcfg_ShowBackgroundImage,SIGNAL(toggled(bool)),this, SLOT(setBackgroundImageConfig(bool)));
     connect(kcfg_BackgroundImage,SIGNAL(textChanged(const QString&)),this,SLOT(saveBackgroundImage(const QString&)));
Index: src/dccrecipientdialog.cpp
===================================================================
--- src/dccrecipientdialog.cpp	(revision 454905)
+++ src/dccrecipientdialog.cpp	(working copy)
@@ -89,7 +89,7 @@
 
 QString DccRecipientDialog::getNickname(QWidget* parent,QStringList list)
 {
-    QSize size;                                   // TODO: get it from KonversationApplication::preferences
+    QSize size;                                   // TODO: get it from Preferences
     DccRecipientDialog dlg(parent,list,size);
     dlg.exec();
 
Index: src/channel.h
===================================================================
--- src/channel.h	(revision 454905)
+++ src/channel.h	(working copy)
@@ -272,7 +272,7 @@
         KLineEdit* limit;
 
         NickListView* nicknameListView;
-        QString abgCache;                         // caches the alternate background color
+        QColor abgCache;                         // caches the alternate background color
         QHBox* commandLineBox;
         QVBox* nickListButtons;
         QComboBox* nicknameCombobox;
Index: src/konvdcop.cpp
===================================================================
--- src/konvdcop.cpp	(revision 454905)
+++ src/konvdcop.cpp	(working copy)
@@ -194,7 +194,7 @@
 
 QString KonvDCOP::getChannelEncoding(const QString& server, const QString& channel)
 {
-    return KonversationApplication::preferences.getChannelEncoding(server,channel);
+    return Preferences::channelEncoding(server,channel);
 }
 
 // Identity stuff
@@ -207,7 +207,7 @@
 QStringList KonvIdentDCOP::listIdentities()
 {
     QStringList identities;
-    QValueList<IdentityPtr> ids = KonversationApplication::preferences.getIdentityList();
+    QValueList<IdentityPtr> ids = Preferences::identityList();
     for(QValueList<IdentityPtr>::iterator it = ids.begin(); it != ids.end(); ++it)
     {
         identities.append((*it)->getName());
@@ -217,7 +217,7 @@
 
 void KonvIdentDCOP::setrealName(const QString &id_name, const QString& name)
 {
-    QValueList<IdentityPtr> ids = KonversationApplication::preferences.getIdentityList();
+    QValueList<IdentityPtr> ids = Preferences::identityList();
 
     for(QValueList<IdentityPtr>::iterator it = ids.begin(); it != ids.end(); ++it)
     {
@@ -232,7 +232,7 @@
 
 QString KonvIdentDCOP::getrealName(const QString &id_name)
 {
-    QValueList<IdentityPtr> ids = KonversationApplication::preferences.getIdentityList();
+    QValueList<IdentityPtr> ids = Preferences::identityList();
 
     for(QValueList<IdentityPtr>::iterator it = ids.begin(); it != ids.end(); ++it)
     {
@@ -247,121 +247,121 @@
 
 void KonvIdentDCOP::setIdent(const QString &/*identity*/, const QString& /*ident*/)
 {
-    //KonversationApplication::preferences.getIdentityByName(identity)->.setIdent(;
+    //Preferences::identityByName(identity)->.setIdent(;
 }
 
 QString KonvIdentDCOP::getIdent(const QString &identity)
 {
-    return KonversationApplication::preferences.getIdentityByName(identity)->getIdent();
+    return Preferences::identityByName(identity)->getIdent();
 }
 
 void KonvIdentDCOP::setNickname(const QString &identity, int index,const QString& nick)
 {
-    const Identity *i = KonversationApplication::preferences.getIdentityByName(identity);
+    const Identity *i = Preferences::identityByName(identity);
     const_cast<Identity *>(i)->setNickname(index, nick);
     static_cast<KonversationApplication *>(kapp)->saveOptions(true);
 }
 
 QString KonvIdentDCOP::getNickname(const QString &identity, int index)
 {
-    return KonversationApplication::preferences.getIdentityByName(identity)->getNickname(index);
+    return Preferences::identityByName(identity)->getNickname(index);
 }
 
 void KonvIdentDCOP::setBot(const QString &identity, const QString& bot)
 {
-    const Identity *i = KonversationApplication::preferences.getIdentityByName(identity);
+    const Identity *i = Preferences::identityByName(identity);
     const_cast<Identity *>(i)->setBot(bot);
     static_cast<KonversationApplication *>(kapp)->saveOptions(true);
 }
 
 QString KonvIdentDCOP::getBot(const QString &identity)
 {
-    return KonversationApplication::preferences.getIdentityByName(identity)->getBot();
+    return Preferences::identityByName(identity)->getBot();
 }
 
 void KonvIdentDCOP::setPassword(const QString &identity, const QString& password)
 {
-    const Identity *i = KonversationApplication::preferences.getIdentityByName(identity);
+    const Identity *i = Preferences::identityByName(identity);
     const_cast<Identity *>(i)->setPassword(password);
     static_cast<KonversationApplication *>(kapp)->saveOptions(true);
 }
 
 QString KonvIdentDCOP::getPassword(const QString &identity)
 {
-    return KonversationApplication::preferences.getIdentityByName(identity)->getPassword();
+    return Preferences::identityByName(identity)->getPassword();
 }
 
 void KonvIdentDCOP::setNicknameList(const QString &identity, const QStringList& newList)
 {
-    const Identity *i = KonversationApplication::preferences.getIdentityByName(identity);
+    const Identity *i = Preferences::identityByName(identity);
     const_cast<Identity *>(i)->setNicknameList(newList);
     static_cast<KonversationApplication *>(kapp)->saveOptions(true);
 }
 
 QStringList KonvIdentDCOP::getNicknameList(const QString &identity)
 {
-    return KonversationApplication::preferences.getIdentityByName(identity)->getNicknameList();
+    return Preferences::identityByName(identity)->getNicknameList();
 }
 
 void KonvIdentDCOP::setPartReason(const QString &identity, const QString& reason)
 {
-    const Identity *i = KonversationApplication::preferences.getIdentityByName(identity);
+    const Identity *i = Preferences::identityByName(identity);
     const_cast<Identity *>(i)->setPartReason(reason);
     static_cast<KonversationApplication *>(kapp)->saveOptions(true);
 }
 
 QString KonvIdentDCOP::getPartReason(const QString &identity)
 {
-    return KonversationApplication::preferences.getIdentityByName(identity)->getPartReason();
+    return Preferences::identityByName(identity)->getPartReason();
 }
 
 void KonvIdentDCOP::setKickReason(const QString &identity, const QString& reason)
 {
-    const Identity *i = KonversationApplication::preferences.getIdentityByName(identity);
+    const Identity *i = Preferences::identityByName(identity);
     const_cast<Identity *>(i)->setKickReason(reason);
     static_cast<KonversationApplication *>(kapp)->saveOptions(true);
 }
 
 QString KonvIdentDCOP::getKickReason(const QString &identity)
 {
-    return KonversationApplication::preferences.getIdentityByName(identity)->getKickReason();
+    return Preferences::identityByName(identity)->getKickReason();
 }
 
 void KonvIdentDCOP::setShowAwayMessage(const QString &identity, bool state)
 {
-    const Identity *i = KonversationApplication::preferences.getIdentityByName(identity);
+    const Identity *i = Preferences::identityByName(identity);
     const_cast<Identity *>(i)->setShowAwayMessage(state);
     static_cast<KonversationApplication *>(kapp)->saveOptions(true);
 }
 
 bool KonvIdentDCOP::getShowAwayMessage(const QString &identity)
 {
-    return KonversationApplication::preferences.getIdentityByName(identity)->getShowAwayMessage();
+    return Preferences::identityByName(identity)->getShowAwayMessage();
 }
 
 void KonvIdentDCOP::setAwayMessage(const QString &identity, const QString& message)
 {
-    const Identity *i = KonversationApplication::preferences.getIdentityByName(identity);
+    const Identity *i = Preferences::identityByName(identity);
     const_cast<Identity *>(i)->setAwayMessage(message);
     static_cast<KonversationApplication *>(kapp)->saveOptions(true);
 }
 
 QString KonvIdentDCOP::getAwayMessage(const QString &identity)
 {
-    const QString f = KonversationApplication::preferences.getIdentityByName(identity)->getAwayMessage();
+    const QString f = Preferences::identityByName(identity)->getAwayMessage();
     return f;
 }
 
 void KonvIdentDCOP::setReturnMessage(const QString &identity, const QString& message)
 {
-    const Identity *i = KonversationApplication::preferences.getIdentityByName(identity);
+    const Identity *i = Preferences::identityByName(identity);
     const_cast<Identity *>(i)->setReturnMessage(message);
     static_cast<KonversationApplication *>(kapp)->saveOptions(true);
 }
 
 QString KonvIdentDCOP::getReturnMessage(const QString &identity)
 {
-    return KonversationApplication::preferences.getIdentityByName(identity)->getReturnMessage();
+    return Preferences::identityByName(identity)->getReturnMessage();
 }
 
 #include "konvdcop.moc"
Index: src/konversation_settings.kcfgc
===================================================================
--- src/konversation_settings.kcfgc	(revision 454905)
+++ src/konversation_settings.kcfgc	(working copy)
@@ -1,9 +0,0 @@
-ClassName=Settings
-File=konversation.kcfg
-GlobalEnums=true
-ItemAccessors=true
-MemberVariables=private
-Mutators=true
-NameSpace=Konversation
-SetUserTexts=true
-Singleton=true
Index: src/prefspagenicklistbehavior.cpp
===================================================================
--- src/prefspagenicklistbehavior.cpp	(revision 454905)
+++ src/prefspagenicklistbehavior.cpp	(working copy)
@@ -22,26 +22,25 @@
 #include "preferences.h"
 #include "valuelistviewitem.h"
 
-PrefsPageNicklistBehavior::PrefsPageNicklistBehavior(QWidget* newParent, Preferences* newPreferences)
+PrefsPageNicklistBehavior::PrefsPageNicklistBehavior(QWidget* newParent)
 : NicklistBehavior_Config(newParent)
 {
-    preferences = newPreferences;
 
-    kcfg_DoubleClickCommand->setText(preferences->getChannelDoubleClickAction());
-    kcfg_SortUserStatus->setChecked(preferences->getSortByStatus());
-    kcfg_SortCaseInsensitive->setChecked(preferences->getSortCaseInsensitive());
+    kcfg_DoubleClickCommand->setText(Preferences::channelDoubleClickAction());
+    kcfg_SortUserStatus->setChecked(Preferences::sortByStatus());
+    kcfg_SortCaseInsensitive->setChecked(Preferences::sortCaseInsensitive());
 
     kcfg_SortOrder->header()->hide();
     kcfg_SortOrder->setSorting(-1);
 
     for(int index = 32; index != 0; index >>= 1)
     {
-        if(preferences->getNoRightsValue() == index) new ValueListViewItem(0, kcfg_SortOrder, i18n("Normal Users"));
-        if(preferences->getVoiceValue() == index)    new ValueListViewItem(1, kcfg_SortOrder, i18n("Voice (+v)"));
-        if(preferences->getHalfopValue() == index)   new ValueListViewItem(2, kcfg_SortOrder, i18n("Halfops (+h)"));
-        if(preferences->getOpValue() == index)       new ValueListViewItem(3, kcfg_SortOrder, i18n("Operators (+o)"));
-        if(preferences->getOwnerValue() == index)    new ValueListViewItem(4, kcfg_SortOrder, i18n("Channel Owners"));
-        if(preferences->getAdminValue() == index)    new ValueListViewItem(5, kcfg_SortOrder, i18n("Channel Admins"));
+        if(Preferences::noRightsValue() == index) new ValueListViewItem(0, kcfg_SortOrder, i18n("Normal Users"));
+        if(Preferences::voiceValue() == index)    new ValueListViewItem(1, kcfg_SortOrder, i18n("Voice (+v)"));
+        if(Preferences::halfopValue() == index)   new ValueListViewItem(2, kcfg_SortOrder, i18n("Halfops (+h)"));
+        if(Preferences::opValue() == index)       new ValueListViewItem(3, kcfg_SortOrder, i18n("Operators (+o)"));
+        if(Preferences::ownerValue() == index)    new ValueListViewItem(4, kcfg_SortOrder, i18n("Channel Owners"));
+        if(Preferences::adminValue() == index)    new ValueListViewItem(5, kcfg_SortOrder, i18n("Channel Admins"));
     }
 
     kcfg_UpButton->setIconSet(SmallIconSet("up"));
@@ -54,9 +53,9 @@
 
 void PrefsPageNicklistBehavior::applyPreferences()
 {
-    preferences->setChannelDoubleClickAction(kcfg_DoubleClickCommand->text());
-    preferences->setSortByStatus(kcfg_SortUserStatus->isChecked());
-    preferences->setSortCaseInsensitive(kcfg_SortCaseInsensitive->isChecked());
+    Preferences::setChannelDoubleClickAction(kcfg_DoubleClickCommand->text());
+    Preferences::setSortByStatus(kcfg_SortUserStatus->isChecked());
+    Preferences::setSortCaseInsensitive(kcfg_SortCaseInsensitive->isChecked());
 
     int flag = 1;
     ValueListViewItem* item = static_cast<ValueListViewItem*>(kcfg_SortOrder->firstChild());
@@ -65,12 +64,12 @@
     {
         int value = item->getValue();
 
-        if(value == 0) preferences->setNoRightsValue(flag);
-        else if(value == 1) preferences->setVoiceValue(flag);
-        else if(value == 2) preferences->setHalfopValue(flag);
-        else if(value == 3) preferences->setOpValue(flag);
-        else if(value == 4) preferences->setOwnerValue(flag);
-        else if(value == 5) preferences->setAdminValue(flag);
+        if(value == 0) Preferences::setNoRightsValue(flag);
+        else if(value == 1) Preferences::setVoiceValue(flag);
+        else if(value == 2) Preferences::setHalfopValue(flag);
+        else if(value == 3) Preferences::setOpValue(flag);
+        else if(value == 4) Preferences::setOwnerValue(flag);
+        else if(value == 5) Preferences::setAdminValue(flag);
 
         flag <<= 1;
         item = static_cast<ValueListViewItem*>(item->nextSibling());
Index: src/preferences.cpp
===================================================================
--- src/preferences.cpp	(revision 454905)
+++ src/preferences.cpp	(working copy)
@@ -1,5 +1,5 @@
 /*
-  This program is free software; you can redistribute it and/or modify
+  This program is free software; you can redistribute it and/or self()->modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.
@@ -14,6 +14,7 @@
 
 #include <ktoolbar.h>
 #include <kstandarddirs.h>
+#include <kstaticdeleter.h>
 #include <kdebug.h>
 #include <kapplication.h>
 #include <kconfig.h>
@@ -32,12 +33,27 @@
 #include "commit.h"
 #include "version.h"
 
+Preferences *Preferences::mSelf = 0;
+static KStaticDeleter<Preferences> staticPreferencesDeleter;
+
+Preferences *Preferences::self()
+{
+  if ( !mSelf ) {
+    staticPreferencesDeleter.setObject( mSelf, new Preferences() );
+    mSelf->readConfig();
+  }
+
+  return mSelf;
+}
+
+
 Preferences::Preferences()
 {
+    mSelf = this;
     // create default identity
-    identity=new Identity();
-    identity->setName(i18n("Default Identity"));
-    addIdentity(identity);
+    mIdentity=new Identity();
+    mIdentity->setName(i18n("Default Identity"));
+    addIdentity(mIdentity);
 
     KUser user(KUser::UseRealUserID);
     setIdent(user.loginName());
@@ -48,7 +64,7 @@
     nickList.append("_" + user.loginName());
     nickList.append(user.loginName() + "_");
     nickList.append("_" + user.loginName() + "_");
-    identity->setNicknameList(nickList);
+    mIdentity->setNicknameList(nickList);
 
     setPartReason("Konversation terminated!");
     setKickReason("User terminated!");
@@ -56,236 +72,52 @@
     setShowAwayMessage(false);
     setAwayMessage("/me is away: %s");
     setUnAwayMessage("/me is back.");
-
-    setNickCompleteSuffixStart(": ");
-    setNickCompleteSuffixMiddle(" ");
-
     Konversation::ServerGroupSettingsPtr serverGroup = new Konversation::ServerGroupSettings;
     serverGroup->setName("Freenode");
     Konversation::ServerSettings server;
     server.setServer("irc.freenode.org");
     serverGroup->addServer(server);
-    serverGroup->setIdentityId(identity->id());
+    serverGroup->setIdentityId(mIdentity->id());
     Konversation::ChannelSettings channel;
     channel.setName("#kde");
     serverGroup->addChannel(channel);
-    m_serverGroupList.append(serverGroup);
+    mServerGroupList.append(serverGroup);
 
-    buttonList.append("Op,/OP %u%n");
-    buttonList.append("DeOp,/DEOP %u%n");
-    buttonList.append("WhoIs,/WHOIS %s,%%u%n");
-    buttonList.append("Version,/CTCP %s,%%u VERSION%n");
-    buttonList.append("Kick,/KICK %u%n");
-    buttonList.append("Ban,/BAN %u%n");
-    buttonList.append("Part,/PART %c Leaving...%n");
-    buttonList.append("Quit,/QUIT Leaving...%n");
-
-    setShowQuickButtons(false);
-    setShowModeButtons(false);
-    setShowServerList(true);
-    setShowTrayIcon(false);
-    setShowBackgroundImage(false);
-    setTrayNotify(false);
-    setSystrayOnly(false);
-    setTrayNotifyOnlyOwnNick(false);
-
-    setUseSpacing(false);
-    setSpacing(2);
-    setMargin(3);
-
-    setUseParagraphSpacing(false);
-    setParagraphSpacing(2);
-
-    setAutoReconnect(true);
-    setReconnectCount(10);
-    setAutoRejoin(true);
-    setAutojoinOnInvite(false);
-
-    setMaximumLagTime(180);
-
-    setFixedMOTD(true);
-    setBeep(false);
-    setRawLog(false);
-
-    setDccPath(user.homeDir()+"/dccrecv");
-    setDccAddPartner(false);
-    setDccCreateFolder(false);
-    setDccMethodToGetOwnIp(1);
-    setDccSpecificOwnIp("0.0.0.0");
-    setDccSpecificSendPorts(false);
-    setDccSendPortsFirst(0);
-    setDccSendPortsLast(0);
-    setDccSpecificChatPorts(false);
-    setDccChatPortsFirst(0);
-    setDccChatPortsLast(0);
-    setDccAutoGet(false);
-    setDccBufferSize(8192);
-    setDccFastSend(true);
-    setDccSendTimeout(180);
-    setIPv4Fallback(false);
-    setIPv4FallbackIface("eth0");
-
-    KStandardDirs kstddir;
-    setLogPath(kstddir.saveLocation("data","konversation/logs"));
-    setScrollbackMax(1000);
-
-    setAutoWhoNicksLimit(200);
-    setAutoWhoContinuousEnabled(true);
-    setAutoWhoContinuousInterval(90);
-
-    setShowRealNames(false);
-
-    setLog(true);
-    setLowerLog(true);
-    setAddHostnameToLog(false);
-    setLogFollowsNick(true);
-
-    setLogfileBufferSize(100);
-    setLogfileReaderSize(QSize(400,200));
-
-    setTabPlacement(Bottom);
-    setBlinkingTabs(false);
-    setCloseButtonsOnTabs(false);
-    setCloseButtonsAlignRight(false);
-    setBringToFront(false);
-    setFocusNewQueries(false);
-
-    setNotifyDelay(20);
-    setUseNotify(true);
-
-    setHighlightNick(true);
-    setHighlightOwnLines(false);
-    setHighlightNickColor("#ff0000");
-    setHighlightOwnLinesColor("#ff0000");
-    setHighlightSoundEnabled(true);
-
-    setUseClickableNicks(true);
-
-    // On Screen Display
-    setOSDUsage(false);
-    setOSDShowOwnNick(false);
-    setOSDShowQuery(false);
-    setOSDShowChannelEvent(false);
-    setOSDTextColor("#ffffff");
-    setOSDDuration(3000);
-    setOSDOffsetX(30);
-    setOSDOffsetY(50);
-    setOSDAlignment(0);                           // Left
-
-    setColorInputFields(true);
-    setBackgroundImageName(QString::null);
-
-    setTimestamping(true);
-    setShowDate(false);
-    setTimestampFormat("hh:mm");
-
-    setCommandChar("/");
-    setChannelDoubleClickAction("/QUERY %u%n");
-    setNotifyDoubleClickAction("/WHOIS %u%n");
-
-    setAdminValue(1);
-    setOwnerValue(2);
-    setOpValue(4);
-    setHalfopValue(8);
-    setVoiceValue(16);
-    setNoRightsValue(32);
-
-    setSortCaseInsensitive(true);
-    setSortByStatus(false);
-
-    setAutoUserhost(false);
-
-    ircColorList.append("#ffffff");
-    ircColorList.append("#000000");
-    ircColorList.append("#000080");
-    ircColorList.append("#008000");
-    ircColorList.append("#ff0000");
-    ircColorList.append("#a52a2a");
-    ircColorList.append("#800080");
-    ircColorList.append("#ff8000");
-    ircColorList.append("#808000");
-    ircColorList.append("#00ff00");
-    ircColorList.append("#008080");
-    ircColorList.append("#00ffff");
-    ircColorList.append("#0000ff");
-    ircColorList.append("#ffc0cb");
-    ircColorList.append("#a0a0a0");
-    ircColorList.append("#c0c0c0");
-    setFilterColors(false);
-
-    nickColorList.append("#E90E7F");
-    nickColorList.append("#8E55E9");
-    nickColorList.append("#B30E0E");
-    nickColorList.append("#18B33C");
-    nickColorList.append("#58ADB3");
-    nickColorList.append("#9E54B3");
-    nickColorList.append("#0FB39A");
-    nickColorList.append("#3176B3");
-    nickColorList.append("#000000");
-    setUseColoredNicks(false);
-    setUseBoldNicks(false);
-    setUseLiteralModes(false);
-
-    setNickCompletionMode(2);
-    setNickCompletionCaseSensitive(false);
-
-    setShowMenuBar(true);
-    setShowTabBarCloseButton(true);
-
-    setHideUnimportantEvents(false);
-    setShowTopic(true);
-    setShowNicknameBox(true);
-
-    setShowRememberLineInAllWindows(false);
-
-    // Web Browser
-    setWebBrowserUseKdeDefault(true);
-    setWebBrowserCmd("mozilla \'%u\'");
-
-    setRedirectToStatusPane(false);
-
-    setOpenWatchedNicksAtStartup(false);
-
-    // Themes
-    setIconTheme("default");
-
-    setDisableNotifyWhileAway(false);
-
-    setWikiUrl("http://en.wikipedia.org/wiki/");
-    setExpandWikiUrl(false);
 }
 
 Preferences::~Preferences()
 {
     clearIdentityList();
-}
 
+    if ( mSelf == this )
+        staticPreferencesDeleter.setObject( mSelf, 0, false );
+}
 const Konversation::ServerGroupList Preferences::serverGroupList()
 {
-    return m_serverGroupList;
+    return self()->mServerGroupList;
 }
 
 void Preferences::setServerGroupList(const Konversation::ServerGroupList& list)
 {
-    m_serverGroupList.clear();
-    m_serverGroupList = list;
+    self()->mServerGroupList.clear();
+    self()->mServerGroupList = list;
 }
 
 void Preferences::addServerGroup(Konversation::ServerGroupSettingsPtr serverGroup)
 {
-    m_serverGroupList.append(serverGroup);
+    self()->mServerGroupList.append(serverGroup);
 }
 
 const Konversation::ServerGroupSettingsPtr Preferences::serverGroupById(int id)
 {
-    if(!m_serverGroupList.count())
+    if(!self()->mServerGroupList.count())
     {
         return 0;
     }
 
     Konversation::ServerGroupList::iterator it;
 
-    for(it = m_serverGroupList.begin(); it != m_serverGroupList.end(); ++it)
+    for(it = self()->mServerGroupList.begin(); it != self()->mServerGroupList.end(); ++it)
     {
         if((*it)->id() == id)
         {
@@ -298,14 +130,14 @@
 
 const Konversation::ServerGroupSettingsPtr Preferences::serverGroupByServer(const QString& server)
 {
-    if(!m_serverGroupList.count())
+    if(!self()->mServerGroupList.count())
     {
         return 0;
     }
 
     Konversation::ServerGroupList::iterator it;
 
-    for(it = m_serverGroupList.begin(); it != m_serverGroupList.end(); ++it)
+    for(it = self()->mServerGroupList.begin(); it != self()->mServerGroupList.end(); ++it)
     {
         for (uint i = 0; i != (*it)->serverList().count(); i++)
         {
@@ -323,7 +155,7 @@
 {
     Konversation::ServerGroupList::iterator it;
 
-    for(it = m_serverGroupList.begin(); it != m_serverGroupList.end(); ++it)
+    for(it = self()->mServerGroupList.begin(); it != self()->mServerGroupList.end(); ++it)
     {
         if((*it)->name().lower() == serverGroup.lower())
         {
@@ -338,7 +170,7 @@
 {
     Konversation::ServerGroupList::iterator it;
 
-    for(it = m_serverGroupList.begin(); it != m_serverGroupList.end(); ++it)
+    for(it = self()->mServerGroupList.begin(); it != self()->mServerGroupList.end(); ++it)
     {
         if((*it)->name().lower() == server.lower())
         {
@@ -351,32 +183,33 @@
 
 void Preferences::removeServerGroup(int id)
 {
-    if(!m_serverGroupList.count())
+    if(!self()->mServerGroupList.count())
     {
         return;
     }
 
     Konversation::ServerGroupList::iterator it;
 
-    for(it = m_serverGroupList.begin(); it != m_serverGroupList.end(); ++it)
+    for(it = self()->mServerGroupList.begin(); it != self()->mServerGroupList.end(); ++it)
     {
         if((*it)->id() == id)
         {
-            m_serverGroupList.remove(it);
+            self()->mServerGroupList.remove(it);
             return;
         }
     }
 }
 
-const QPtrList<Highlight> Preferences::getHighlightList()
+const QPtrList<Highlight> Preferences::highlightList()
 {
-    return highlightList;
+    return self()->mHighlightList;
+	
 }
 
 void Preferences::setHighlightList(QPtrList<Highlight> newList)
 {
-    highlightList.clear();
-    highlightList=newList;
+    self()->mHighlightList.clear();
+    self()->mHighlightList=newList;
 }
 
 void Preferences::addHighlight(const QString& newHighlight,
@@ -385,201 +218,47 @@
 const QString& sound,
 const QString& autoText)
 {
-    highlightList.append(new Highlight(newHighlight,regExp,newColor,KURL(sound),autoText));
+    self()->mHighlightList.append(new Highlight(newHighlight,regExp,newColor,KURL(sound),autoText));
 }
 
-void Preferences::setHighlightSoundEnabled(bool enabled)
-{
-    highlightSoundEnabled = enabled;
-}
-
-const bool Preferences::getHighlightSoundEnabled()
-{
-    return highlightSoundEnabled;
-}
-
-void Preferences::setButtonList(QStringList newList)
-{
-    buttonList.clear();
-    buttonList=newList;
-}
-
 void Preferences::setIgnoreList(QPtrList<Ignore> newList)
 {
-    ignoreList.clear();
-    ignoreList=newList;
+    self()->mIgnoreList.clear();
+    self()->mIgnoreList=newList;
 }
 
 void Preferences::addIgnore(const QString &newIgnore)
 {
     QStringList ignore=QStringList::split(',',newIgnore);
-    ignoreList.append(new Ignore(ignore[0],ignore[1].toInt()));
+    self()->mIgnoreList.append(new Ignore(ignore[0],ignore[1].toInt()));
 }
+void Preferences::setNotifyList(const QMap<QString, QStringList> &newList)
+{ self()->mNotifyList=newList; }
 
-// Accessor methods
+const QMap<QString, QStringList> Preferences::notifyList() { return self()->mNotifyList; }
 
-void Preferences::setLog(bool state) { log=state; }
-const bool Preferences::getLog() { return log; }
-void Preferences::setLowerLog(bool state) { lowerLog=state; }
-const bool Preferences::getLowerLog() { return lowerLog; }
-void Preferences::setLogFollowsNick(bool state) { logFollowsNick=state; }
-void Preferences::setAddHostnameToLog(bool state) {addHostnameToLog=state; }
-const bool Preferences::getAddHostnameToLog() { return addHostnameToLog; }
-const bool Preferences::getLogFollowsNick() { return logFollowsNick; }
-void Preferences::setLogPath(const QString &path) { logPath=path; }
-const QString Preferences::getLogPath() { return logPath; }
-
-void Preferences::setScrollbackMax(int max) { scrollbackMax=max; }
-const int Preferences::getScrollbackMax() { return scrollbackMax; }
-
-void Preferences::setAutoWhoNicksLimit(int limit) { autoWhoNicksLimit=limit; }
-const int Preferences::getAutoWhoNicksLimit() { return autoWhoNicksLimit; }
-void Preferences::setAutoWhoContinuousEnabled(bool state)
+const QStringList Preferences::notifyListByGroup(const QString& groupName)
 {
-    autoWhoContinuousEnabled=state;
-    emit autoContinuousWhoChanged();
-}
-
-const bool Preferences::getAutoWhoContinuousEnabled() { return autoWhoContinuousEnabled; }
-void Preferences::setAutoWhoContinuousInterval(int interval) { autoWhoContinuousInterval=interval; }
-const int Preferences::getAutoWhoContinuousInterval() { return autoWhoContinuousInterval; }
-
-const bool Preferences::getShowRealNames() { return showRealNames;}
-void Preferences::setShowRealNames(bool show) { showRealNames=show; }
-
-void Preferences::setDccAddPartner(bool state) { dccAddPartner=state; }
-const bool Preferences::getDccAddPartner() { return dccAddPartner; }
-
-void Preferences::setDccCreateFolder(bool state) { dccCreateFolder=state; }
-const bool Preferences::getDccCreateFolder() { return dccCreateFolder; }
-
-void Preferences::setDccBufferSize(unsigned long size) { dccBufferSize=size; }
-const unsigned long Preferences::getDccBufferSize() { return dccBufferSize; }
-
-void Preferences::setDccMethodToGetOwnIp(int methodId) { dccMethodToGetOwnIp=methodId; }
-const int Preferences::getDccMethodToGetOwnIp() { return dccMethodToGetOwnIp; }
-
-void Preferences::setDccSpecificOwnIp(const QString& ip) { dccSpecificOwnIp = ip; }
-const QString Preferences::getDccSpecificOwnIp() { return dccSpecificOwnIp; }
-
-void Preferences::setDccSpecificSendPorts(bool state) { dccSpecificSendPorts=state; }
-const bool Preferences::getDccSpecificSendPorts() { return dccSpecificSendPorts; }
-
-void Preferences::setDccSendPortsFirst(unsigned long port)
-{
-    dccSendPortsFirst=port;
-    if(getDccSendPortsLast() < port)
-        setDccSendPortsLast(port);
-}
-
-const unsigned int Preferences::getDccSendPortsFirst() { return dccSendPortsFirst; }
-
-void Preferences::setDccSendPortsLast(unsigned long port)
-{
-    dccSendPortsLast=port;
-    if(port < getDccSendPortsFirst())
-        setDccSendPortsFirst(port);
-}
-
-const unsigned int Preferences::getDccSendPortsLast() { return dccSendPortsLast; }
-
-void Preferences::setDccSpecificChatPorts(bool state) { dccSpecificChatPorts=state; }
-const bool Preferences::getDccSpecificChatPorts() { return dccSpecificChatPorts; }
-
-void Preferences::setDccChatPortsFirst(unsigned long port)
-{
-    dccChatPortsFirst=port;
-    if(getDccChatPortsLast() < port)
-        setDccChatPortsLast(port);
-}
-
-const unsigned int Preferences::getDccChatPortsFirst() { return dccChatPortsFirst; }
-
-void Preferences::setDccChatPortsLast(unsigned long port)
-{
-    dccChatPortsLast=port;
-    if(port < getDccChatPortsFirst())
-        setDccChatPortsFirst(port);
-}
-
-const unsigned int Preferences::getDccChatPortsLast() { return dccChatPortsLast; }
-
-void Preferences::setDccAutoGet(bool state) { dccAutoGet=state; }
-const bool Preferences::getDccAutoGet() { return dccAutoGet; }
-
-void Preferences::setDccAutoResume(bool state) { dccAutoResume=state; }
-const bool Preferences::getDccAutoResume() { return dccAutoResume; }
-
-void Preferences::setDccPath(const QString &path) { dccPath=path; }
-const QString Preferences::getDccPath() { return dccPath; }
-
-void Preferences::setDccFastSend(bool state) { dccFastSend=state; }
-const bool Preferences::getDccFastSend() { return dccFastSend; }
-
-void Preferences::setDccSendTimeout(int sec) { dccSendTimeout=sec; }
-const int Preferences::getDccSendTimeout() { return dccSendTimeout; }
-
-void Preferences::setIPv4Fallback(bool fallback) { ipv4Fallback=fallback;}
-bool Preferences::getIPv4Fallback() { return ipv4Fallback; }
-
-void Preferences::setIPv4FallbackIface(const QString& interface) { ipv4Interface=interface; }
-const QString& Preferences::getIPv4FallbackIface() { return ipv4Interface; }
-
-void Preferences::setFixedMOTD(bool state) { fixedMOTD=state; }
-const bool Preferences::getFixedMOTD() { return fixedMOTD; }
-
-void Preferences::setAutoReconnect(bool state) { autoReconnect=state; }
-const bool Preferences::getAutoReconnect() { return autoReconnect; }
-
-void Preferences::setReconnectCount (unsigned int count) { reconnectCounter=count; }
-const unsigned int Preferences::getReconnectCount() { return reconnectCounter; }
-
-void Preferences::setAutoRejoin(bool state) { autoRejoin=state; }
-const bool Preferences::getAutoRejoin() { return autoRejoin; }
-
-void Preferences::setAutojoinOnInvite(bool state) { autojoinOnInvite=state; }
-const bool Preferences::getAutojoinOnInvite()           { return autojoinOnInvite; }
-
-void Preferences::setBeep(bool state) { beep=state; }
-const bool Preferences::getBeep() { return beep; }
-
-void Preferences::setRawLog(bool state) { rawLog=state; }
-const bool Preferences::getRawLog() { return rawLog; }
-
-void Preferences::setCustomVersionReplyEnabled(bool state) { customVersionReplyEnabled=state; }
-const bool Preferences::getCustomVersionReplyEnabled() { return customVersionReplyEnabled; }
-void Preferences::setCustomVersionReply(const QString &reply) { customVersionReply=reply; }
-QString Preferences::getCustomVersionReply() { return customVersionReply; }
-
-const int Preferences::getNotifyDelay() { return notifyDelay; }
-void Preferences::setNotifyDelay(int delay) { notifyDelay=delay; }
-const bool Preferences::getUseNotify() { return useNotify; }
-void Preferences::setUseNotify(bool use) { useNotify=use; }
-void Preferences::setNotifyList(const QMap<QString, QStringList> &newList)
-{ notifyList=newList; }
-const QMap<QString, QStringList> Preferences::getNotifyList() { return notifyList; }
-const QStringList Preferences::getNotifyListByGroup(const QString& groupName)
-{
-    if (notifyList.find(groupName) != notifyList.end())
-        return notifyList[groupName];
+    if (self()->mNotifyList.find(groupName) != self()->mNotifyList.end())
+        return self()->mNotifyList[groupName];
     else
         return QStringList();
 }
 
-const QString Preferences::getNotifyStringByGroup(const QString& groupName)
+const QString Preferences::notifyStringByGroup(const QString& groupName)
 {
-    return getNotifyListByGroup(groupName).join(" ");
+    return notifyListByGroup(groupName).join(" ");
 }
 
 const bool Preferences::addNotify(const QString& groupName, const QString& newPattern)
 {
     // don't add duplicates
     if (groupName.isEmpty() || newPattern.isEmpty()) return false;
-    if (!notifyList[groupName].contains(newPattern))
+    if (!self()->mNotifyList[groupName].contains(newPattern))
     {
-        QStringList nicknameList = notifyList[groupName];
+        QStringList nicknameList = self()->mNotifyList[groupName];
         nicknameList.append(newPattern);
-        notifyList[groupName] = nicknameList;
+        self()->mNotifyList[groupName] = nicknameList;
         return true;
     }
     return false;
@@ -587,41 +266,39 @@
 
 const bool Preferences::removeNotify(const QString& groupName, const QString& pattern)
 {
-    if (notifyList.find(groupName) != notifyList.end())
+    if (self()->mNotifyList.find(groupName) != self()->mNotifyList.end())
     {
-        QStringList nicknameList = notifyList[groupName];
+        QStringList nicknameList = self()->mNotifyList[groupName];
         nicknameList.remove(pattern);
         if (nicknameList.isEmpty())
-            notifyList.remove(groupName);
+            self()->mNotifyList.remove(groupName);
         else
-            notifyList[groupName] = nicknameList;
+            self()->mNotifyList[groupName] = nicknameList;
         return true;
-    } else
+    }
     return false;
 }
 
-const QStringList Preferences::getButtonList() { return buttonList; }
-
 // Default identity functions
-void Preferences::addIdentity(IdentityPtr identity) { identityList.append(identity); }
-void Preferences::removeIdentity(IdentityPtr identity) { identityList.remove(identity); }
+void Preferences::addIdentity(IdentityPtr identity) { self()->mIdentityList.append(identity); }
+void Preferences::removeIdentity(IdentityPtr identity) { self()->mIdentityList.remove(identity); }
 
 void Preferences::clearIdentityList()
 {
-    identityList.clear();
+    self()->mIdentityList.clear();
 }
 
-const QValueList<IdentityPtr> Preferences::getIdentityList() { return identityList; }
+const QValueList<IdentityPtr> Preferences::identityList() { return self()->mIdentityList; }
 
 void Preferences::setIdentityList(const QValueList<IdentityPtr>& list)
 {
-    identityList.clear();
-    identityList = list;
+    self()->mIdentityList.clear();
+    self()->mIdentityList = list;
 }
 
-const IdentityPtr Preferences::getIdentityByName(const QString& name)
+const IdentityPtr Preferences::identityByName(const QString& name)
 {
-    QValueList<IdentityPtr> identities = getIdentityList();
+    QValueList<IdentityPtr> identities = identityList();
     QValueList<IdentityPtr>::iterator it = identities.begin();
 
     while(it != identities.end())
@@ -634,14 +311,14 @@
         ++it;
     }
 
-    // no matching identity found, return default identity
+    // no self()->matching identity found, return default identity
     return identities.first();
 }
 
-const IdentityPtr Preferences::getIdentityById(int id)
+const IdentityPtr Preferences::identityById(int id)
 {
-    QValueList<IdentityPtr> identityList = getIdentityList();
-    for(QValueList<IdentityPtr>::iterator it = identityList.begin(); it != identityList.end(); ++it)
+    QValueList<IdentityPtr> identList = identityList();
+    for(QValueList<IdentityPtr>::iterator it = identList.begin(); it != identList.end(); ++it)
     {
         if((*it)->id() == id)
         {
@@ -649,308 +326,69 @@
         }
     }
 
-    return identityList.first();
+    return identList.first();
 }
 
-const QString Preferences::getRealName() { return identityList[0]->getRealName(); }
-void Preferences::setRealName(const QString &name) { identityList[0]->setRealName(name); }
+const QString Preferences::realName() { return self()->mIdentityList[0]->getRealName(); }
+void Preferences::setRealName(const QString &name) { self()->mIdentityList[0]->setRealName(name); }
 
-const QString Preferences::getIdent() { return identityList[0]->getIdent(); }
-void Preferences::setIdent(const QString &ident) { identityList[0]->setIdent(ident); }
+const QString Preferences::ident() { return self()->mIdentityList[0]->getIdent(); }
+void Preferences::setIdent(const QString &ident) { self()->mIdentityList[0]->setIdent(ident); }
 
-const QString Preferences::getPartReason() { return identityList[0]->getPartReason(); }
-void Preferences::setPartReason(const QString &newReason) { identityList[0]->setPartReason(newReason); }
+const QString Preferences::partReason() { return self()->mIdentityList[0]->getPartReason(); }
+void Preferences::setPartReason(const QString &newReason) { self()->mIdentityList[0]->setPartReason(newReason); }
 
-const QString Preferences::getKickReason() { return identityList[0]->getKickReason(); }
-void Preferences::setKickReason(const QString &newReason) { identityList[0]->setKickReason(newReason); }
+const QString Preferences::kickReason() { return self()->mIdentityList[0]->getKickReason(); }
+void Preferences::setKickReason(const QString &newReason) { self()->mIdentityList[0]->setKickReason(newReason); }
 
-const bool Preferences::getShowAwayMessage() { return identityList[0]->getShowAwayMessage(); }
-void Preferences::setShowAwayMessage(bool state) { identityList[0]->setShowAwayMessage(state); }
+const bool Preferences::showAwayMessage() { return self()->mIdentityList[0]->getShowAwayMessage(); }
+void Preferences::setShowAwayMessage(bool state) { self()->mIdentityList[0]->setShowAwayMessage(state); }
 
-const QString Preferences::getAwayMessage() { return identityList[0]->getAwayMessage(); }
-void Preferences::setAwayMessage(const QString &newMessage) { identityList[0]->setAwayMessage(newMessage); }
-const QString Preferences::getUnAwayMessage() { return identityList[0]->getReturnMessage(); }
-void Preferences::setUnAwayMessage(const QString &newMessage) { identityList[0]->setReturnMessage(newMessage); }
+const QString Preferences::awayMessage() { return self()->mIdentityList[0]->getAwayMessage(); }
+void Preferences::setAwayMessage(const QString &newMessage) { self()->mIdentityList[0]->setAwayMessage(newMessage); }
+const QString Preferences::unAwayMessage() { return self()->mIdentityList[0]->getReturnMessage(); }
+void Preferences::setUnAwayMessage(const QString &newMessage) { self()->mIdentityList[0]->setReturnMessage(newMessage); }
 
-void Preferences::clearIgnoreList() { ignoreList.clear(); }
-const QPtrList<Ignore> Preferences::getIgnoreList() { return ignoreList; }
+void Preferences::clearIgnoreList() { self()->mIgnoreList.clear(); }
+const QPtrList<Ignore> Preferences::ignoreList() { return self()->mIgnoreList; }
 
-const QString Preferences::getNickname(int index) { return identityList[0]->getNickname(index); }
-const QStringList Preferences::getNicknameList() { return identityList[0]->getNicknameList(); }
-void Preferences::setNickname(int index,const QString &newName) { identityList[0]->setNickname(index,newName); }
-void Preferences::setNicknameList(const QStringList &newList) { identityList[0]->setNicknameList(newList); }
+const QString Preferences::nickname(int index) { return self()->mIdentityList[0]->getNickname(index); }
+const QStringList Preferences::nicknameList() { return self()->mIdentityList[0]->getNicknameList(); }
+void Preferences::setNickname(int index,const QString &newName) { self()->mIdentityList[0]->setNickname(index,newName); }
+void Preferences::setNicknameList(const QStringList &newList) { self()->mIdentityList[0]->setNicknameList(newList); }
 
-void Preferences::setTabPlacement(TabPlacement where) { tabPlacement=where; }
-const Preferences::TabPlacement Preferences::getTabPlacement() { return tabPlacement; }
-
-void Preferences::setBlinkingTabs(bool blink) { blinkingTabs=blink; }
-const bool Preferences::getBlinkingTabs() { return blinkingTabs; }
-
-void Preferences::setCloseButtonsOnTabs(bool state) { closeButtonsOnTabs=state; }
-const bool Preferences::getCloseButtonsOnTabs() { return closeButtonsOnTabs; }
-
-void Preferences::setCloseButtonsAlignRight(bool state) { closeButtonsAlignRight=state; }
-const bool Preferences::getCloseButtonsAlignRight() { return closeButtonsAlignRight; }
-
-void Preferences::setBringToFront(bool state) { bringToFront=state; }
-const bool Preferences::getBringToFront() { return bringToFront; }
-
-void Preferences::setCommandChar(const QString &newCommandChar) { commandChar=newCommandChar; }
-const QString Preferences::getCommandChar() { return commandChar; }
-
-// TODO: Make this a little simpler (use an array and enum)
-//       get/set message font colors
-
-const QString Preferences::getColor(const QString& name)
-{
-    KConfig* config=KApplication::kApplication()->config();
-
-    config->setGroup("Message Text Colors");
-    QString color=config->readEntry(name,getDefaultColor(name));
-
-    if(color.isEmpty()) color="000000";
-
-    return color;
-}
-
-void Preferences::setColor(const QString& name,const QString& color)
-{
-    // if we get called from the KonversationApplication constructor kApplication is NULL
-    KApplication* app=KApplication::kApplication();
-    if(app)
-    {
-        KConfig* config=app->config();
-
-        config->setGroup("Message Text Colors");
-        config->writeEntry(name,color);
-        config->sync();
-    }
-}
-
-const QString Preferences::getDefaultColor(const QString& name)
-{
-    if(name=="ChannelMessage")      return "000000";
-    if(name=="QueryMessage")        return "0000ff";
-    if(name=="ServerMessage")       return "91640a";
-    if(name=="ActionMessage")       return "0000ff";
-    if(name=="BacklogMessage")      return "aaaaaa";
-    if(name=="LinkMessage")         return "0000ff";
-    if(name=="CommandMessage")      return "960096";
-    if(name=="Time")                return "709070";
-    if(name=="TextViewBackground")  return "ffffff";
-    if(name=="AlternateBackground") return "ffffff";
-
-    return QString::null;
-}
-
-void Preferences::setColorInputFields(bool state) { colorInputFields=state; }
-const bool Preferences::getColorInputFields()           { return colorInputFields; }
-
-void Preferences::setBackgroundImageName(const QString& name) { backgroundImage=name; }
-const QString& Preferences::getBackgroundImageName() { return backgroundImage; }
-
-const QString Preferences::getNickCompleteSuffixStart() {return nickCompleteSuffixStart; }
-const QString Preferences::getNickCompleteSuffixMiddle() {return nickCompleteSuffixMiddle; }
-
-void Preferences::setNickCompleteSuffixStart(const QString &suffix) { nickCompleteSuffixStart=suffix; }
-void Preferences::setNickCompleteSuffixMiddle(const QString &suffix) { nickCompleteSuffixMiddle=suffix; }
-
-const int Preferences::getLogfileBufferSize()             { return logfileBufferSize; }
-void Preferences::setLogfileBufferSize(int newSize) { logfileBufferSize=newSize; }
-
-// Geometry functions
-const QSize Preferences::getNicksOnlineSize()        { return nicksOnlineSize; }
-const QSize Preferences::getNicknameSize()           { return nicknameSize; }
-const QSize Preferences::getLogfileReaderSize()      { return logfileReaderSize; }
-const QSize Preferences::getMultilineEditSize()      { return multilineEditSize; }
-
-void Preferences::setNicksOnlineSize(const QSize &newSize)     { nicksOnlineSize=newSize; }
-void Preferences::setNicknameSize(const QSize &newSize)        { nicknameSize=newSize; }
-void Preferences::setLogfileReaderSize(const QSize &newSize)   { logfileReaderSize=newSize; }
-void Preferences::setMultilineEditSize(const QSize &newSize)   { multilineEditSize=newSize; }
-
-void Preferences::setHighlightNick(bool state) { highlightNick=state; }
-const bool Preferences::getHighlightNick() { return highlightNick; }
-
-void Preferences::setHighlightNickColor(const QString &newColor) { highlightNickColor.setNamedColor(newColor); }
-const QColor Preferences::getHighlightNickColor() { return highlightNickColor; }
-
-void Preferences::setHighlightOwnLines(bool state) { highlightOwnLines=state; }
-const bool Preferences::getHighlightOwnLines() { return highlightOwnLines; }
-
-void Preferences::setHighlightOwnLinesColor(const QString &newColor) { highlightOwnLinesColor.setNamedColor(newColor); }
-const QColor Preferences::getHighlightOwnLinesColor() { return highlightOwnLinesColor; }
-
-void Preferences::setUseClickableNicks(bool state) { clickableNicks=state; }
-const bool Preferences::getUseClickableNicks() { return clickableNicks;}
-
-// On Screen Display
-void Preferences::setOSDUsage(bool state) { OSDUsage=state; }
-const bool Preferences::getOSDUsage() { return OSDUsage; }
-
-void Preferences::setOSDShowOwnNick(bool state) { OSDShowOwnNick=state; }
-const bool Preferences::getOSDShowOwnNick() { return OSDShowOwnNick; }
-
-void Preferences::setOSDShowChannel(bool state) { OSDShowChannel=state; }
-const bool Preferences::getOSDShowChannel() { return OSDShowChannel; }
-
-void Preferences::setOSDShowQuery(bool state) { OSDShowQuery=state; }
-const bool Preferences::getOSDShowQuery() { return OSDShowQuery; }
-
-void Preferences::setOSDShowChannelEvent(bool state) { OSDShowChannelEvent=state; }
-const bool Preferences::getOSDShowChannelEvent() { return OSDShowChannelEvent; }
-
-const QFont Preferences::getOSDFont() { return osdFont; }
-void Preferences::setOSDFont(const QFont &newFont) { osdFont=newFont; }
-void Preferences::setOSDFontRaw(const QString &rawFont) { osdFont.fromString(rawFont); }
-
-/*void Preferences::setOSDColor(const QString &newColor) { osdColor.setNamedColor(newColor); }
-QColor Preferences::getOSDColor() { return osdColor; }*/
-
-void Preferences::setOSDUseCustomColors(bool state) { useOSDCustomColors = state; }
-const bool Preferences::getOSDUseCustomColors() { return useOSDCustomColors; }
-
-void Preferences::setOSDTextColor(const QString& newColor) { osdTextColor.setNamedColor(newColor); }
-const QColor Preferences::getOSDTextColor() { return osdTextColor; }
-
-void Preferences::setOSDBackgroundColor(const QString& newColor) { osdBackgroundColor.setNamedColor(newColor); }
-const QColor Preferences::getOSDBackgroundColor() { return osdBackgroundColor; }
-
-void Preferences::setOSDDuration(int ms) { OSDDuration = ms; }
-const int Preferences::getOSDDuration() { return OSDDuration; }
-
-void Preferences::setOSDScreen(uint screen) { OSDScreen = screen; }
-const uint Preferences::getOSDScreen() { return OSDScreen; }
-
-void Preferences::setOSDDrawShadow(bool state) { OSDDrawShadow = state; }
-const bool Preferences::getOSDDrawShadow() { return OSDDrawShadow; }
-
-void Preferences::setOSDOffsetX(int offset) { OSDOffsetX = offset; }
-const int Preferences::getOSDOffsetX() { return OSDOffsetX; }
-
-void Preferences::setOSDOffsetY(int offset) { OSDOffsetY = offset; }
-const int Preferences::getOSDOffsetY() { return OSDOffsetY; }
-
-void Preferences::setOSDAlignment(int alignment) { OSDAlignment = alignment; }
-const int Preferences::getOSDAlignment() { return OSDAlignment; }
-
-const QFont Preferences::getTextFont() { return textFont; }
-const QFont Preferences::getListFont() { return listFont; }
-void Preferences::setTextFont(const QFont &newFont) { textFont=newFont; }
-void Preferences::setListFont(const QFont &newFont) { listFont=newFont; }
-void Preferences::setTextFontRaw(const QString &rawFont) { textFont.fromString(rawFont); }
-void Preferences::setListFontRaw(const QString &rawFont) { listFont.fromString(rawFont); }
-
-void Preferences::setTimestamping(bool state) { timestamping=state; }
-const bool Preferences::getTimestamping() { return timestamping; }
-void Preferences::setShowDate(bool state) { showDate=state; }
-const bool Preferences::getShowDate() { return showDate; }
-void Preferences::setTimestampFormat(const QString& newFormat) { timestampFormat=newFormat; }
-const QString Preferences::getTimestampFormat() { return timestampFormat; }
-
-void Preferences::setShowQuickButtons(bool state) { showQuickButtons=state; }
-const bool Preferences::getShowQuickButtons() { return showQuickButtons; }
-
-void Preferences::setShowModeButtons(bool state) { showModeButtons=state; }
-const bool Preferences::getShowModeButtons() { return showModeButtons; }
-
-void Preferences::setShowServerList(bool state) { showServerList=state; }
-const bool Preferences::getShowServerList() { return showServerList; }
-
-void Preferences::setShowBackgroundImage(bool state) { showBackgroundImage=state; }
-const bool Preferences::getShowBackgroundImage() { return showBackgroundImage; }
-
 void Preferences::setShowTrayIcon(bool state)
 {
-    showTrayIcon=state;
-    emit updateTrayIcon();
+    PreferencesBase::setShowTrayIcon(state);
+    emit self()->updateTrayIcon();
 }
 
-const bool Preferences::getShowTrayIcon() { return showTrayIcon; }
 
 void Preferences::setSystrayOnly(bool state)
 {
-    systrayOnly=state;
-    emit updateTrayIcon();
+    PreferencesBase::setSystrayOnly(state);
+    emit self()->updateTrayIcon();
 }
 
-const bool Preferences::getSystrayOnly() { return systrayOnly; }
 
 void Preferences::setTrayNotify(bool state)
 {
-    trayNotify = state;
-    emit updateTrayIcon();
+    PreferencesBase::setTrayNotify(state);
+    emit self()->updateTrayIcon();
 }
 
-const bool Preferences::getTrayNotify() const { return trayNotify; }
 
-void Preferences::setTrayNotifyOnlyOwnNick(bool onlyOwnNick)
-{
-    m_trayNotifyOnlyOwnNick = onlyOwnNick;
-}
-
-bool Preferences::trayNotifyOnlyOwnNick() const
-{
-    return m_trayNotifyOnlyOwnNick;
-}
-
-void Preferences::setChannelSplitterSizes(QValueList<int> sizes) { channelSplitter=sizes; }
-const QValueList<int> Preferences::channelSplitterSizes() { return channelSplitter; }
-
-void Preferences::setTopicSplitterSizes(QValueList<int> sizes) { m_topicSplitterSizes=sizes; }
-const QValueList<int> Preferences::topicSplitterSizes() { return m_topicSplitterSizes; }
-
-void Preferences::setChannelDoubleClickAction(const QString &action) { channelDoubleClickAction=action; }
-const QString Preferences::getChannelDoubleClickAction() { return channelDoubleClickAction; }
-
-void Preferences::setNotifyDoubleClickAction(const QString &action) { notifyDoubleClickAction=action; }
-const QString Preferences::getNotifyDoubleClickAction() { return notifyDoubleClickAction; }
-
-void Preferences::setUseSpacing(bool state) { useSpacing=state; }
-const bool Preferences::getUseSpacing() { return useSpacing; }
-void Preferences::setSpacing(int newSpacing) { spacing=newSpacing; }
-const int Preferences::getSpacing() { return spacing; }
-void Preferences::setMargin(int newMargin) { margin=newMargin; }
-const int Preferences::getMargin() { return margin; }
-
-void Preferences::setUseParagraphSpacing(bool state) { useParagraphSpacing=state; }
-const bool Preferences::getUseParagraphSpacing() { return useParagraphSpacing; }
-void Preferences::setParagraphSpacing(int newSpacing) { paragraphSpacing=newSpacing; }
-const int Preferences::getParagraphSpacing() { return paragraphSpacing; }
-
-// sorting stuff
-void Preferences::setAdminValue(int value)           { adminValue=value; }
-void Preferences::setOwnerValue(int value)           { ownerValue=value; }
-void Preferences::setOpValue(int value)              { opValue=value; }
-void Preferences::setHalfopValue(int value)          { halfopValue=value; }
-void Preferences::setVoiceValue(int value)           { voiceValue=value; }
-void Preferences::setNoRightsValue(int value)        { noRightsValue=value; }
-
-const int Preferences::getAdminValue()                     { return adminValue; }
-const int Preferences::getOwnerValue()                     { return ownerValue; }
-const int Preferences::getOpValue()                        { return opValue; }
-const int Preferences::getHalfopValue()                    { return halfopValue; }
-const int Preferences::getVoiceValue()                     { return voiceValue; }
-const int Preferences::getNoRightsValue()                  { return noRightsValue; }
-
-void Preferences::setSortCaseInsensitive(bool state) { sortCaseInsensitive=state; }
-void Preferences::setSortByStatus(bool state)        { sortByStatus=state; }
-
-const bool Preferences::getSortCaseInsensitive()           { return sortCaseInsensitive; }
-const bool Preferences::getSortByStatus()                  { return sortByStatus; }
-
-const bool Preferences::getAutoUserhost()                  { return autoUserhost; }
 void Preferences::setAutoUserhost(bool state)
 {
-    autoUserhost=state;
-    emit autoUserhostChanged(state);
+    PreferencesBase::setAutoUserhost(state);
+    emit self()->autoUserhostChanged(state);
 }
 
-const bool Preferences::getDialogFlag(const QString& flagName)
+const bool Preferences::dialogFlag(const QString& flagName)
 {
     KConfig* config=KApplication::kApplication()->config();
 
-    config->setGroup("Notification Messages");
+    config->setGroup("Notification self()->Messages");
 
     if( !config->readEntry(flagName).isEmpty() )
         return false;
@@ -962,7 +400,7 @@
 {
     KConfig* config=KApplication::kApplication()->config();
 
-    config->setGroup("Notification Messages");
+    config->setGroup("Notification self()->Messages");
 
     if(state)
         config->deleteEntry(flagName);
@@ -975,111 +413,36 @@
     config->sync();
 }
 
-void Preferences::setMaximumLagTime(int lag) { maximumLag=lag; }
-const int Preferences::getMaximumLagTime()         { return maximumLag; }
 
-void Preferences::setIRCColorList(const QStringList &cl) { ircColorList=cl; }
-const QStringList Preferences::getIRCColorList()        { return ircColorList; }
-
-void Preferences::setAliasList(const QStringList &newList) { aliasList=newList; }
-const QStringList Preferences::getAliasList()             { return aliasList; }
-
-const int Preferences::getNickCompletionMode() { return nickCompletionMode; }
-void Preferences::setNickCompletionMode(int mode) { nickCompletionMode = mode; }
-const QString Preferences::getPrefixCharacter() { return prefixCharacter; }
-void  Preferences::setPrefixCharacter(const QString &prefix) { prefixCharacter = prefix; }
-const bool Preferences::nickCompletionCaseSensitive() const { return m_nickCompletionCaseSensitive; }
-void Preferences::setNickCompletionCaseSensitive(bool caseSensitive) { m_nickCompletionCaseSensitive = caseSensitive; }
-
-const bool Preferences::getShowMenuBar() { return showMenuBar; }
-void Preferences::setShowMenuBar(bool s) { showMenuBar = s; }
-
-const bool Preferences::getShowTabBarCloseButton() { return showTabBarCloseButton; }
-void Preferences::setShowTabBarCloseButton(bool s) { showTabBarCloseButton = s; }
-
-const bool Preferences::getShowTopic() { return showTopic; }
-void Preferences::setShowTopic(bool s) { showTopic = s; }
-
-const bool Preferences::getShowRememberLineInAllWindows() { return showRememberLineInAllWindows; }
-void Preferences::setShowRememberLineInAllWindows(bool s) { showRememberLineInAllWindows = s; }
-
-const bool Preferences::getFocusNewQueries() { return focusNewQueries; }
-void Preferences::setFocusNewQueries(bool s) { focusNewQueries = s; }
-
-const bool Preferences::getHideUnimportantEvents()           { return hideUnimportantEvents; }
-void Preferences::setHideUnimportantEvents(bool state) { hideUnimportantEvents=state; }
-
-const bool Preferences::getDisableExpansion() { return disableExpansion; }
-void Preferences::setDisableExpansion(bool state) { disableExpansion = state; }
-
-// Web Browser
-const bool Preferences::getWebBrowserUseKdeDefault() { return webBrowserUseKdeDefault; }
-void Preferences::setWebBrowserUseKdeDefault(bool state) { webBrowserUseKdeDefault = state; }
-const QString Preferences::getWebBrowserCmd() { return webBrowserCmd; }
-void Preferences::setWebBrowserCmd(const QString &cmd) { webBrowserCmd=cmd; }
-
-const bool Preferences::getFilterColors() { return filterColors; }
-void Preferences::setFilterColors(bool filter) { filterColors = filter; }
-
-const bool Preferences::getUseColoredNicks() { return useColoredNicks; }
-void Preferences::setUseColoredNicks(bool useColor) { useColoredNicks=useColor; }
-
-void Preferences::setNickColorList(const QStringList &cl) { nickColorList = cl; }
-const QStringList Preferences::getNickColorList() { return nickColorList; }
-
-void Preferences::setUseBoldNicks(bool boldNicks) { useBoldNicks=boldNicks; }
-const bool Preferences::getUseBoldNicks() { return useBoldNicks; }
-
-void Preferences::setUseLiteralModes(bool literalModes) { useLiteralModes=literalModes; }
-const bool Preferences::getUseLiteralModes() { return useLiteralModes; }
-
-const bool Preferences::getRedirectToStatusPane() { return redirectToStatusPane; }
-void Preferences::setRedirectToStatusPane(bool redirect) { redirectToStatusPane = redirect; }
-
-const bool Preferences::getOpenWatchedNicksAtStartup() { return m_openWatchedNicksAtStartup; }
-void Preferences::setOpenWatchedNicksAtStartup(bool open) { m_openWatchedNicksAtStartup = open; }
-
 // Channel Encodings
-const QString Preferences::getChannelEncoding(const QString& server,const QString& channel)
+const QString Preferences::channelEncoding(const QString& server,const QString& channel)
 {
-    if(channelEncodingsMap.contains(server))
-        if(channelEncodingsMap[server].contains(channel.lower()))
-            return channelEncodingsMap[server][channel.lower()];
+    if(self()->mChannelEncodingsMap.contains(server))
+        if(self()->mChannelEncodingsMap[server].contains(channel.lower()))
+            return self()->mChannelEncodingsMap[server][channel.lower()];
     return QString::null;
 }
 
 void Preferences::setChannelEncoding(const QString& server,const QString& channel,const QString& encoding)
 {
     if(!encoding.isEmpty())
-        channelEncodingsMap[server][channel.lower()]=encoding;
+        self()->mChannelEncodingsMap[server][channel.lower()]=encoding;
     else
     {
-        channelEncodingsMap[server].remove(channel.lower());
-        if(channelEncodingsMap[server].count()==0)
-            channelEncodingsMap.remove(server);
+        self()->mChannelEncodingsMap[server].remove(channel.lower());
+        if(self()->mChannelEncodingsMap[server].count()==0)
+            self()->mChannelEncodingsMap.remove(server);
     }
 }
 
-const QStringList Preferences::getChannelEncodingsServerList()
+const QStringList Preferences::channelEncodingsServerList()
 {
-    return channelEncodingsMap.keys();
+    return self()->mChannelEncodingsMap.keys();
 }
 
-const QStringList Preferences::getChannelEncodingsChannelList(const QString& server)
+const QStringList Preferences::channelEncodingsChannelList(const QString& server)
 {
-    return channelEncodingsMap[server].keys();
+    return self()->mChannelEncodingsMap[server].keys();
 }
 
-void Preferences::setIconTheme(const QString& name) { iconTheme=name; }
-const QString Preferences::getIconTheme() { return iconTheme; }
-
-bool Preferences::showNicknameBox() const { return m_showNicknameBox; }
-void Preferences::setShowNicknameBox(bool show) { m_showNicknameBox = show; }
-
-QString Preferences::getWikiUrl() const { return wikiUrl; }
-void Preferences::setWikiUrl(const QString& url) { wikiUrl=url; }
-
-bool Preferences::getExpandWikiUrl() const { return expandWikiUrl;}
-void Preferences::setExpandWikiUrl(bool expandUrl) { expandWikiUrl=expandUrl; }
-
 #include "preferences.moc"
Index: src/konversation.desktop
===================================================================
--- src/konversation.desktop	(revision 454905)
+++ src/konversation.desktop	(working copy)
@@ -13,20 +13,25 @@
 GenericName[ga]=Comhrá IRC
 GenericName[he]=שיחת IRC
 GenericName[it]=Chat IRC
+GenericName[lt]=IRC pokalbiai
 GenericName[nl]=IRC-conversatie
 GenericName[pa]=IRC ਗੱਲਬਾਤ
 GenericName[pt]=Conversas IRC
 GenericName[pt_BR]=Conversas IRC
 GenericName[ru]=Клиент IRC
+GenericName[rw]=Ikiganiro IRC
 GenericName[sr]=IRC ћаскање
 GenericName[sr@Latn]=IRC ćaskanje
 GenericName[sv]=IRC-chatt
 GenericName[ta]=IRC அரட்டை
+GenericName[tr]=IRC Sohbet
+GenericName[xx]=xxIRC Chatxx
 Terminal=false
 Name=Konversation
 Name[hi]=कनवर्सेसन
 Name[pa]=ਗੱਲਬਾਤ
 Name[ta]=உரையாடல்
+Name[xx]=xxKonversationxx
 Categories=Qt;KDE;Network;X-SuSE-IRCClient;
 ServiceTypes=DCOP/InstantMessenger;DCOP/Unique
 X-DCOP-ServiceName=konversation
Index: src/prefspagechatwinbehavior.cpp
===================================================================
--- src/prefspagechatwinbehavior.cpp	(revision 454905)
+++ src/prefspagechatwinbehavior.cpp	(working copy)
@@ -1,63 +0,0 @@
-/*
-  This program is free software; you can redistribute it and/or modify
-  it under the terms of the GNU General Public License as published by
-  the Free Software Foundation; either version 2 of the License, or
-  (at your option) any later version.
-*/
-
-/*
-  prefspagebehaviour.h  -  The preferences panel that holds the behaviour settings
-  copyright: (C) 2002 by Dario Abatianni
-             (C) 2004-2005 by Peter Simonsson
-*/
-#include "prefspagechatwinbehavior.h"
-
-#include <qcheckbox.h>
-#include <qspinbox.h>
-#include <qgroupbox.h>
-
-#include <klineedit.h>
-
-#include "preferences.h"
-
-PrefsPageChatWinBehavior::PrefsPageChatWinBehavior(QWidget* newParent, Preferences* newPreferences)
-: ChatwindowBehaviour_Config( newParent )
-{
-    preferences = newPreferences;
-
-    kcfg_BeepOnAsciiBel->setChecked(preferences->getBeep());
-    kcfg_HideJoinPart->setChecked(preferences->getHideUnimportantEvents());
-    kcfg_DisableExpansions->setChecked(preferences->getDisableExpansion());
-    kcfg_ShowRememberLine->setChecked(preferences->getShowRememberLineInAllWindows());
-    kcfg_RedirectStatusMessages->setChecked(preferences->getRedirectToStatusPane());
-    kcfg_UseLiteralModes->setChecked(preferences->getUseLiteralModes());
-
-    kcfg_ScrollBackLimit->setValue(preferences->getScrollbackMax());
-    kcfg_AutoWhoLimit->setValue(preferences->getAutoWhoNicksLimit());
-
-    kcfg_autoWhoContinuous->setChecked(preferences->getAutoWhoContinuousEnabled());
-    kcfg_WhoInterval->setValue(preferences->getAutoWhoContinuousInterval());
-
-    kcfg_ShowRealNames->setChecked(preferences->getShowRealNames());
-}
-
-PrefsPageChatWinBehavior::~PrefsPageChatWinBehavior()
-{
-}
-
-void PrefsPageChatWinBehavior::applyPreferences()
-{
-    preferences->setBeep(kcfg_BeepOnAsciiBel->isChecked());
-    preferences->setHideUnimportantEvents(kcfg_HideJoinPart->isChecked());
-    preferences->setDisableExpansion(kcfg_DisableExpansions->isChecked());
-    preferences->setShowRememberLineInAllWindows(kcfg_ShowRememberLine->isChecked());
-    preferences->setRedirectToStatusPane(kcfg_RedirectStatusMessages->isChecked());
-    preferences->setUseLiteralModes(kcfg_UseLiteralModes->isChecked());
-    preferences->setScrollbackMax(kcfg_ScrollBackLimit->value());
-    preferences->setAutoWhoNicksLimit(kcfg_AutoWhoLimit->value());
-    preferences->setAutoWhoContinuousEnabled(kcfg_autoWhoContinuous->isChecked());
-    preferences->setAutoWhoContinuousInterval(kcfg_WhoInterval->value());
-    preferences->setShowRealNames(kcfg_ShowRealNames->isChecked());
-}
-
-#include "prefspagechatwinbehavior.moc"
Index: src/topiclabel.cpp
===================================================================
--- src/topiclabel.cpp	(revision 454905)
+++ src/topiclabel.cpp	(working copy)
@@ -108,13 +108,13 @@
                 m_server->sendJoinCommand(channel);
             }
             // Always use KDE default mailer.
-            else if (KonversationApplication::preferences.getWebBrowserUseKdeDefault() || link.lower().startsWith("mailto:"))
+            else if (Preferences::webBrowserUseKdeDefault() || link.lower().startsWith("mailto:"))
             {
                 new KRun(KURL(link));
             }
             else
             {
-                QString cmd = KonversationApplication::preferences.getWebBrowserCmd();
+                QString cmd = Preferences::webBrowserCmd();
                 cmd.replace("%u",link);
                 KProcess *proc = new KProcess;
                 QStringList cmdAndArgs = KShell::splitArgs(cmd);
Index: src/prefspagechatwinappearance.h
===================================================================
--- src/prefspagechatwinappearance.h	(revision 454905)
+++ src/prefspagechatwinappearance.h	(working copy)
@@ -21,7 +21,7 @@
 {
     Q_OBJECT
         public:
-        PrefsPageChatWinAppearance(QWidget* newParent,Preferences* newPreferences);
+        PrefsPageChatWinAppearance(QWidget* newParent);
 
     public slots:
         void applyPreferences();
@@ -29,8 +29,5 @@
     protected slots:
         void setBackgroundImageConfig(bool state);
         void saveBackgroundImage(const QString&);
-
-    protected:
-        Preferences* preferences;
 };
 #endif
Index: src/searchdialog.cpp
===================================================================
--- src/searchdialog.cpp	(revision 454905)
+++ src/searchdialog.cpp	(working copy)
@@ -102,7 +102,7 @@
 
 QString SearchDialog::search(QWidget* parent,bool* cs,bool* wo,bool* fw,bool* fc)
 {
-    QSize size;                                   // TODO: get it from KonversationApplication::preferences
+    QSize size;                                   // TODO: get it from Preferences
     SearchDialog dlg(parent,size);
 
     if(!dlg.getSearchText().isEmpty())
Index: src/dcctransfer.cpp
===================================================================
--- src/dcctransfer.cpp	(revision 454905)
+++ src/dcctransfer.cpp	(working copy)
@@ -32,6 +32,7 @@
 #include "dccpanel.h"
 #include "dcctransfer.h"
 #include "konversationapplication.h"
+#include "preferences.h"
 
 #define TIME_REMAINING_NOT_AVAILABLE -1
 #define TIME_REMAINING_INFINITE      -2
@@ -54,7 +55,7 @@
     m_ownPort = QString::null;
     m_timeOffer = QDateTime::currentDateTime();
 
-    m_bufferSize = KonversationApplication::preferences.getDccBufferSize();
+    m_bufferSize = Preferences::dccBufferSize();
     m_buffer = new char[ m_bufferSize ];
 
     m_autoUpdateViewTimer = 0;
Index: src/images.cpp
===================================================================
--- src/images.cpp	(revision 454905)
+++ src/images.cpp	(working copy)
@@ -105,7 +105,7 @@
 void Images::initializeNickIcons()
 {
 
-    QString iconTheme = KonversationApplication::preferences.getIconTheme();
+    QString iconTheme = Preferences::iconTheme();
     QStringList icons = KGlobal::dirs()->findAllResources("data","konversation/themes/"+iconTheme+"/*.png");
 
     if( icons.count() < 7 )                       // Sanity
Index: src/konversationapplication.cpp
===================================================================
--- src/konversationapplication.cpp	(revision 454905)
+++ src/konversationapplication.cpp	(working copy)
@@ -23,10 +23,33 @@
 #include <kstandarddirs.h>
 #include <klocale.h>
 #include <kmessagebox.h>
+#include <kconfigdialog.h>
+#include <kiconloader.h>
 
+#include "chatwindowappearance_preferences.h"
+#include "alias_preferences.h"
+#include "connectionbehavior_preferences.h"
+#include "highlight_preferences.h"
+#include "preferences.h"
+#include "warnings_preferences.h"
+#include "chatwindowappearance_preferences.h"
+#include "dcc_preferences.h"
+#include "log_preferences.h"
+#include "quickbuttons_preferences.h"
+#include "watchednicknames_preferences.h"
+#include "chatwindowbehaviour_preferences.h"
+#include "fontappearance_preferences.h"
+#include "nicklistbehavior_preferences.h"
+#include "tabbar_preferences.h"
+#include "colorsappearance_preferences.h"
+#include "generalbehavior_preferences.h"
+#include "osd_preferences.h"
+#include "theme_preferences.h"
+
+
+
 #include "konversationapplication.h"
 #include "konversationmainwindow.h"
-#include "prefsdialog.h"
 #include "highlight.h"
 #include "server.h"
 #include "konversationsound.h"
@@ -40,14 +63,10 @@
 #include "commit.h"
 #include "version.h"
 
-// include static variables
-Preferences KonversationApplication::preferences;
-
 KonversationApplication::KonversationApplication()
 : KUniqueApplication(true, true, true)
 {
     mainWindow = 0;
-    prefsDialog = 0;
     quickConnectDialog = 0;
     colorOffSet = 0;
     m_demoteInProgress = false;
@@ -87,30 +106,28 @@
     if(!mainWindow)
     {
         // make sure all vars are initialized properly
-        prefsDialog = 0;
         quickConnectDialog = 0;
         colorOffSet = 0;
 
         // Sound object used to play sound...
         m_sound = new Konversation::Sound(this);
 
-        // initialize OSD display here, so we can read the preferences properly
+        // initialize OSD display here, so we can read the Preferences::properly
         osd = new OSDWidget( "Konversation" );
 
-        preferences.setOSDFont(font());
-        preferences.setTextFont(font());
-        preferences.setListFont(font());
+        Preferences::self();
+        Preferences::setOSDFont(font());
+        Preferences::setTextFont(font());
+        Preferences::setListFont(font());
 
         readOptions();
-        colorList = KonversationApplication::preferences.getNickColorList();
-
         // Images object providing LEDs, NickIcons
         m_images = new Images();
 
         // Auto-alias scripts
         QStringList scripts = KGlobal::dirs()->findAllResources("data","konversation/scripts/*");
         QFileInfo* fileInfo = new QFileInfo();
-        QStringList aliasList(KonversationApplication::preferences.getAliasList());
+        QStringList aliasList(Preferences::aliasList());
         QString newAlias;
 
         for ( QStringList::ConstIterator it = scripts.begin(); it != scripts.end(); ++it )
@@ -125,7 +142,7 @@
             }
         }
 
-        KonversationApplication::preferences.setAliasList(aliasList);
+        Preferences::setAliasList(aliasList);
 
         // Setup system codec
         // TODO: check if this works now as intended
@@ -138,20 +155,20 @@
         connect(mainWindow,SIGNAL (openPrefsDialog()),this,SLOT (openPrefsDialog()) );
         connect(mainWindow,SIGNAL (openPrefsDialog(Preferences::Pages)),this,SLOT (openPrefsDialog(Preferences::Pages)) );
         connect(mainWindow,SIGNAL (showQuickConnectDialog()), this, SLOT (openQuickConnectDialog()) );
-        connect(&preferences,SIGNAL (updateTrayIcon()),mainWindow,SLOT (updateTrayIcon()) );
+        connect(Preferences::self(), SIGNAL (updateTrayIcon()),mainWindow,SLOT (updateTrayIcon()) );
         connect(this, SIGNAL (prefsChanged()), mainWindow, SLOT (slotPrefsChanged()) );
 
         // apply GUI settings
         appearanceChanged();
         mainWindow->show();
 
-        if(preferences.getShowServerList())
+        if(Preferences::showServerList())
         {
             mainWindow->openServerList();
         }
 
         // handle autoconnect on startup
-        Konversation::ServerGroupList serverGroups = preferences.serverGroupList();
+        Konversation::ServerGroupList serverGroups = Preferences::serverGroupList();
 
         if(!m_connectDelayed)
         {
@@ -316,14 +333,14 @@
 
 Server* KonversationApplication::connectToServerGroup(const QString& serverGroup)
 {
-    int serverGroupId = preferences.serverGroupIdByName(serverGroup);
+    int serverGroupId = Preferences::serverGroupIdByName(serverGroup);
 
     return connectToServer(serverGroupId);
 }
 
 Server* KonversationApplication::connectToServer(int id)
 {
-    Konversation::ServerGroupSettingsPtr serverGroup = preferences.serverGroupById(id);
+    Konversation::ServerGroupSettingsPtr serverGroup = Preferences::serverGroupById(id);
     IdentityPtr identity = serverGroup->identity();
 
     if(!identity)
@@ -426,9 +443,6 @@
 
 void KonversationApplication::quitKonversation()
 {
-    delete prefsDialog;
-    prefsDialog=0;
-
     qApp->quit();
 }
 
@@ -437,155 +451,11 @@
     // get standard config file
     KConfig* config=kapp->config();
 
-    // Read configuration and provide the default values
-    config->setGroup("General Options");
-
-    // Command char setting
-    preferences.setCommandChar(config->readEntry("CommandChar",preferences.getCommandChar()));
-
-    // Tray icon settings
-    preferences.setShowTrayIcon(config->readBoolEntry("ShowTrayIcon",preferences.getShowTrayIcon()));
-    preferences.setSystrayOnly(config->readBoolEntry("SystrayOnly",preferences.getSystrayOnly()));
-    preferences.setTrayNotify(config->readBoolEntry("TrayNotify",preferences.getTrayNotify()));
-    preferences.setTrayNotifyOnlyOwnNick(config->readBoolEntry("TrayNotifyOnlyOwnNick",
-        preferences.trayNotifyOnlyOwnNick()));
-    preferences.setShowBackgroundImage(config->readBoolEntry("ShowBackgroundImage",preferences.getShowBackgroundImage()));
-
-    // Window geometries
-    QSize* logfileReaderSize=new QSize(500,300);
-    preferences.setNicksOnlineSize(config->readSizeEntry("NicksOnlineGeometry"));
-    preferences.setNicknameSize(config->readSizeEntry("NicknameGeometry"));
-    preferences.setLogfileReaderSize(config->readSizeEntry("LogfileReaderGeometry",logfileReaderSize));
-    preferences.setMultilineEditSize(config->readSizeEntry("MultilineEditGeometry"));
-    delete logfileReaderSize;
-
-    preferences.setLogfileBufferSize(config->readNumEntry("LogfileBufferSize",preferences.getLogfileBufferSize()));
-    preferences.setScrollbackMax(config->readUnsignedNumEntry("ScrollbackMax",preferences.getScrollbackMax()));
-
-    preferences.setAutoWhoNicksLimit(config->readUnsignedNumEntry("AutoWhoNicksLimit",preferences.getAutoWhoNicksLimit()));
-    preferences.setAutoWhoContinuousEnabled(config->readBoolEntry("AutoWhoContinuousEnabled",preferences.getAutoWhoContinuousEnabled()));
-    preferences.setAutoWhoContinuousInterval(config->readUnsignedNumEntry("AutoWhoContinuousInterval",preferences.getAutoWhoContinuousInterval()));
-    preferences.setShowRealNames(config->readBoolEntry("ShowRealNames",preferences.getShowRealNames()));
-
-    // Double click actions & clickable nicks
-    preferences.setUseClickableNicks(config->readBoolEntry("ClickableNicks",preferences.getUseClickableNicks()));
-    preferences.setChannelDoubleClickAction(config->readEntry("ChannelDoubleClickAction",preferences.getChannelDoubleClickAction()));
-    preferences.setNotifyDoubleClickAction(config->readEntry("NotifyDoubleClickAction",preferences.getNotifyDoubleClickAction()));
-
-    // Beep
-    preferences.setBeep(config->readBoolEntry("Beep",preferences.getBeep()));
-
-    // Raw log window
-    preferences.setRawLog(config->readBoolEntry("RawLog",preferences.getRawLog()));
-
-    // Custom CTCP Version Reply
-    preferences.setCustomVersionReplyEnabled(config->readBoolEntry("CustomVersionReplyEnabled",preferences.getCustomVersionReplyEnabled()));
-    preferences.setCustomVersionReply(config->readEntry("CustomVersionReply",preferences.getCustomVersionReply()));
-
-    // Reconnection timeout
-    preferences.setMaximumLagTime(config->readNumEntry("MaximumLag",preferences.getMaximumLagTime()));
-
-    preferences.setRedirectToStatusPane(config->readBoolEntry("RedirectServerAndAppMsgToStatusPane",
-        preferences.getRedirectToStatusPane()));
-
-    //User interface
-    preferences.setShowMenuBar(config->readBoolEntry("ServerWindowMenuBarStatus", preferences.getShowMenuBar()));
-
-    preferences.setDisableNotifyWhileAway(config->readBoolEntry("DisableNotifyWhileAway",
-        preferences.disableNotifyWhileAway()));
-
-    // Wiki
-    preferences.setWikiUrl(config->readEntry("WikiUrl", "http://en.wikipedia.org/wiki/"));
-    preferences.setExpandWikiUrl(config->readBoolEntry("WikiUrlExpand", false));
-
-    // Appearance
-    config->setGroup("Appearance");
-    // Fonts
-    preferences.setTextFontRaw(config->readEntry("TextFont",preferences.getTextFont().rawName()));
-    preferences.setListFontRaw(config->readEntry("ListFont",preferences.getListFont().rawName()));
-    preferences.setTimestamping(config->readBoolEntry("Timestamping",preferences.getTimestamping()));
-    preferences.setShowDate(config->readBoolEntry("ShowDate",preferences.getShowDate()));
-    preferences.setTimestampFormat(config->readEntry("TimestampFormat",preferences.getTimestampFormat()));
-    preferences.setShowQuickButtons(config->readBoolEntry("ShowQuickButtons",preferences.getShowQuickButtons()));
-    preferences.setShowModeButtons(config->readBoolEntry("ShowModeButtons",preferences.getShowModeButtons()));
-    preferences.setCloseButtonsOnTabs(config->readBoolEntry("CloseButtonsOnTabs",preferences.getCloseButtonsOnTabs()));
-    preferences.setCloseButtonsAlignRight(config->readBoolEntry("CloseButtonsAlignRight",preferences.getCloseButtonsAlignRight()));
-
-    preferences.setAutoUserhost(config->readBoolEntry("AutoUserhost",preferences.getAutoUserhost()));
-
-    preferences.setUseSpacing(config->readBoolEntry("UseSpacing",preferences.getUseSpacing()));
-    preferences.setSpacing(config->readNumEntry("Spacing",preferences.getSpacing()));
-    preferences.setMargin(config->readNumEntry("Margin",preferences.getMargin()));
-
-    preferences.setUseParagraphSpacing(config->readBoolEntry("UseParagraphSpacing",preferences.getUseParagraphSpacing()));
-    preferences.setParagraphSpacing(config->readNumEntry("ParagraphSpacing",preferences.getParagraphSpacing()));
-
-    preferences.setChannelSplitterSizes(config->readIntListEntry("ChannelSplitterSizes"));
-    preferences.setTopicSplitterSizes(config->readIntListEntry("TopicSplitterSizes"));
-
-    preferences.setBackgroundImageName(config->readEntry("BackgroundImage",preferences.getBackgroundImageName()));
-    QStringList ircColorList = preferences.getIRCColorList();
-    preferences.setIRCColorList(config->readListEntry("IRCColors"));
-
-    if(preferences.getIRCColorList().empty())
-    {
-        preferences.setIRCColorList(ircColorList);
-    }
-
-                                                  //FIXME
-    preferences.setFilterColors(config->readBoolEntry("FilterColorCodes",preferences.getFilterColors()));
-
-    QStringList nickColorList = config->readListEntry("NickColors");
-
-    if(nickColorList.empty())
-    {
-        nickColorList = preferences.getNickColorList();
-    }
-
-    if(nickColorList.count() < 9)
-    {
-        nickColorList.append("#" + preferences.getColor("ChannelMessage"));
-    }
-
-    preferences.setNickColorList(nickColorList);
-
-    preferences.setUseColoredNicks(config->readBoolEntry("UseColoredNicks",preferences.getUseColoredNicks()));
-
-    preferences.setUseBoldNicks(config->readBoolEntry("UseBoldNicks",preferences.getUseBoldNicks()));
-
-    preferences.setUseLiteralModes(config->readBoolEntry("UseLiteralModes",preferences.getUseLiteralModes()));
-
-    preferences.setShowTabBarCloseButton(config->readBoolEntry("ShowTabBarCloseButton", preferences.getShowTabBarCloseButton()));
-
-    preferences.setShowTopic(config->readBoolEntry("ShowTopic", preferences.getShowTopic()));
-    preferences.setShowNicknameBox(config->readBoolEntry("ShowNicknameBox", preferences.showNicknameBox()));
-
-    preferences.setShowRememberLineInAllWindows(config->readBoolEntry("ShowRememberLineInAllWindows", preferences.getShowRememberLineInAllWindows()));
-    preferences.setFocusNewQueries(config->readBoolEntry("FocusNewQueries", preferences.getFocusNewQueries()));
-
-    // Sorting
-    config->setGroup("Sort Nicknames");
-    if(config->readNumEntry("AdminValue",-1)!=-1)
-    {
-        // if there is an AdminValue, read the rest, otherwise keep the defaults. This way we
-        // will actually kill peoples' sorting options once while upgrading but they will get
-        // the new extended modes in return
-        preferences.setAdminValue(config->readNumEntry("AdminValue",preferences.getAdminValue()));
-        preferences.setOwnerValue(config->readNumEntry("OwnerValue",preferences.getOwnerValue()));
-        preferences.setOpValue(config->readNumEntry("OperatorValue",preferences.getOpValue()));
-        preferences.setHalfopValue(config->readNumEntry("HalfopValue",preferences.getHalfopValue()));
-        preferences.setVoiceValue(config->readNumEntry("VoiceValue",preferences.getVoiceValue()));
-        preferences.setNoRightsValue(config->readNumEntry("NoRightsValue",preferences.getNoRightsValue()));
-    }
-
-    preferences.setSortByStatus(config->readBoolEntry("SortByStatus",preferences.getSortByStatus()));
-    preferences.setSortCaseInsensitive(config->readBoolEntry("SortCaseInsensitive",preferences.getSortCaseInsensitive()));
-
     // Identity list
     QStringList identityList=config->groupList().grep(QRegExp("Identity [0-9]+"));
     if(identityList.count())
     {
-        preferences.clearIdentityList();
+        Preferences::clearIdentityList();
 
         for(unsigned int index=0;index<identityList.count();index++)
         {
@@ -619,73 +489,62 @@
 
             newIdentity->setAwayNick(config->readEntry("AwayNick"));
 
-            preferences.addIdentity(newIdentity);
+            Preferences::addIdentity(newIdentity);
 
         }                                         // endfor
 
     }
     else
     {
-        // Default user identity for pre 0.10 preferences files
+        // Default user identity for pre 0.10 Preferences::files
         config->setGroup("User Identity");
-        preferences.setIdent(config->readEntry("Ident",preferences.getIdent()));
-        preferences.setRealName(config->readEntry("Realname",preferences.getRealName()));
+        Preferences::setIdent(config->readEntry("Ident",Preferences::ident()));
+        Preferences::setRealName(config->readEntry("Realname",Preferences::realName()));
 
-        QString nickList=config->readEntry("Nicknames",preferences.getNicknameList().join(","));
-        preferences.setNicknameList(QStringList::split(",",nickList));
+        QString nickList=config->readEntry("Nicknames",Preferences::nicknameList().join(","));
+        Preferences::setNicknameList(QStringList::split(",",nickList));
 
-        preferences.setShowAwayMessage(config->readBoolEntry("ShowAwayMessage",preferences.getShowAwayMessage()));
-        preferences.setAwayMessage(config->readEntry("AwayMessage",preferences.getAwayMessage()));
-        preferences.setUnAwayMessage(config->readEntry("UnAwayMessage",preferences.getUnAwayMessage()));
+        Preferences::setShowAwayMessage(config->readBoolEntry("ShowAwayMessage",Preferences::showAwayMessage()));
+        Preferences::setAwayMessage(config->readEntry("AwayMessage",Preferences::awayMessage()));
+        Preferences::setUnAwayMessage(config->readEntry("UnAwayMessage",Preferences::unAwayMessage()));
 
         config->deleteGroup("User Identity");
     }
     // OnScreen Display
     config->setGroup("OSD");
-    preferences.setOSDUsage(config->readBoolEntry("UseOSD",preferences.getOSDUsage()));
-    preferences.setOSDShowOwnNick(config->readBoolEntry("ShowOwnNick",preferences.getOSDShowOwnNick()));
-    preferences.setOSDShowChannel(config->readBoolEntry("ShowChannel",preferences.getOSDShowChannel()));
-    preferences.setOSDShowQuery(config->readBoolEntry("ShowQuery",preferences.getOSDShowQuery()));
-    preferences.setOSDShowChannelEvent(config->readBoolEntry("ShowChannelEvent",preferences.getOSDShowChannelEvent()));
-    preferences.setOSDFontRaw(config->readEntry("OSDFont",preferences.getOSDFont().rawName()));
-    preferences.setOSDUseCustomColors(config->readBoolEntry("OSDUseCustomColors", preferences.getOSDUseCustomColors()));
-    preferences.setOSDDuration(config->readNumEntry("OSDDuration",preferences.getOSDDuration()));
-    preferences.setOSDScreen(config->readNumEntry("OSDScreen",preferences.getOSDScreen()));
-    preferences.setOSDDrawShadow(config->readBoolEntry("OSDDrawShadow",preferences.getOSDDrawShadow()));
-    preferences.setOSDOffsetX(config->readNumEntry("OffsetX",preferences.getOSDOffsetX()));
-    preferences.setOSDOffsetY(config->readNumEntry("OffsetY",preferences.getOSDOffsetY()));
-    preferences.setOSDAlignment(config->readNumEntry("Alignment",preferences.getOSDAlignment()));
     // if osd object exists
-    if(osd)
+/* FIXME - This code was from pre-kconfigxt times.  This needs to be ported to however kconfigxt does this.
+ *
+ *     if(osd)
     {
-        osd->setEnabled(preferences.getOSDUsage());
-        osd->setFont(preferences.getOSDFont());
-        osd->setDuration(preferences.getOSDDuration());
-        osd->setScreen(preferences.getOSDScreen());
-        osd->setShadow(preferences.getOSDDrawShadow());
-        osd->setOffset(preferences.getOSDOffsetX(),preferences.getOSDOffsetY());
-        osd->setAlignment((OSDWidget::Alignment)preferences.getOSDAlignment());
+        osd->setEnabled(Preferences::OSDUsage());
+        osd->setFont(Preferences::OSDFont());
+        osd->setDuration(Preferences::OSDDuration());
+        osd->setScreen(Preferences::OSDScreen());
+        osd->setShadow(Preferences::OSDDrawShadow());
+        osd->setOffset(Preferences::OSDOffsetX(),Preferences::OSDOffsetY());
+        osd->setAlignment((OSDWidget::Alignment)Preferences::OSDAlignment());
 
-        if(preferences.getOSDUseCustomColors())
+        if(Preferences::OSDUseCustomColors())
         {
             QString osdTextColor = config->readEntry("OSDTextColor");
             if(osdTextColor.isEmpty())
-                preferences.setOSDTextColor(preferences.getOSDTextColor().name());
+                Preferences::setOSDTextColor(Preferences::OSDTextColor().name());
             else
-                preferences.setOSDTextColor("#" + osdTextColor);
+                Preferences::setOSDTextColor("#" + osdTextColor);
 
-            osd->setTextColor(preferences.getOSDTextColor());
+            osd->setTextColor(Preferences::OSDTextColor());
 
             QString osdBackgroundColor = config->readEntry("OSDBackgroundColor");
             if(osdBackgroundColor.isEmpty())
-                preferences.setOSDBackgroundColor(preferences.getOSDBackgroundColor().name());
+                Preferences::setOSDBackgroundColor(Preferences::OSDBackgroundColor().name());
             else
-                preferences.setOSDBackgroundColor("#" + osdBackgroundColor);
+                Preferences::setOSDBackgroundColor("#" + osdBackgroundColor);
 
-            osd->setBackgroundColor(preferences.getOSDBackgroundColor());
+            osd->setBackgroundColor(Preferences::OSDBackgroundColor());
         }
     }
-
+*/
     // Check if there is old server list config
     config->setGroup("Server List");
 
@@ -708,7 +567,7 @@
             server.setPort(tmp[2].toInt());
             server.setPassword(tmp[3]);
             serverGroup->addServer(server);
-            serverGroup->setIdentityId(preferences.getIdentityByName(tmp[7])->id());
+            serverGroup->setIdentityId(Preferences::identityByName(tmp[7])->id());
             serverGroup->setAutoConnectEnabled(tmp[6].toInt());
             serverGroup->setConnectCommands(tmp[8]);
 
@@ -733,7 +592,7 @@
             serverGroups.append(serverGroup);
         }
 
-        preferences.setServerGroupList(serverGroups);
+        Preferences::setServerGroupList(serverGroups);
     }
     else
     {
@@ -756,7 +615,7 @@
                 Konversation::ServerGroupSettingsPtr serverGroup = new Konversation::ServerGroupSettings;
                 serverGroup->setName(config->readEntry("Name"));
                 serverGroup->setGroup(config->readEntry("Group"));
-                serverGroup->setIdentityId(preferences.getIdentityByName(config->readEntry("Identity"))->id());
+                serverGroup->setIdentityId(Preferences::identityByName(config->readEntry("Identity"))->id());
                 serverGroup->setConnectCommands(config->readEntry("ConnectCommands"));
                 serverGroup->setAutoConnectEnabled(config->readBoolEntry("AutoConnect"));
                 serverGroup->setNotificationsEnabled(config->readBoolEntry("EnableNotifications", true));
@@ -809,17 +668,18 @@
                 serverGroups.append(serverGroup);
             }
 
-            preferences.setServerGroupList(serverGroups);
+            Preferences::setServerGroupList(serverGroups);
         }
     }
-
+/*  FIXME - this needs to be ported to new kconfigxt
+ *
+ *  
     // Notify Settings and lists.  Must follow Server List.
     config->setGroup("Notify List");
-    preferences.setNotifyDelay(config->readNumEntry("NotifyDelay",20));
-    preferences.setUseNotify(config->readBoolEntry("UseNotify",true));
+    Preferences::setNotifyDelay(config->readNumEntry("NotifyDelay",20));
+    Preferences::setUseNotify(config->readBoolEntry("UseNotify",true));
     //  QString notifyList=config->readEntry("NotifyList",QString::null);
-    //  preferences.setNotifyList(QStringList::split(' ',notifyList));
-    preferences.setOpenWatchedNicksAtStartup(config->readBoolEntry("OnStartup", preferences.getOpenWatchedNicksAtStartup()));
+    //  Preferences::setNotifyList(QStringList::split(' ',notifyList));
     int index = 0;
     QMap<QString, QStringList> notifyList;
     QMap<QString, QString> notifyGroups = config->entryMap("Notify Group Lists");
@@ -839,7 +699,7 @@
         {
             QStringList oldNotifyNicknameList = QStringList::split(" ", oldNotifyNicknames, false);
             // Build a list of unique server group names.
-            Konversation::ServerGroupList serverGroups = preferences.serverGroupList();
+            Konversation::ServerGroupList serverGroups = Preferences::serverGroupList();
             QStringList groupNames;
 
             for(Konversation::ServerGroupList::iterator it = serverGroups.begin(); it != serverGroups.end(); ++it)
@@ -856,47 +716,30 @@
                 notifyList[*groupIt] = oldNotifyNicknameList;
         }
     }
-    preferences.setNotifyList(notifyList);
-
+    Preferences::setNotifyList(notifyList);
+*/
     // Quick Buttons List
     config->setGroup("Button List");
     // Read all buttons and overwrite default entries
-    QStringList buttonList(preferences.getButtonList());
-    for(index=0;index<8;index++)
+    QStringList buttonList(Preferences::buttonList());
+    for(int index=0;index<8;index++)
     {
         QString buttonKey(QString("Button%1").arg(index));
         if(config->hasKey(buttonKey)) buttonList[index]=config->readEntry(buttonKey);
     }
     // Put back the changed button list
-    preferences.setButtonList(buttonList);
+    Preferences::setButtonList(buttonList);
 
     // Highlight List
-    config->setGroup("Highlight List");
-    preferences.setHighlightSoundEnabled(config->readBoolEntry("HighlightSoundsEnabled",
-        preferences.getHighlightSoundEnabled()));
-    preferences.setHighlightNick(config->readBoolEntry("HighlightNick",preferences.getHighlightNick()));
-    QString highlight=config->readEntry("HighlightNickColor");
-    if(highlight.isEmpty())
-        preferences.setHighlightNickColor(preferences.getHighlightNickColor().name());
-    else
-        preferences.setHighlightNickColor("#"+highlight);
-
-    preferences.setHighlightOwnLines(config->readBoolEntry("HighlightOwnLines",preferences.getHighlightOwnLines()));
-    highlight=config->readEntry("HighlightOwnLinesColor");
-    if(highlight.isEmpty())
-        preferences.setHighlightOwnLinesColor(preferences.getHighlightOwnLinesColor().name());
-    else
-        preferences.setHighlightOwnLinesColor("#"+highlight);
-
     if(config->hasKey("Highlight"))               // Stay compatible with versions < 0.14
     {
-        highlight=config->readEntry("Highlight");
+        QString highlight=config->readEntry("Highlight");
         QStringList hiList=QStringList::split(' ',highlight);
 
         unsigned int hiIndex;
         for(hiIndex=0;hiIndex<hiList.count();hiIndex+=2)
         {
-            preferences.addHighlight(hiList[hiIndex],false,"#"+hiList[hiIndex+1],QString::null,QString::null);
+            Preferences::addHighlight(hiList[hiIndex],false,"#"+hiList[hiIndex+1],QString::null,QString::null);
         }
 
         config->deleteEntry("Highlight");
@@ -908,7 +751,7 @@
         while(config->hasGroup(QString("Highlight%1").arg(i)))
         {
             config->setGroup(QString("Highlight%1").arg(i));
-            preferences.addHighlight(config->readEntry("Pattern"),
+            Preferences::addHighlight(config->readEntry("Pattern"),
                 config->readBoolEntry("RegExp"),
                 config->readColorEntry("Color"),
                 config->readPathEntry("Sound"),
@@ -919,84 +762,24 @@
 
     // Ignore List
     config->setGroup("Ignore List");
-    // Remove all default entries if there is at least one Ignore in the preferences file
-    if(config->hasKey("Ignore0")) preferences.clearIgnoreList();
+    // Remove all default entries if there is at least one Ignore in the Preferences::file
+    if(config->hasKey("Ignore0")) Preferences::clearIgnoreList();
     // Read all ignores
-    index=0;
+    int index=0;
     while(config->hasKey(QString("Ignore%1").arg(index)))
     {
-        preferences.addIgnore(config->readEntry(QString("Ignore%1").arg(index++)));
+        Preferences::addIgnore(config->readEntry(QString("Ignore%1").arg(index++)));
     }
 
     // Aliases
     config->setGroup("Aliases");
     QStringList newList=config->readListEntry("AliasList");
-    if(!newList.isEmpty()) preferences.setAliasList(newList);
+    if(!newList.isEmpty()) Preferences::setAliasList(newList);
 
-    // Nick Completion
-    config->setGroup("Nick Completion");
-    preferences.setNickCompletionMode(config->readNumEntry("Mode", preferences.getNickCompletionMode()));
-    preferences.setNickCompleteSuffixStart(config->readEntry("SuffixStart",preferences.getNickCompleteSuffixStart()));
-    preferences.setNickCompleteSuffixMiddle(config->readEntry("SuffixMiddle",preferences.getNickCompleteSuffixMiddle()));
-    preferences.setPrefixCharacter(config->readEntry("PrefixCharacter",preferences.getPrefixCharacter()));
-    preferences.setNickCompletionCaseSensitive(config->readBoolEntry("CaseSensitive",
-        preferences.nickCompletionCaseSensitive()));
-
-    // DCC Settings
-    config->setGroup("DCC Settings");
-    preferences.setDccBufferSize(config->readNumEntry("BufferSize",preferences.getDccBufferSize()));
-    preferences.setDccMethodToGetOwnIp(config->readNumEntry("MethodToGetOwnIp",preferences.getDccMethodToGetOwnIp()));
-    preferences.setDccSpecificOwnIp(config->readEntry("SpecificOwnIp",preferences.getDccSpecificOwnIp()));
-    preferences.setDccSpecificSendPorts(config->readBoolEntry("SpecificSendPorts",preferences.getDccSpecificSendPorts()));
-    preferences.setDccSendPortsFirst(config->readNumEntry("SendPortsFirst",preferences.getDccSendPortsFirst()));
-    preferences.setDccSendPortsLast(config->readNumEntry("SendPortsLast",preferences.getDccSendPortsLast()));
-    preferences.setDccSpecificChatPorts(config->readBoolEntry("SpecificChatPorts",preferences.getDccSpecificChatPorts()));
-    preferences.setDccChatPortsFirst(config->readNumEntry("ChatPortsFirst",preferences.getDccChatPortsFirst()));
-    preferences.setDccChatPortsLast(config->readNumEntry("ChatPortsLast",preferences.getDccChatPortsLast()));
-    preferences.setDccAddPartner(config->readBoolEntry("AddPartner",preferences.getDccAddPartner()));
-    preferences.setDccCreateFolder(config->readBoolEntry("CreateFolder",preferences.getDccCreateFolder()));
-    preferences.setDccAutoGet(config->readBoolEntry("AutoGet",preferences.getDccAutoGet()));
-    preferences.setDccAutoResume(config->readBoolEntry("AutoResume",preferences.getDccAutoResume()));
-    preferences.setDccFastSend(config->readBoolEntry("FastSend",preferences.getDccFastSend()));
-    preferences.setDccSendTimeout(config->readNumEntry("SendTimeout",preferences.getDccSendTimeout()));
-    preferences.setIPv4Fallback(config->readBoolEntry("IPv4Fallback",preferences.getIPv4Fallback()));
-    preferences.setIPv4FallbackIface(config->readEntry("IPv4FallbackInterface",preferences.getIPv4FallbackIface()));
-
-    // Path settings
-    config->setGroup("Path Settings");
-    preferences.setLogPath(config->readPathEntry("LogfilePath",preferences.getLogPath()));
-    preferences.setDccPath(config->readPathEntry("DccPath",preferences.getDccPath()));
-
-    // Miscellaneous Flags
-    config->setGroup("Flags");
-
-    preferences.setLog(config->readBoolEntry("Log",preferences.getLog()));
-    preferences.setLowerLog(config->readBoolEntry("LowerLog",preferences.getLowerLog()));
-    preferences.setAddHostnameToLog(config->readBoolEntry("AddHostnameToLog",preferences.getAddHostnameToLog()));
-    preferences.setLogFollowsNick(config->readBoolEntry("LogFollowsNick",preferences.getLogFollowsNick()));
-
-    preferences.setTabPlacement(static_cast<Preferences::TabPlacement>(config->readNumEntry("TabPlacement",static_cast<int>(preferences.getTabPlacement()))));
-    preferences.setBlinkingTabs(config->readBoolEntry("BlinkingTabs",preferences.getBlinkingTabs()));
-    preferences.setBringToFront(config->readBoolEntry("BringToFront",preferences.getBringToFront()));
-
-    preferences.setHideUnimportantEvents(config->readBoolEntry("HideUnimportantEvents",preferences.getHideUnimportantEvents()));
-    preferences.setDisableExpansion(config->readBoolEntry("DisableExpansion", preferences.getDisableExpansion()));
-
-    preferences.setAutoReconnect(config->readBoolEntry("AutoReconnect",preferences.getAutoReconnect()));
-    preferences.setReconnectCount(config->readNumEntry("ReconnectCount",preferences.getReconnectCount()));
-    preferences.setAutoRejoin(config->readBoolEntry("AutoRejoin",preferences.getAutoRejoin()));
-    preferences.setAutojoinOnInvite(config->readBoolEntry("AutojoinOnInvite",preferences.getAutojoinOnInvite()));
-
-                                                  // Default is false
-    preferences.setFixedMOTD(config->readBoolEntry("FixedMOTD"));
-    preferences.setShowServerList(config->readBoolEntry("ShowServerList",preferences.getShowServerList()));
-
-    preferences.setColorInputFields(config->readBoolEntry("InputFieldsBackgroundColor",preferences.getColorInputFields()));
-
     // Web Browser
     config->setGroup("Web Browser Settings");
-    preferences.setWebBrowserUseKdeDefault(config->readBoolEntry("UseKdeDefault",preferences.getWebBrowserUseKdeDefault()));
-    preferences.setWebBrowserCmd(config->readEntry("WebBrowserCmd",preferences.getWebBrowserCmd()));
+    Preferences::setWebBrowserUseKdeDefault(config->readBoolEntry("UseKdeDefault",Preferences::webBrowserUseKdeDefault()));
+    Preferences::setWebBrowserCmd(config->readEntry("WebBrowserCmd",Preferences::webBrowserCmd()));
 
     // Channel Encodings
     QMap<QString,QString> channelEncodingsEntry=config->entryMap("Channel Encodings");
@@ -1004,130 +787,26 @@
     QStringList channelEncodingsEntryKeys=channelEncodingsEntry.keys();
     for(unsigned int i=0; i<channelEncodingsEntry.count(); ++i)
         if(re.search(channelEncodingsEntryKeys[i]) > -1)
-            preferences.setChannelEncoding(re.cap(1),re.cap(2),channelEncodingsEntry[channelEncodingsEntryKeys[i]]);
+            Preferences::setChannelEncoding(re.cap(1),re.cap(2),channelEncodingsEntry[channelEncodingsEntryKeys[i]]);
 
-    // Themes
-    config->setGroup("Themes");
-    preferences.setIconTheme(config->readEntry("IconTheme",preferences.getIconTheme()));
-    preferences.setEmotIconsEnabled(config->readBoolEntry("EnableEmotIcons", false));
-    preferences.setEmotIconsTheme(config->readEntry("EmotIconTheme", "Default"));
-
 }
 
 void KonversationApplication::saveOptions(bool updateGUI)
 {
     KConfig* config=kapp->config();
 
-    config->setGroup("General Options");
-
-    config->writeEntry("CommandChar",preferences.getCommandChar());
-
-    config->writeEntry("NicksOnlineGeometry",preferences.getNicksOnlineSize());
-    config->writeEntry("NicknameGeometry",preferences.getNicknameSize());
-    config->writeEntry("LogfileReaderGeometry",preferences.getLogfileReaderSize());
-    config->writeEntry("MultilineEditGeometry",preferences.getMultilineEditSize());
-
-    config->writeEntry("LogfileBufferSize",preferences.getLogfileBufferSize());
-    config->writeEntry("ScrollbackMax",preferences.getScrollbackMax());
-
-    config->writeEntry("AutoWhoNicksLimit",preferences.getAutoWhoNicksLimit());
-    config->writeEntry("AutoWhoContinuousEnabled",preferences.getAutoWhoContinuousEnabled());
-    config->writeEntry("AutoWhoContinuousInterval",preferences.getAutoWhoContinuousInterval());
-    config->writeEntry("ShowRealNames",preferences.getShowRealNames());
-
-    config->writeEntry("ShowTrayIcon",preferences.getShowTrayIcon());
-    config->writeEntry("SystrayOnly",preferences.getSystrayOnly());
-    config->writeEntry("TrayNotify",preferences.getTrayNotify());
-    config->writeEntry("TrayNotifyOnlyOwnNick", preferences.trayNotifyOnlyOwnNick());
-
-    config->writeEntry("ShowBackgroundImage",preferences.getShowBackgroundImage());
-
-    config->writeEntry("ClickableNicks",preferences.getUseClickableNicks());
-
-    if ( preferences.getChannelDoubleClickAction() == "/QUERY %u%n" )
-        config->deleteEntry("ChannelDoubleClickAction");
-    else
-        config->writeEntry("ChannelDoubleClickAction",preferences.getChannelDoubleClickAction());
-    config->writeEntry("NotifyDoubleClickAction",preferences.getNotifyDoubleClickAction());
-
-    config->writeEntry("Beep",preferences.getBeep());
-    config->writeEntry("RawLog",preferences.getRawLog());
-
-    config->writeEntry("CustomVersionReplyEnabled",preferences.getCustomVersionReplyEnabled());
-    config->writeEntry("CustomVersionReply",preferences.getCustomVersionReply());
-
-    config->writeEntry("MaximumLag",preferences.getMaximumLagTime());
-
-    config->writeEntry("RedirectServerAndAppMsgToStatusPane", preferences.getRedirectToStatusPane());
-
-    //User interface
-    config->writeEntry("ServerWindowMenuBarStatus", preferences.getShowMenuBar());
-
-    config->writeEntry("DisableNotifyWhileAway", preferences.disableNotifyWhileAway());
-
-    config->writeEntry("WikiUrl", preferences.getWikiUrl());
-    config->writeEntry("WikiUrlExpand", preferences.getExpandWikiUrl());
-
-    config->setGroup("Appearance");
-
-    config->writeEntry("TextFont",preferences.getTextFont().toString());
-    config->writeEntry("ListFont",preferences.getListFont().toString());
-    config->writeEntry("Timestamping",preferences.getTimestamping());
-    config->writeEntry("ShowDate", preferences.getShowDate());
-    config->writeEntry("TimestampFormat",preferences.getTimestampFormat());
-    config->writeEntry("ShowQuickButtons",preferences.getShowQuickButtons());
-    config->writeEntry("ShowModeButtons",preferences.getShowModeButtons());
-    config->writeEntry("CloseButtonsOnTabs",preferences.getCloseButtonsOnTabs());
-    config->writeEntry("CloseButtonsAlignRight",preferences.getCloseButtonsAlignRight());
-
-    config->writeEntry("AutoUserhost",preferences.getAutoUserhost());
-
-    config->writeEntry("UseSpacing",preferences.getUseSpacing());
-    config->writeEntry("Spacing",preferences.getSpacing());
-    config->writeEntry("Margin",preferences.getMargin());
-
-    config->writeEntry("UseParagraphSpacing",preferences.getUseParagraphSpacing());
-    config->writeEntry("ParagraphSpacing",preferences.getParagraphSpacing());
-
-    config->writeEntry("ChannelSplitterSizes",preferences.channelSplitterSizes());
-    config->writeEntry("TopicSplitterSizes", preferences.topicSplitterSizes());
-    config->writeEntry("BackgroundImage",preferences.getBackgroundImageName());
-    config->writeEntry("IRCColors", preferences.getIRCColorList());
-    config->writeEntry("NickColors", preferences.getNickColorList());
-    config->writeEntry("ShowTabBarCloseButton", preferences.getShowTabBarCloseButton());
-
-    config->writeEntry("ShowTopic", preferences.getShowTopic());
-    config->writeEntry("ShowNicknameBox", preferences.showNicknameBox());
-
-    config->writeEntry("ShowRememberLineInAllWindows", preferences.getShowRememberLineInAllWindows());
-    config->writeEntry("FocusNewQueries", preferences.getFocusNewQueries());
-    config->writeEntry("FilterColorCodes", preferences.getFilterColors());
-    config->writeEntry("UseColoredNicks", preferences.getUseColoredNicks());
-    config->writeEntry("UseBoldNicks", preferences.getUseBoldNicks());
-    config->writeEntry("UseLiteralModes", preferences.getUseLiteralModes());
-
-    // Colors are now handled in preferences
-
     config->setGroup("Sort Nicknames");
-    config->writeEntry("AdminValue",preferences.getAdminValue());
-    config->writeEntry("OwnerValue",preferences.getOwnerValue());
-    config->writeEntry("OperatorValue",preferences.getOpValue());
-    config->writeEntry("HalfopValue",preferences.getHalfopValue());
-    config->writeEntry("VoiceValue",preferences.getVoiceValue());
-    config->writeEntry("NoRightsValue",preferences.getNoRightsValue());
-    config->writeEntry("SortByStatus",preferences.getSortByStatus());
-    config->writeEntry("SortCaseInsensitive",preferences.getSortCaseInsensitive());
 
     // Clean up identity list
     QStringList identities=config->groupList().grep(QRegExp("Identity [0-9]+"));
     if(identities.count())
     {
-        // remove old identity list from preferences file to keep numbering under control
+        // remove old identity list from Preferences::file to keep numbering under control
         for(unsigned int index=0;index<identities.count();index++)
             config->deleteGroup(identities[index]);
     }
 
-    QValueList<IdentityPtr> identityList = preferences.getIdentityList();
+    QValueList<IdentityPtr> identityList = Preferences::identityList();
     int index = 0;
 
     for(QValueList<IdentityPtr>::iterator it = identityList.begin(); it != identityList.end(); ++it)
@@ -1155,14 +834,9 @@
 
     config->setGroup("Notify List");
 
-    config->writeEntry("NotifyDelay",preferences.getNotifyDelay());
-    config->writeEntry("UseNotify",preferences.getUseNotify());
-    //  config->writeEntry("NotifyList",preferences.getNotifyString());
-    config->writeEntry("OnStartup", preferences.getOpenWatchedNicksAtStartup());
-
     config->deleteGroup("Notify Group Lists");
     config->setGroup("Notify Group Lists");
-    QMap<QString, QStringList> notifyList = preferences.getNotifyList();
+    QMap<QString, QStringList> notifyList = Preferences::notifyList();
     QMapConstIterator<QString, QStringList> groupItEnd = notifyList.constEnd();
 
     for (QMapConstIterator<QString, QStringList> groupIt = notifyList.constBegin();
@@ -1205,7 +879,7 @@
     }
 
     // Add the new servergroups to the config
-    Konversation::ServerGroupList serverGroupList = preferences.serverGroupList();
+    Konversation::ServerGroupList serverGroupList = Preferences::serverGroupList();
     Konversation::ServerGroupList::iterator it;
     index = 0;
     int index2 = 0;
@@ -1282,20 +956,12 @@
 
     for(index=0;index<8;index++)
     {
-        QStringList buttonList(preferences.getButtonList());
+        QStringList buttonList(Preferences::buttonList());
         config->writeEntry(QString("Button%1").arg(index),buttonList[index]);
     }
 
     // Write all highlight entries
-    config->setGroup("Highlight List");
-
-    config->writeEntry("HighlightNick",preferences.getHighlightNick());
-    config->writeEntry("HighlightNickColor",preferences.getHighlightNickColor().name().mid(1));
-    config->writeEntry("HighlightOwnLines",preferences.getHighlightOwnLines());
-    config->writeEntry("HighlightOwnLinesColor",preferences.getHighlightOwnLinesColor().name().mid(1));
-    config->writeEntry("HighlightSoundsEnabled", preferences.getHighlightSoundEnabled());
-
-    QPtrList<Highlight> hiList=preferences.getHighlightList();
+    QPtrList<Highlight> hiList=Preferences::highlightList();
     int i = 0;
 
     for(Highlight* hl = hiList.first(); hl; hl = hiList.next())
@@ -1316,28 +982,10 @@
         i++;
     }
 
-    // OnScreen Display
-    config->setGroup("OSD");
-    config->writeEntry("UseOSD",preferences.getOSDUsage());
-    config->writeEntry("OSDUseCustomColors",preferences.getOSDUseCustomColors());
-    config->writeEntry("ShowOwnNick",preferences.getOSDShowOwnNick());
-    config->writeEntry("ShowChannel",preferences.getOSDShowChannel());
-    config->writeEntry("ShowQuery",preferences.getOSDShowQuery());
-    config->writeEntry("ShowChannelEvent",preferences.getOSDShowChannelEvent());
-    config->writeEntry("OSDFont",preferences.getOSDFont().toString());
-    config->writeEntry("OSDTextColor",preferences.getOSDTextColor().name().mid(1));
-    config->writeEntry("OSDBackgroundColor",preferences.getOSDBackgroundColor().name().mid(1));
-    config->writeEntry("OSDDuration",preferences.getOSDDuration());
-    config->writeEntry("OSDScreen",preferences.getOSDScreen());
-    config->writeEntry("OSDDrawShadow",preferences.getOSDDrawShadow());
-    config->writeEntry("OffsetX",preferences.getOSDOffsetX());
-    config->writeEntry("OffsetY",preferences.getOSDOffsetY());
-    config->writeEntry("Alignment",preferences.getOSDAlignment());
-
     // Ignore List
     config->deleteGroup("Ignore List");
     config->setGroup("Ignore List");
-    QPtrList<Ignore> ignoreList=preferences.getIgnoreList();
+    QPtrList<Ignore> ignoreList=Preferences::ignoreList();
     Ignore* item=ignoreList.first();
     index=0;
     while(item)
@@ -1347,97 +995,20 @@
         index++;
     }
 
-    // Aliases
-    config->setGroup("Aliases");
-    config->writeEntry("AliasList",preferences.getAliasList());
-
-    // Nick Completion
-    config->setGroup("Nick Completion");
-    config->writeEntry("Mode", preferences.getNickCompletionMode());
-    config->writeEntry("SuffixStart",preferences.getNickCompleteSuffixStart());
-    config->writeEntry("SuffixMiddle",preferences.getNickCompleteSuffixMiddle());
-    config->writeEntry("CaseSensitive", preferences.nickCompletionCaseSensitive());
-
-    // DCC Settings
-    config->setGroup("DCC Settings");
-    config->writeEntry("AddPartner",preferences.getDccAddPartner());
-    config->writeEntry("CreateFolder",preferences.getDccCreateFolder());
-    config->writeEntry("AutoGet",preferences.getDccAutoGet());
-    config->writeEntry("AutoResume",preferences.getDccAutoResume());
-
-    config->writeEntry("SendTimeout",preferences.getDccSendTimeout());
-
-    config->writeEntry("MethodToGetOwnIp",preferences.getDccMethodToGetOwnIp());
-    config->writeEntry("SpecificOwnIp",preferences.getDccSpecificOwnIp());
-
-    config->writeEntry("SpecificSendPorts",preferences.getDccSpecificSendPorts());
-    config->writeEntry("SendPortsFirst",preferences.getDccSendPortsFirst());
-    config->writeEntry("SendPortsLast",preferences.getDccSendPortsLast());
-    config->writeEntry("SpecificChatPorts",preferences.getDccSpecificChatPorts());
-    config->writeEntry("ChatPortsFirst",preferences.getDccChatPortsFirst());
-    config->writeEntry("ChatPortsLast",preferences.getDccChatPortsLast());
-
-    config->writeEntry("BufferSize",preferences.getDccBufferSize());
-    config->writeEntry("FastSend",preferences.getDccFastSend());
-
-    config->writeEntry("IPv4Fallback",preferences.getIPv4Fallback());
-    config->writeEntry("IPv4FallbackInterface",preferences.getIPv4FallbackIface());
-
-    // Path Settings
-    config->setGroup("Path Settings");
-    config->writePathEntry("DccPath",preferences.getDccPath());
-    config->writePathEntry("LogfilePath",preferences.getLogPath());
-
-    // Flags
-    config->setGroup("Flags");
-
-    config->writeEntry("Log",preferences.getLog());
-    config->writeEntry("LowerLog",preferences.getLowerLog());
-    config->writeEntry("LogFollowsNick",preferences.getLogFollowsNick());
-
-    config->writeEntry("TabPlacement",static_cast<int>(preferences.getTabPlacement()));
-    config->writeEntry("BlinkingTabs",preferences.getBlinkingTabs());
-    config->writeEntry("BringToFront",preferences.getBringToFront());
-
-    config->writeEntry("HideUnimportantEvents",preferences.getHideUnimportantEvents());
-    config->writeEntry("DisableExpansion",preferences.getDisableExpansion());
-
-    config->writeEntry("AutoReconnect",preferences.getAutoReconnect());
-    config->writeEntry("ReconnectCount",preferences.getReconnectCount());
-    config->writeEntry("AutoRejoin",preferences.getAutoRejoin());
-    config->writeEntry("AutojoinOnInvite",preferences.getAutojoinOnInvite());
-
-    config->writeEntry("FixedMOTD",preferences.getFixedMOTD());
-    config->writeEntry("ShowServerList",preferences.getShowServerList());
-
-    config->writeEntry("InputFieldsBackgroundColor",preferences.getColorInputFields());
-
-    // Web Browser settings
-    config->setGroup("Web Browser Settings");
-    config->writeEntry("UseKdeDefault", preferences.getWebBrowserUseKdeDefault());
-    config->writeEntry("WebBrowserCmd", preferences.getWebBrowserCmd());
-
     // Channel Encodings
     config->setGroup("Channel Encodings");
-    QStringList channelEncodingsServerList=preferences.getChannelEncodingsServerList();
+    QStringList channelEncodingsServerList=Preferences::channelEncodingsServerList();
     channelEncodingsServerList.sort();
     for(unsigned int i=0; i<channelEncodingsServerList.count(); ++i)
     {
-        QStringList channelEncodingsChannelList=preferences.getChannelEncodingsChannelList(channelEncodingsServerList[i]);
+        QStringList channelEncodingsChannelList=Preferences::channelEncodingsChannelList(channelEncodingsServerList[i]);
         channelEncodingsChannelList.sort();
         for(unsigned int j=0; j<channelEncodingsChannelList.count(); ++j)
-            if(!preferences.getChannelEncoding(channelEncodingsServerList[i],channelEncodingsChannelList[j]).isEmpty())
-                config->writeEntry(channelEncodingsServerList[i]+" "+channelEncodingsChannelList[j],preferences.getChannelEncoding(channelEncodingsServerList[i],channelEncodingsChannelList[j]));
+            if(!Preferences::channelEncoding(channelEncodingsServerList[i],channelEncodingsChannelList[j]).isEmpty())
+                config->writeEntry(channelEncodingsServerList[i]+" "+channelEncodingsChannelList[j],Preferences::channelEncoding(channelEncodingsServerList[i],channelEncodingsChannelList[j]));
     }
 
-    // Themes
-    config->setGroup("Themes");
-    config->writeEntry("IconTheme", preferences.getIconTheme());
-    config->writeEntry("EnableEmotIcons", preferences.emotIconsEnabled());
-    config->writeEntry("EmotIconTheme", preferences.emotIconsTheme());
-
     config->sync();
-
     emit prefsChanged();
 
     if(updateGUI) appearanceChanged();
@@ -1453,16 +1024,16 @@
         lookServer->updateFonts();
         lookServer->updateChannelQuickButtons();
 
-        lookServer->setShowQuickButtons(preferences.getShowQuickButtons());
-        lookServer->setShowModeButtons(preferences.getShowModeButtons());
-        lookServer->setShowTopic(preferences.getShowTopic());
-        lookServer->setShowNicknameBox(preferences.showNicknameBox());
+        lookServer->setShowQuickButtons(Preferences::showQuickButtons());
+        lookServer->setShowModeButtons(Preferences::showModeButtons());
+        lookServer->setShowTopic(Preferences::showTopic());
+        lookServer->setShowNicknameBox(Preferences::showNicknameBox());
 
         lookServer=serverList.next();
     }
 
     mainWindow->updateTabPlacement();
-    mainWindow->setShowTabBarCloseButton(preferences.getShowTabBarCloseButton());
+    mainWindow->setShowTabBarCloseButton(Preferences::showTabBarCloseButton());
 }
 
 void KonversationApplication::updateNickIcons()
@@ -1515,27 +1086,84 @@
 
 void KonversationApplication::openPrefsDialog()   // TODO Move this function into KonversationMainWindow
 {
-    if(prefsDialog==0)
-    {
-        prefsDialog = new PrefsDialog(mainWindow, &preferences);
+    //An instance of your dialog could be already created and could be cached, 
+    //in which case you want to display the cached dialog instead of creating 
+    //another one 
+    if ( KConfigDialog::showDialog( "settings" ) ) 
+        return; 
+ 
+    //KConfigDialog didn't find an instance of this dialog, so lets create it : 
+    KConfigDialog* dialog = new KConfigDialog( mainWindow, "settings", Preferences::self(), KDialogBase::TreeList ); 
+    dialog->setShowIconsInTreeList(true);
+    dialog->unfoldTreeList(true);
+    dialog->setFolderIcon(i18n("Appearance"),SmallIcon("looknfeel"));
+    //Appearance/Chat Window
+    ChatWindowAppearance_Config* confChatWindowAppearanceWdg = new ChatWindowAppearance_Config( 0, "ChatWindowAppearance" );
+    dialog->addPage ( confChatWindowAppearanceWdg, i18n("Appearance - Chat Window"), "view_text", i18n("Appearance") );
+    //Appearance/Fonts
+    FontAppearance_Config* confFontAppearanceWdg = new FontAppearance_Config( 0, "FontAppearance" );
+    dialog->addPage ( confFontAppearanceWdg, i18n("Appearance - Fonts"), "fonts", i18n("Appearance") );
+    //Appearance/Themes
+    Theme_Config* confThemeWdg = new Theme_Config( 0, "Theme" );
+    dialog->addPage ( confThemeWdg, i18n("Appearance - Themes"), "iconthemes", i18n("Appearance") );
+    
+    dialog->setFolderIcon(QStringList::split(',', i18n("Behavior")), SmallIcon("configure"));
+    //Behavior/General
+    GeneralBehavior_Config* confGeneralBehaviorWdg = new GeneralBehavior_Config( 0, "GeneralBehavior" );
+    dialog->addPage ( confGeneralBehaviorWdg, i18n("Behavior - General"), "exec", i18n("Behavior") );
+    //Behavior/Connection
+    ConnectionBehavior_Config* confConnectionBehaviorWdg = new ConnectionBehavior_Config( 0, "ConnectionBehavior" );
+    dialog->addPage ( confConnectionBehaviorWdg, i18n("Behavior - Connection"), "connect_creating", i18n("Behavior") );
+    //Behaviour/Nickname List
+    NicklistBehavior_Config* confNicklistBehaviorWdg = new NicklistBehavior_Config( 0, "NicklistBehavior" );
+    dialog->addPage ( confNicklistBehaviorWdg, i18n("Behavior - Nickname List"), "player_playlist" );
+    //Behaviour/Tab Bar
+    TabBar_Config* confTabBarWdg = new TabBar_Config( 0, "TabBar" );
+    dialog->addPage ( confTabBarWdg, i18n("Behaviour - Tab Bar"), "tab_new" );
+    //Behaviour/Command Aliases
+    Alias_Config* confAliasWdg = new Alias_Config( 0, "Alias" );
+    dialog->addPage ( confAliasWdg, i18n("Behaviour - Command Aliases"), "editcopy" );
+     //Behaviour/Quick Buttons
+    QuickButtons_Config* confQuickButtonsWdg = new QuickButtons_Config( 0, "QuickButtons" );
+    dialog->addPage ( confQuickButtonsWdg, i18n("Behaviour - Quick Buttons"), "keyboard" );
+    //Behaviour/Logging
+    Log_Config* confLogWdg = new Log_Config( 0, "Log" );
+    dialog->addPage ( confLogWdg, i18n("Behavior - Logging"), "log" );
 
-        connect(prefsDialog,SIGNAL (cancelClicked()),this,SLOT (closePrefsDialog()) );
-        connect(prefsDialog,SIGNAL (prefsChanged()),this,SLOT (saveOptions()) );
+    //Notification/Watched Nicknames
+    WatchedNicknames_Config* confWatchedNicknamesWdg = new WatchedNicknames_Config( 0, "WatchedNicknames" );
+    dialog->addPage ( confWatchedNicknamesWdg, i18n("Notification - Watched Nicknames"), "kfind" );
+    //Notification/Highlighting
+    Highlight_Config* confHighlightWdg = new Highlight_Config( 0, "Highlight" );
+    dialog->addPage ( confHighlightWdg, i18n("Notification - Highlighting"), "paintbrush" );
+    //Notification/On Screen Display
+    OSD_Config* confOSDWdg = new OSD_Config( 0, "OSD" );
+    dialog->addPage ( confOSDWdg, i18n("Notification - On Screen Display"), "tv" );
 
-        prefsDialog->show();
-    }
-    else
-    {
-        prefsDialog->show();
-        prefsDialog->raise();
-        prefsDialog->setActiveWindow();
-    }
+    //Warning Dialogs
+    Warnings_Config* confWarningsWdg = new Warnings_Config( 0, "Warnings" );
+    dialog->addPage ( confWarningsWdg, i18n("Warning Dialogs"), "messagebox_warning" );
+
+    //Behaviour/Chat Window
+    ChatwindowBehaviour_Config* confChatwindowBehaviourWdg = new ChatwindowBehaviour_Config( 0, "ChatwindowBehaviour" );
+    dialog->addPage ( confChatwindowBehaviourWdg, i18n("Chatwindow Behaviour"), "" );
+   
+    ColorsAppearance_Config* confColorsAppearanceWdg = new ColorsAppearance_Config( 0, "ColorsAppearance" );
+    dialog->addPage ( confColorsAppearanceWdg, i18n("Colors Appearance"), "colorsappearance" );
+   
+    //User edited the configuration - update your local copies of the 
+    //configuration data 
+//    connect( dialog, SIGNAL(settingsChanged()), 
+//             this, SLOT(updateConfiguration()) ); 
+     
+    dialog->show();
+    
 }
 
 void KonversationApplication::openPrefsDialog(Preferences::Pages page)
 {
     openPrefsDialog();
-    prefsDialog->openPage(page);
+    //FIXME - open the right page
 }
 
 void KonversationApplication::openQuickConnectDialog()
@@ -1550,12 +1178,6 @@
     kapp->config()->sync();
 }
 
-void KonversationApplication::closePrefsDialog()
-{
-    delete prefsDialog;
-    prefsDialog=0;
-}
-
 bool KonversationApplication::emitDCOPSig(const QString &appId, const QString &objId, const QString &signal, QByteArray &data)
 {
     kdDebug() << "emitDCOPSig (" << signal << ")" << endl;
@@ -1637,11 +1259,6 @@
     return colorOffSet;
 }
 
-QStringList& KonversationApplication::getColorList()
-{
-    return colorList;
-}
-
 QMap<QString,QString>& KonversationApplication::getColorMap()
 {
     return colorMap;
@@ -1706,3 +1323,5 @@
 }
 
 #include "konversationapplication.moc"
+
+// vim: set et sw=4 ts=4 cino=l1,cs,U1:
Index: src/quickconnectdialog.cpp
===================================================================
--- src/quickconnectdialog.cpp	(revision 454905)
+++ src/quickconnectdialog.cpp	(working copy)
@@ -51,7 +51,7 @@
     QLabel* nickLabel = new QLabel(i18n("&Nick:"), page);
     QString nickWT = i18n("The nick you want to use.");
     QWhatsThis::add(nickLabel, nickWT);
-    nickInput = new KLineEdit(KonversationApplication::preferences.getNickname(0), page);
+    nickInput = new KLineEdit(Preferences::nickname(0), page);
     QWhatsThis::add(nickInput, nickWT);
     nickLabel->setBuddy(nickInput);
 
Index: src/server.cpp
===================================================================
--- src/server.cpp	(revision 454905)
+++ src/server.cpp	(working copy)
@@ -57,7 +57,7 @@
 
 Server::Server(KonversationMainWindow* mainWindow, int id)
 {
-    m_serverGroup = KonversationApplication::preferences.serverGroupById(id);
+    m_serverGroup = Preferences::serverGroupById(id);
     m_serverGroup->clearQuickServerList();        // In case we already did a quick connect to this network
     bot = getIdentity()->getBot();
     botPassword = getIdentity()->getPassword();
@@ -78,7 +78,7 @@
     Konversation::ServerGroupSettingsPtr serverGroupOfServer;
 
     // If server is in an existing group, use that group (first group if server is in multiple groups)
-    if (serverGroupOfServer = KonversationApplication::preferences.serverGroupByServer(hostName))
+    if (serverGroupOfServer = Preferences::serverGroupByServer(hostName))
     {
         m_serverGroup = serverGroupOfServer;
         m_serverGroup->clearQuickServerList();
@@ -87,7 +87,7 @@
     else
     {
         m_serverGroup = new Konversation::ServerGroupSettings;
-        m_serverGroup->setIdentityId(KonversationApplication::preferences.getIdentityByName("Default")->id());
+        m_serverGroup->setIdentityId(Preferences::identityByName("Default")->id());
         m_serverGroup->setName(hostName);
         m_serverGroup->addServer(m_quickServer);
     }
@@ -194,8 +194,8 @@
     channelPrefixes = "#&";
 
     timerInterval = 1;                            // flood protection
-    autoRejoin = KonversationApplication::preferences.getAutoRejoin();
-    autoReconnect = KonversationApplication::preferences.getAutoReconnect();
+    autoRejoin = Preferences::autoRejoin();
+    autoReconnect = Preferences::autoReconnect();
 
     setName(QString("server_" + m_serverGroup->name()).ascii());
     setMainWindow(mainWindow);
@@ -204,7 +204,7 @@
     setNickname(nick);
     obtainNickInfo(getNickname());
 
-    if(KonversationApplication::preferences.getRawLog())
+    if(Preferences::rawLog())
         addRawLog(false);
 
     inputFilter.setServer(this);
@@ -672,7 +672,7 @@
     {
         ++reconnectCounter;
 
-        if (autoReconnect && reconnectCounter <= KonversationApplication::preferences.getReconnectCount())
+        if (autoReconnect && reconnectCounter <= Preferences::reconnectCount())
         {
             QString error = i18n("Connection to Server %1 lost: %2. Trying to reconnect.")
                 .arg(m_serverGroup->serverByIndex(m_currentServerIndex).server())
@@ -684,7 +684,7 @@
             QTimer::singleShot(5000,this,SLOT(connectToIRCServer()));
             rejoinChannels = true;
         }
-        else if ((!autoReconnect || reconnectCounter >= KonversationApplication::preferences.getReconnectCount()))
+        else if ((!autoReconnect || reconnectCounter >= Preferences::reconnectCount()))
         {
             QString error = i18n("Connection to Server %1 failed: %2.")
                 .arg(m_serverGroup->serverByIndex(m_currentServerIndex).server())
@@ -824,7 +824,7 @@
 
 void Server::quitServer()
 {
-    QString command(KonversationApplication::preferences.getCommandChar()+"QUIT");
+    QString command(Preferences::commandChar()+"QUIT");
     Konversation::OutputFilterResult result = outputFilter->parse(getNickname(),command, QString::null);
     kdDebug() << "in quitServer()" << endl;
     queue(result.toServer);
@@ -833,7 +833,7 @@
 void Server::notifyAction(const QString& nick)
 {
     // parse wildcards (toParse,nickname,channelName,nickList,parameter)
-    QString out = parseWildcards(KonversationApplication::preferences.getNotifyDoubleClickAction(),
+    QString out = parseWildcards(Preferences::notifyDoubleClickAction(),
         getNickname(),
         QString::null,
         QString::null,
@@ -919,7 +919,7 @@
 
     if(msec == 0)
                                                   // msec!
-        msec = KonversationApplication::preferences.getNotifyDelay()*1000;
+        msec = Preferences::notifyDelay()*1000;
 
     // start the timer in one shot mode
     notifyTimer.start(msec,true);
@@ -939,7 +939,7 @@
     bool sent = false;
 
     // Notify delay time is over, send ISON request if desired
-    if(KonversationApplication::preferences.getUseNotify())
+    if(Preferences::useNotify())
     {
         // But only if there actually are nicks in the notify list
         QString list = getISONListString();
@@ -969,8 +969,8 @@
     {
         currentLag = checkTime;
         emit tooLongLag(this,checkTime);
-        if(KonversationApplication::preferences.getAutoReconnect() &&
-            (checkTime/1000) == KonversationApplication::preferences.getMaximumLagTime())
+        if(Preferences::autoReconnect() &&
+            (checkTime/1000) == Preferences::maximumLagTime())
         {
             m_socket->close();
         }
@@ -1150,7 +1150,7 @@
             QString channelEncoding;
             if( !channelKey.isEmpty() )
             {
-                channelEncoding = KonversationApplication::preferences.getChannelEncoding(getServerGroup(), channelKey);
+                channelEncoding = Preferences::channelEncoding(getServerGroup(), channelKey);
             }
             // END set channel encoding if specified
 
@@ -1259,7 +1259,7 @@
             outputLineSplit[0]=="KICK" ||
             outputLineSplit[0]=="PART" ||
             outputLineSplit[0]=="TOPIC")
-                channelCodecName=KonversationApplication::preferences.getChannelEncoding(getServerGroup(),outputLineSplit[1]);
+                channelCodecName=Preferences::channelEncoding(getServerGroup(),outputLineSplit[1]);
 
         // init stream props
         serverStream.setEncoding(QTextStream::Locale);
@@ -1309,9 +1309,9 @@
 
 void Server::dcopRaw(const QString& command)
 {
-    if(command.startsWith(KonversationApplication::preferences.getCommandChar()))
+    if(command.startsWith(Preferences::commandChar()))
     {
-        queue(command.section(KonversationApplication::preferences.getCommandChar(), 1));
+        queue(command.section(Preferences::commandChar(), 1));
     }
     else
         queue(command);
@@ -1532,7 +1532,7 @@
 
     if(followDccSetting)
     {
-        int methodId = KonversationApplication::preferences.getDccMethodToGetOwnIp();
+        int methodId = Preferences::dccMethodToGetOwnIp();
 
         if(methodId == 1)                         // Reply from IRC server
         {
@@ -1548,9 +1548,9 @@
             }
         }
                                                   // user specifies
-        else if(methodId == 2 && !KonversationApplication::preferences.getDccSpecificOwnIp().isEmpty())
+        else if(methodId == 2 && !Preferences::dccSpecificOwnIp().isEmpty())
         {
-            KNetwork::KResolverResults res = KNetwork::KResolver::resolve(KonversationApplication::preferences.getDccSpecificOwnIp(), "");
+            KNetwork::KResolverResults res = KNetwork::KResolver::resolve(Preferences::dccSpecificOwnIp(), "");
             if(res.error() == KResolver::NoError && res.size() > 0)
             {
                 kdDebug() << "Server::getIp(): using IP specified by user" << endl;
@@ -1623,7 +1623,7 @@
     if(channelToClose)
     {
         Konversation::OutputFilterResult result = outputFilter->parse(getNickname(),
-            KonversationApplication::preferences.getCommandChar() + "PART", name);
+            Preferences::commandChar() + "PART", name);
         queue(result.toServer);
     }
 }
@@ -1795,7 +1795,7 @@
 
     DccTransferRecv* newDcc=new DccTransferRecv( getMainWindow()->getDccPanel(),
         sourceNick,
-        KURL(KonversationApplication::preferences.getDccPath()),
+        KURL(Preferences::dccPath()),
         dccArguments[0],                          // name
                                                   // size
         dccArguments[3].isEmpty() ? 0 : dccArguments[3].toULong(),
@@ -1819,7 +1819,7 @@
     connect(newDcc,SIGNAL (statusChanged(const DccTransfer* )), this,
         SLOT(dccStatusChanged(const DccTransfer*)) );
 
-    if(KonversationApplication::preferences.getDccAutoGet()) newDcc->start();
+    if(Preferences::dccAutoGet()) newDcc->start();
 }
 
 void Server::requestKonsolePanel()
@@ -1956,7 +1956,7 @@
 void Server::sendJoinCommand(const QString& name, const QString& password)
 {
     Konversation::OutputFilterResult result = outputFilter->parse(getNickname(),
-        KonversationApplication::preferences.getCommandChar() + "JOIN " + name + " " + password, QString::null);
+        Preferences::commandChar() + "JOIN " + name + " " + password, QString::null);
     queue(result.toServer);
 }
 
@@ -2057,7 +2057,7 @@
     Channel* channel=channelList.first();
     while(channel)
     {
-        channel->updateQuickButtons(KonversationApplication::preferences.getButtonList());
+        channel->updateQuickButtons(Preferences::buttonList());
         channel=channelList.next();
     }
 }
@@ -2921,7 +2921,7 @@
 
 void Server::invitation(const QString& nick,const QString& channel)
 {
-    if(KonversationApplication::preferences.getAutojoinOnInvite() &&
+    if(Preferences::autojoinOnInvite() &&
         KMessageBox::questionYesNo(mainWindow,
         i18n("You were invited by %1 to join channel %2. "
         "Do you accept the invitation?").arg(nick).arg(channel),
@@ -3127,7 +3127,7 @@
 {
     if(command == "away" || command == "back")    //back is the same as away, since paramater is ""
     {
-        QString str = KonversationApplication::preferences.getCommandChar() + command;
+        QString str = Preferences::commandChar() + command;
 
                                                   //you cant have a message with 'back'
         if(!parameter.isEmpty() && command == "away")
@@ -3142,7 +3142,7 @@
     }
     else
     {
-        sendToAllChannelsAndQueries(KonversationApplication::preferences.getCommandChar() + command + " " + parameter);
+        sendToAllChannelsAndQueries(Preferences::commandChar() + command + " " + parameter);
     }
 }
 
Index: src/multilineedit.cpp
===================================================================
--- src/multilineedit.cpp	(revision 454905)
+++ src/multilineedit.cpp	(working copy)
@@ -39,13 +39,13 @@
 
     dialogLayout->addWidget(textEditor);
 
-    setInitialSize(KonversationApplication::preferences.getMultilineEditSize());
+    setInitialSize(Preferences::multilineEditSize());
     show();
 }
 
 MultilineEdit::~MultilineEdit()
 {
-    KonversationApplication::preferences.setMultilineEditSize(size());
+    Preferences::setMultilineEditSize(size());
 }
 
 void MultilineEdit::slotCancel()
Index: src/prefspagechatwinbehavior.h
===================================================================
--- src/prefspagechatwinbehavior.h	(revision 454905)
+++ src/prefspagechatwinbehavior.h	(working copy)
@@ -1,33 +0,0 @@
-/*
-  This program is free software; you can redistribute it and/or modify
-  it under the terms of the GNU General Public License as published by
-  the Free Software Foundation; either version 2 of the License, or
-  (at your option) any later version.
-*/
-
-/*
-  prefspagebehaviour.h  -  The preferences panel that holds the behaviour settings
-  copyright: (C) 2002 by Dario Abatianni
-             (C) 2004 by Peter Simonsson
-*/
-#ifndef PREFSPAGECHATWINBEHAVIOR_H
-#define PREFSPAGECHATWINBEHAVIOR_H
-
-#include "chatwindowbehaviour_preferences.h"
-
-class QWidget;
-class Preferences;
-
-class PrefsPageChatWinBehavior : public ChatwindowBehaviour_Config
-{
-    Q_OBJECT
-        public:
-        PrefsPageChatWinBehavior(QWidget* newParent, Preferences* newPreferences);
-        ~PrefsPageChatWinBehavior();
-    public slots:
-        void applyPreferences();
-
-    private:
-        Preferences* preferences;
-};
-#endif
Index: src/common.cpp
===================================================================
--- src/common.cpp	(revision 454905)
+++ src/common.cpp	(working copy)
@@ -50,12 +50,12 @@
         // timer.start();
 
         QString filteredLine = text;
-        QString linkColor = KonversationApplication::preferences.getColor("LinkMessage");
+        QString linkColor = Preferences::color(Preferences::Hyperlink).name();
         QString link;
 
         if(useCustomColor)
         {
-            link = "\\1<font color=\"#"+linkColor+"\"><a href=\"#\\2\">\\2</a></font>";
+            link = "\\1<font color=\""+linkColor+"\"><a href=\"#\\2\">\\2</a></font>";
         }
         else
         {
@@ -78,7 +78,7 @@
 
         if(useCustomColor)
         {
-            link = "<font color=\"#" + linkColor + "\"><u><a href=\"%1%2\">%3</a></u></font>";
+            link = "<font color=\"" + linkColor + "\"><u><a href=\"%1%2\">%3</a></u></font>";
         }
         else
         {
@@ -114,16 +114,16 @@
         }
 
         // Make [[foo]] a link to $wikiurl
-        QString wikiUrl = KonversationApplication::preferences.getWikiUrl();
-        bool expandWikiUrl = KonversationApplication::preferences.getExpandWikiUrl();
+        QString wikiUrl = Preferences::wikiURL();
+        bool expandWikiUrl = Preferences::expandWikiUrl();
 
         QRegExp wikipedia("\\[\\[([^\\]]+)\\]\\]");
         wikipedia.setMinimal(true);
 
         if(expandWikiUrl)
-            filteredLine.replace(wikipedia,"<font color=\"#" + linkColor + "\"><a href=\""+wikiUrl+"\\1\"><u>"+wikiUrl+"\\1</u></a></font>");
+            filteredLine.replace(wikipedia,"<font color=\"" + linkColor + "\"><a href=\""+wikiUrl+"\\1\"><u>"+wikiUrl+"\\1</u></a></font>");
         else
-            filteredLine.replace(wikipedia,"<font color=\"#" + linkColor + "\"><a href=\""+wikiUrl+"\\1\">[[<u>\\1</u>]]</a></font>");
+            filteredLine.replace(wikipedia,"<font color=\"" + linkColor + "\"><a href=\""+wikiUrl+"\\1\">[[<u>\\1</u>]]</a></font>");
 
         // kdDebug() << "Took (msecs) : " << timer.elapsed() << " for " << filteredLine << endl;
         return filteredLine;
Index: src/dccchat.cpp
===================================================================
--- src/dccchat.cpp	(revision 454905)
+++ src/dccchat.cpp	(working copy)
@@ -111,12 +111,12 @@
     m_listenSocket->setFamily(KNetwork::KResolver::InetFamily);
 
                                                   // user specifies ports
-    if(KonversationApplication::preferences.getDccSpecificChatPorts())
+    if(Preferences::dccSpecificChatPorts())
     {
         // set port
         bool found = false;                       // wheter succeeded to set port
-        unsigned long port = KonversationApplication::preferences.getDccChatPortsFirst();
-        for( ; port <= KonversationApplication::preferences.getDccChatPortsLast() ; ++port )
+        unsigned long port = Preferences::dccChatPortsFirst();
+        for( ; port <= Preferences::dccChatPortsLast() ; ++port )
         {
             kdDebug() << "DccChat::listenForPartner(): trying port " << port << endl;
             m_listenSocket->setAddress(QString::number(port));
@@ -263,7 +263,7 @@
     kdDebug() << k_funcinfo << " BEGIN" << endl;
     // create a work copy
     QString output(sendLine);
-    QString cc=KonversationApplication::preferences.getCommandChar();
+    QString cc=Preferences::commandChar();
 
     if(!output.isEmpty())
     {
Index: src/nicklistviewitem.cpp
===================================================================
--- src/nicklistviewitem.cpp	(revision 454905)
+++ src/nicklistviewitem.cpp	(working copy)
@@ -131,7 +131,7 @@
     {
         return nick->getNickInfo()->getNickname() + " (" + addressee.realName() + ")";
     }
-    else if(KonversationApplication::preferences.getShowRealNames() && !nick->getNickInfo()->getRealName().isEmpty())
+    else if(Preferences::showRealNames() && !nick->getNickInfo()->getRealName().isEmpty())
     {
         return nick->getNickInfo()->getNickname() + " (" + nick->getNickInfo()->getRealName() + ")";
     }
@@ -148,7 +148,7 @@
 {
     NickListViewItem* otherItem = static_cast<NickListViewItem*>(item);
 
-    if(KonversationApplication::preferences.getSortByStatus())
+    if(Preferences::sortByStatus())
     {
         int thisFlags = getFlags();
         int otherFlags = otherItem->getFlags();
@@ -168,7 +168,7 @@
 
     if(col > 1)
     {
-        if(KonversationApplication::preferences.getSortCaseInsensitive())
+        if(Preferences::sortCaseInsensitive())
         {
             thisKey = thisKey.lower();
             otherKey = otherKey.lower();
@@ -181,7 +181,7 @@
     }
     else if(col == 1)
     {
-        if(KonversationApplication::preferences.getSortCaseInsensitive())
+        if(Preferences::sortCaseInsensitive())
         {
             thisKey = nick->loweredNickname();
             otherKey = otherItem->getNick()->loweredNickname();
@@ -215,27 +215,27 @@
 
     if(nick->isAdmin())
     {
-        flags = KonversationApplication::preferences.getAdminValue();
+        flags = Preferences::adminValue();
     }
     else if(nick->isOwner())
     {
-        flags = KonversationApplication::preferences.getOwnerValue();
+        flags = Preferences::ownerValue();
     }
     else if(nick->isOp())
     {
-        flags = KonversationApplication::preferences.getOpValue();
+        flags = Preferences::opValue();
     }
     else if(nick->isHalfop())
     {
-        flags = KonversationApplication::preferences.getHalfopValue();
+        flags = Preferences::halfopValue();
     }
     else if(nick->hasVoice())
     {
-        flags = KonversationApplication::preferences.getVoiceValue();
+        flags = Preferences::voiceValue();
     }
     else
     {
-        flags = KonversationApplication::preferences.getNoRightsValue();
+        flags = Preferences::noRightsValue();
     }
 
     return flags;
Index: src/urlcatcher.cpp
===================================================================
--- src/urlcatcher.cpp	(revision 454905)
+++ src/urlcatcher.cpp	(working copy)
@@ -140,13 +140,13 @@
 void UrlCatcher::openUrl(QListViewItem* item)
 {
     QString url = item->text(1);
-    if (KonversationApplication::preferences.getWebBrowserUseKdeDefault() || url.lower().startsWith("mailto:") )
+    if (Preferences::webBrowserUseKdeDefault() || url.lower().startsWith("mailto:") )
     {
         new KRun(KURL(url));
     }
     else
     {
-        QString cmd = KonversationApplication::preferences.getWebBrowserCmd();
+        QString cmd = Preferences::webBrowserCmd();
         cmd.replace("%u", url);
         KProcess *proc = new KProcess;
         QStringList cmdAndArgs = KShell::splitArgs(cmd);
Index: src/prefsdialog.h
===================================================================
--- src/prefsdialog.h	(revision 454905)
+++ src/prefsdialog.h	(working copy)
@@ -59,8 +59,6 @@
         void slotAboutToShowPage(QWidget* page);
 
     protected:
-        Preferences* preferences;
-
         PrefsPageTabBehavior*     tabBehaviorPage;
         PrefsPageButtons*         buttonsPage;
         PrefsPageNotify*          notifyPage;
@@ -81,7 +79,5 @@
         QWidget* OSDPane;
 
         QWidget* lastPane;
-
-        void setPreferences(Preferences* newPrefs);
 };
 #endif
Index: src/inputfilter.cpp
===================================================================
--- src/inputfilter.cpp	(revision 454905)
+++ src/inputfilter.cpp	(working copy)
@@ -230,9 +230,9 @@
                     }
 
                     QString reply;
-                    if(KonversationApplication::preferences.getCustomVersionReplyEnabled())
+                    if(Preferences::customVersionReplyEnabled())
                     {
-                        reply = KonversationApplication::preferences.getCustomVersionReply().stripWhiteSpace();
+                        reply = Preferences::customVersionReply().stripWhiteSpace();
                     }
                     else
                     {
@@ -735,7 +735,7 @@
                     }
                 }                                 // endfor
                 if(!modesAre.isEmpty())
-                    if (KonversationApplication::preferences.getUseLiteralModes())
+                    if (Preferences::useLiteralModes())
                 {
                     server->appendCommandMessageToChannel(parameterList[1],i18n("Mode"),message);
                 }
@@ -1485,7 +1485,7 @@
         }
     }                                             // endfor
 
-    if (KonversationApplication::preferences.getUseLiteralModes())
+    if (Preferences::useLiteralModes())
     {
         server->appendCommandMessageToChannel(parameterList[0],i18n("Mode"),message);
     }
@@ -1505,7 +1505,7 @@
 {
     bool doIgnore=false;
 
-    QPtrList<Ignore> list=KonversationApplication::preferences.getIgnoreList();
+    QPtrList<Ignore> list=Preferences::ignoreList();
 
     for(unsigned int index=0;index<list.count();index++)
     {
Index: src/chatwindow.cpp
===================================================================
--- src/chatwindow.cpp	(revision 454905)
+++ src/chatwindow.cpp	(working copy)
@@ -132,7 +132,7 @@
 {
     Q_ASSERT(textView);  if(!textView) return;
     kdDebug() << "Inserting remember line" << endl;
-    textView->appendRaw("<br><hr color=\"#"+KonversationApplication::preferences.getColor("CommandMessage")+"\" noshade>", true, true);
+    textView->appendRaw("<br><hr color=\""+Preferences::color(Preferences::CommandMessage).name()+"\" noshade>", true, true);
 }
 
 void ChatWindow::appendRaw(const QString& message, bool suppressTimestamps)
@@ -182,14 +182,14 @@
 {
     QDir logPath=QDir::home();
     // Try to "cd" into the logfile path
-    if(!logPath.cd(KonversationApplication::preferences.getLogPath(),true))
+    if(!logPath.cd(Preferences::logfilePath(),true))
     {
         // Only create log path if logging is enabled
         if(log)
         {
             // Try to create the logfile path and "cd" into it again
-            logPath.mkdir(KonversationApplication::preferences.getLogPath(),true);
-            logPath.cd(KonversationApplication::preferences.getLogPath(),true);
+            logPath.mkdir(Preferences::logfilePath(),true);
+            logPath.cd(Preferences::logfilePath(),true);
         }
     }
 
@@ -311,16 +311,16 @@
 
 int ChatWindow::spacing()
 {
-    if(KonversationApplication::preferences.getUseSpacing())
-        return KonversationApplication::preferences.getSpacing();
+    if(Preferences::useSpacing())
+        return Preferences::spacing();
     else
         return KDialog::spacingHint();
 }
 
 int ChatWindow::margin()
 {
-    if(KonversationApplication::preferences.getUseSpacing())
-        return KonversationApplication::preferences.getMargin();
+    if(Preferences::useSpacing())
+        return Preferences::margin();
     else
         return 0;
 }
@@ -428,7 +428,7 @@
     switch(type)
     {
         case Konversation::tnfNick:
-            colorString = KonversationApplication::preferences.getHighlightNickColor().name();
+            colorString = Preferences::highlightNickColor();
             break;
 
         case Konversation::tnfHighlight:
Index: src/channel.cpp
===================================================================
--- src/channel.cpp	(revision 454905)
+++ src/channel.cpp	(working copy)
@@ -174,8 +174,8 @@
     topicLayout->setRowStretch(1, 10);
     topicLayout->setColStretch(1, 10);
 
-    showTopic(KonversationApplication::preferences.getShowTopic());
-    showModeButtons(KonversationApplication::preferences.getShowModeButtons());
+    showTopic(Preferences::showTopic());
+    showModeButtons(Preferences::showModeButtons());
 
     // (this) The main Box, holding the channel view/topic and the input line
     m_horizSplitter = new QSplitter(m_vertSplitter);
@@ -203,7 +203,7 @@
     nicknameListView->addColumn(QString::null);
     nicknameListView->setColumnWidthMode(1,KListView::Maximum);
 
-    if (KonversationApplication::preferences.getAutoUserhost())
+    if (Preferences::autoUserhost())
     {
         nicknameListView->addColumn(QString::null);
         nicknameListView->setColumnWidthMode(2,KListView::Maximum);
@@ -223,7 +223,7 @@
     // the grid that holds the quick action buttons
     buttonsGrid = new QGrid(2, nickListButtons);
     // set hide() or show() on grid
-    showQuickButtons(KonversationApplication::preferences.getShowQuickButtons());
+    showQuickButtons(Preferences::showQuickButtons());
 
     for(int index = 0; index < 8; index++)
     {
@@ -234,7 +234,7 @@
         connect(newQuickButton, SIGNAL(clicked(const QString &)), this, SLOT(quickButtonClicked(const QString &)));
     }
 
-    updateQuickButtons(KonversationApplication::preferences.getButtonList());
+    updateQuickButtons(Preferences::buttonList());
 
     // The box holding the Nickname button and Channel input
     commandLineBox = new QHBox(this);
@@ -242,11 +242,11 @@
 
     nicknameCombobox = new QComboBox(commandLineBox);
     nicknameCombobox->setEditable(true);
-    nicknameCombobox->insertStringList(KonversationApplication::preferences.getNicknameList());
+    nicknameCombobox->insertStringList(Preferences::nicknameList());
     QWhatsThis::add(nicknameCombobox, i18n("<qt>This shows your current nick, and any alternatives you have set up.  If you select or type in a different nickname, then a request will be sent to the IRC server to change your nick.  If the server allows it, the new nickname will be selected.  If you type in a new nickname, you need to press 'Enter' at the end.<p>You can add change the alternative nicknames from the <em>Identities</em> option in the <em>File</em> menu.</qt>"));
     oldNick = nicknameCombobox->currentText();
 
-    setShowNicknameBox(KonversationApplication::preferences.showNicknameBox());
+    setShowNicknameBox(Preferences::showNicknameBox());
 
     awayLabel = new QLabel(i18n("(away)"), commandLineBox);
     awayLabel->hide();
@@ -284,7 +284,7 @@
     getTextView()->setSizePolicy(greedy);
     nicknameListView->setSizePolicy(hmodest);
     // remember alternate background color
-    abgCache=nicknameListView->alternateBackground().name();
+    abgCache=nicknameListView->alternateBackground();
 
     connect(channelInput,SIGNAL (submit()),this,SLOT (channelTextEntered()) );
     connect(channelInput,SIGNAL (envelopeCommand()),this,SLOT (channelPassthroughCommand()) );
@@ -311,19 +311,19 @@
     nicknameList.setAutoDelete(true);             // delete items when they are removed
 
     updateFonts();
-    setLog(KonversationApplication::preferences.getLog());
+    setLog(Preferences::log());
 
     connect(&userhostTimer,SIGNAL (timeout()),this,SLOT (autoUserhost()));
-    connect(&KonversationApplication::preferences,SIGNAL (autoUserhostChanged(bool)),this,SLOT (autoUserhostChanged(bool)));
+    connect(Preferences::self(), SIGNAL (autoUserhostChanged(bool)),this,SLOT (autoUserhostChanged(bool)));
 
     // every few seconds try to get more userhosts
-    autoUserhostChanged(KonversationApplication::preferences.getAutoUserhost());
+    autoUserhostChanged(Preferences::autoUserhost());
     userhostTimer.start(10000);
 
     m_firstAutoWhoDone = false;
     connect(&m_whoTimer,SIGNAL (timeout()),this,SLOT (autoWho()));
     // re-schedule when the settings were changed
-    connect(&KonversationApplication::preferences,SIGNAL (autoContinuousWhoChanged()),this,SLOT (scheduleAutoWho()));
+    connect(Preferences::self(), SIGNAL (autoContinuousWhoChanged()),this,SLOT (scheduleAutoWho()));
 
     m_allowNotifications = true;
 
@@ -394,7 +394,7 @@
         for(unsigned int index=0;index<multiline.count();index++)
         {
             QString line=multiline[index];
-            QString cChar(KonversationApplication::preferences.getCommandChar());
+            QString cChar(Preferences::commandChar());
             // make sure that lines starting with command char get escaped
             if(line.startsWith(cChar)) line=cChar+line;
             sendChannelText(line);
@@ -415,7 +415,7 @@
 void Channel::popupCommand(int id)
 {
     QString pattern;
-    QString cc=KonversationApplication::preferences.getCommandChar();
+    QString cc=Preferences::commandChar();
     bool raw=false;
 
     QString args;
@@ -507,7 +507,7 @@
         case Konversation::Ping:
         {
             unsigned int time_t = QDateTime::currentDateTime().toTime_t();
-            pattern=QString(KonversationApplication::preferences.getCommandChar()+"CTCP %u PING %1").arg(time_t);
+            pattern=QString(Preferences::commandChar()+"CTCP %u PING %1").arg(time_t);
         }
         break;
         case Konversation::Kick:
@@ -601,7 +601,7 @@
     if(item)
     {
         // TODO: put the quick button code in another function to make reusal more legitimate
-        quickButtonClicked(KonversationApplication::preferences.getChannelDoubleClickAction());
+        quickButtonClicked(Preferences::channelDoubleClickAction());
     }
 }
 
@@ -629,7 +629,7 @@
     // If the cursor is at beginning of line, insert last completion
     if(pos == 0 && !channelInput->lastCompletion().isEmpty())
     {
-        QString addStart(KonversationApplication::preferences.getNickCompleteSuffixStart());
+        QString addStart(Preferences::nickCompleteSuffixStart());
         newLine = channelInput->lastCompletion() + addStart;
         // New cursor position is behind nickname
         pos = newLine.length();
@@ -659,18 +659,18 @@
             QString foundNick;
 
             // try to find matching nickname in list of names
-            if(KonversationApplication::preferences.getNickCompletionMode() == 1 ||
-                KonversationApplication::preferences.getNickCompletionMode() == 2)
+            if(Preferences::nickCompletionMode() == 1 ||
+                Preferences::nickCompletionMode() == 2)
             {                                     // Shell like completion
                 QStringList found;
                 foundNick = nicknameList.completeNick(pattern, complete, found,
-                    (KonversationApplication::preferences.getNickCompletionMode() == 2),
-                    KonversationApplication::preferences.nickCompletionCaseSensitive(),
+                    (Preferences::nickCompletionMode() == 2),
+                    Preferences::nickCompletionCaseSensitive(),
                     getOwnChannelNick()->getNickname());
 
                 if(!complete && !found.isEmpty())
                 {
-                    if(KonversationApplication::preferences.getNickCompletionMode() == 1)
+                    if(Preferences::nickCompletionMode() == 1)
                     {
                         QString nicksFound = found.join(" ");
                         appendServerMessage(i18n("Completion"),i18n("Possible completions: %1.").arg(nicksFound));
@@ -681,10 +681,10 @@
                     }
                 }
             }                                     // Cycle completion
-            else if(KonversationApplication::preferences.getNickCompletionMode() == 0)
+            else if(Preferences::nickCompletionMode() == 0)
             {
                 complete = true;
-                QString prefixCharacter = KonversationApplication::preferences.getPrefixCharacter();
+                QString prefixCharacter = Preferences::prefixCharacter();
                 do
                 {
                     QString lookNick=nicknameList.at(completionPosition)->getNickname();
@@ -694,7 +694,7 @@
                         lookNick = lookNick.section( prefixCharacter,1 );
                     }
 
-                    if(lookNick.startsWith(pattern, KonversationApplication::preferences.nickCompletionCaseSensitive()))
+                    if(lookNick.startsWith(pattern, Preferences::nickCompletionCaseSensitive()))
                     {
                         foundNick=lookNick;
                     }
@@ -723,7 +723,7 @@
                 if(pos && complete)
                 {
                     channelInput->setLastCompletion(foundNick);
-                    QString addMiddle(KonversationApplication::preferences.getNickCompleteSuffixMiddle());
+                    QString addMiddle(Preferences::nickCompleteSuffixMiddle());
                     newLine.insert(pos,foundNick+addMiddle);
                     pos=pos+foundNick.length()+addMiddle.length();
                 }
@@ -731,7 +731,7 @@
                 else if(complete)
                 {
                     channelInput->setLastCompletion(foundNick);
-                    QString addStart(KonversationApplication::preferences.getNickCompleteSuffixStart());
+                    QString addStart(Preferences::nickCompleteSuffixStart());
                     newLine.insert(pos,foundNick+addStart);
                     pos=pos+foundNick.length()+addStart.length();
                 }
@@ -802,7 +802,7 @@
 
 void Channel::channelPassthroughCommand()
 {
-    QString commandChar = KonversationApplication::preferences.getCommandChar();
+    QString commandChar = Preferences::commandChar();
     QString line = channelInput->text();
 
     channelInput->clear();
@@ -1611,7 +1611,7 @@
             break;
     }
 
-    if(!message.isEmpty() && !KonversationApplication::preferences.getUseLiteralModes())
+    if(!message.isEmpty() && !Preferences::useLiteralModes())
     {
         appendCommandMessage(i18n("Mode"),message);
     }
@@ -1777,14 +1777,14 @@
 
     QValueList<int> horizSizes, vertSizes;
 
-    horizSizes = KonversationApplication::preferences.channelSplitterSizes();
-    vertSizes = KonversationApplication::preferences.topicSplitterSizes();
+    horizSizes = Preferences::channelSplitterSizes();
+    vertSizes = Preferences::topicSplitterSizes();
 
     if (horizSizes.isEmpty())
     {
         int listWidth = nicknameListView->columnWidth(0) + nicknameListView->columnWidth(1);
         horizSizes << (width() - listWidth) << listWidth;
-        KonversationApplication::preferences.setChannelSplitterSizes(horizSizes);
+        Preferences::setChannelSplitterSizes(horizSizes);
     }
 
     if (vertSizes.isEmpty())
@@ -1798,52 +1798,48 @@
 
 void Channel::updateFonts()
 {
-    nicknameCombobox->setFont(KonversationApplication::preferences.getTextFont());
+    nicknameCombobox->setFont(Preferences::textFont());
 
-    QString fgString;
-    QString bgString;
-    QString abgString;
+    QColor fg;
+    QColor bg;
+    QColor abg;
 
-    if(KonversationApplication::preferences.getColorInputFields())
+    if(Preferences::inputFieldsBackgroundColor())
     {
-        fgString="#"+KonversationApplication::preferences.getColor("ChannelMessage");
-        bgString="#"+KonversationApplication::preferences.getColor("TextViewBackground");
-        abgString="#"+KonversationApplication::preferences.getColor("AlternateBackground");
+        fg=Preferences::color(Preferences::ChannelMessage);
+        bg=Preferences::color(Preferences::TextViewBackground);
+        abg=Preferences::color(Preferences::AlternateBackground);
     }
     else
     {
-        fgString=colorGroup().foreground().name();
-        bgString=colorGroup().base().name();
+        fg=colorGroup().foreground();
+        bg=colorGroup().base();
         // get alternate background color from cache
-        abgString=abgCache;
+        abg=abgCache;
     }
 
-    const QColor fg(fgString);
-    const QColor bg(bgString);
-    const QColor abg(abgString);
-
     channelInput->setPaletteForegroundColor(fg);
     channelInput->setPaletteBackgroundColor(bg);
-    channelInput->setFont(KonversationApplication::preferences.getTextFont());
+    channelInput->setFont(Preferences::textFont());
 
     limit->setPaletteForegroundColor(fg);
     limit->setPaletteBackgroundColor(bg);
-    limit->setFont(KonversationApplication::preferences.getTextFont());
+    limit->setFont(Preferences::textFont());
 
     //topicLine->lineEdit()->setPaletteForegroundColor(fg);
     //topicLine->lineEdit()->setPaletteBackgroundColor(bg);
-    topicLine->setFont(KonversationApplication::preferences.getTextFont());
+    topicLine->setFont(Preferences::textFont());
 
-    getTextView()->setFont(KonversationApplication::preferences.getTextFont());
+    getTextView()->setFont(Preferences::textFont());
 
-    if(KonversationApplication::preferences.getShowBackgroundImage())
+    if(Preferences::showBackgroundImage())
     {
-        getTextView()->setViewBackground(KonversationApplication::preferences.getColor("TextViewBackground"),
-            KonversationApplication::preferences.getBackgroundImageName());
+        getTextView()->setViewBackground(Preferences::color(Preferences::TextViewBackground),
+            Preferences::backgroundImage());
     }
     else
     {
-        getTextView()->setViewBackground(KonversationApplication::preferences.getColor("TextViewBackground"),
+        getTextView()->setViewBackground(Preferences::color(Preferences::TextViewBackground),
             QString::null);
     }
 
@@ -1852,7 +1848,7 @@
     nicknameListView->setPaletteForegroundColor(fg);
     nicknameListView->setPaletteBackgroundColor(bg);
     nicknameListView->setAlternateBackground(abg);
-    nicknameListView->setFont(KonversationApplication::preferences.getListFont());
+    nicknameListView->setFont(Preferences::listFont());
 }
 
 void Channel::updateStyleSheet()
@@ -1963,7 +1959,7 @@
 
 void Channel::autoUserhost()
 {
-    if(KonversationApplication::preferences.getAutoUserhost())
+    if(Preferences::autoUserhost())
     {
         int limit = 5;
 
@@ -2032,14 +2028,14 @@
         return;
     if(m_whoTimer.isActive())
         m_whoTimer.stop();
-    if(KonversationApplication::preferences.getAutoWhoContinuousEnabled())
-        m_whoTimer.start(KonversationApplication::preferences.getAutoWhoContinuousInterval()*1000, true);
+    if(Preferences::autoWhoContinuousEnabled())
+        m_whoTimer.start(Preferences::autoWhoContinuousInterval()*1000, true);
 }
 
 void Channel::autoWho()
 {
     // don't use auto /WHO when the number of nicks is too large, or get banned.
-    if(nicks > KonversationApplication::preferences.getAutoWhoNicksLimit())
+    if(nicks > Preferences::autoWhoNicksLimit())
     {
         scheduleAutoWho();
         return;
@@ -2144,7 +2140,7 @@
         nicknameListView->triggerUpdate();
         if(!m_firstAutoWhoDone)
         {
-            if(KonversationApplication::preferences.getAutoWhoContinuousEnabled())
+            if(Preferences::autoWhoContinuousEnabled())
             {
                 autoWho();
             }
@@ -2156,12 +2152,12 @@
                                                   // virtual
 void Channel::setChannelEncoding(const QString& encoding)
 {
-    KonversationApplication::preferences.setChannelEncoding(m_server->getServerGroup(), getName(), encoding);
+    Preferences::setChannelEncoding(m_server->getServerGroup(), getName(), encoding);
 }
 
 QString Channel::getChannelEncoding()             // virtual
 {
-    return KonversationApplication::preferences.getChannelEncoding(m_server->getServerGroup(), getName());
+    return Preferences::channelEncoding(m_server->getServerGroup(), getName());
 }
 
 QString Channel::getChannelEncodingDefaultDesc()  // virtual
@@ -2234,7 +2230,7 @@
     found.clear();
     QString prefix = "^";
     QString newNick;
-    QString prefixCharacter = KonversationApplication::preferences.getPrefixCharacter();
+    QString prefixCharacter = Preferences::prefixCharacter();
 
     if((pattern.find(QRegExp("^(\\d|\\w)")) != -1) && skipNonAlfaNum)
     {
@@ -2310,8 +2306,8 @@
 {
     if((watched == nicknameListView) && (e->type() == QEvent::Resize) && !splitterChanged && isShown())
     {
-        KonversationApplication::preferences.setChannelSplitterSizes(m_horizSplitter->sizes());
-        KonversationApplication::preferences.setTopicSplitterSizes(m_vertSplitter->sizes());
+        Preferences::setChannelSplitterSizes(m_horizSplitter->sizes());
+        Preferences::setTopicSplitterSizes(m_vertSplitter->sizes());
 
         emit splitterMoved(this);
     }
@@ -2326,8 +2322,8 @@
         return;
     }
 
-    m_horizSplitter->setSizes(KonversationApplication::preferences.channelSplitterSizes());
-    m_vertSplitter->setSizes(KonversationApplication::preferences.topicSplitterSizes());
+    m_horizSplitter->setSizes(Preferences::channelSplitterSizes());
+    m_vertSplitter->setSizes(Preferences::topicSplitterSizes());
 }
 
 #include "channel.moc"
Index: src/eventsrc
===================================================================
--- src/eventsrc	(revision 454905)
+++ src/eventsrc	(working copy)
@@ -3,6 +3,7 @@
 Comment=Konversation
 Comment[hi]=कनवर्सेसन
 Comment[ta]=உரையாடல்
+Comment[xx]=xxKonversationxx
 
 [message]
 Name=New message
@@ -31,8 +32,9 @@
 Name[sr@Latn]=Nova poruka
 Name[sv]=Nytt meddelande
 Name[ta]=புதியச் செய்தி
-Name[tr]=Yeni mesaj
+Name[tr]=Yeni ileti
 Name[uz]=Янги хабар
+Name[xx]=xxNew messagexx
 Name[zh_CN]=新消息
 Comment=New message arrived in a channel
 Comment[br]=Deuet eo ur postel nevez en ur c'hanol
@@ -45,6 +47,7 @@
 Comment[es]=Ha llegado un nuevo mensaje a un canal
 Comment[et]=Kanalile saabus uus sõnum
 Comment[fr]=Un nouveau message est arrivé dans un canal
+Comment[ga]=Tháinig teachtaireacht nua i gcainéal
 Comment[he]=הודעה חדשה הגיעה לערוץ
 Comment[hi]=चैनल में नया संदेश आया
 Comment[hu]=Új üzenet érkezett egy csatornára
@@ -58,7 +61,8 @@
 Comment[sr@Latn]=Nova poruka je stigla u kanalu
 Comment[sv]=Nytt meddelande anlände i en kanal
 Comment[ta]=தடங்களிருந்து புதிய தகவல் வந்தது
-Comment[tr]=Bir kanala yeni mesaj geldi
+Comment[tr]=Kanala yeni ileti geldi
+Comment[xx]=xxNew message arrived in a channelxx
 Comment[zh_CN]=频道中有新消息
 default_presentation=0
 
@@ -86,6 +90,7 @@
 Name[sv]=Något skrivet till smeknamnet
 Name[ta]=பட்டை எழுத்து
 Name[tr]=Rumuz yazıldı
+Name[xx]=xxNick writtenxx
 Name[zh_CN]=昵称写入
 Comment=Someone wrote your nick in a message
 Comment[bs]=Neko je spomenuo vaš nick u poruci
@@ -97,6 +102,7 @@
 Comment[es]=Alguien ha escrito su apodo en un mensaje
 Comment[et]=Keegi kasutas sõnumis sinu hüüdnime
 Comment[fr]=Quelqu'un a écrit votre pseudonyme dans un message
+Comment[ga]=Scríobh duine éigin do leasainm i dteachtaireacht
 Comment[he]=מישהו כתב את הכינוי שלך בהודעה
 Comment[hi]=संदेश मे किसी ने आपका निक लिखा
 Comment[hu]=Valaki leírta az Ön becenevét az egyik csatornán
@@ -109,7 +115,8 @@
 Comment[sr@Latn]=Neko je napisao vaš nadimak u poruci
 Comment[sv]=Någon skrev ett meddelande till ditt smeknamn
 Comment[ta]=உங்கள் வடுத் தகவலில் ஒரு சிலர் எழுதியுள்ளனர் 
-Comment[tr]=Biri sizin rumuzunuza bir mesaj yolladı
+Comment[tr]=Birisi iletisinde sizin rumuzunuzu yazdı
+Comment[xx]=xxSomeone wrote your nick in a messagexx
 default_presentation=0
 
 [nickchange]
@@ -137,7 +144,8 @@
 Name[sr@Latn]=Nadimak je promenjen
 Name[sv]=Smeknamn ändrat
 Name[ta]= மாற்றியப் பட்டை 
-Name[tr]=Rumuz değiştirildi
+Name[tr]=Rumuz değiştildi
+Name[xx]=xxNick changedxx
 Name[zh_CN]=昵称改变
 Comment=Someone changed their nick
 Comment[bs]=Neko je promijenio svoj nick
@@ -161,7 +169,8 @@
 Comment[sr@Latn]=Neko je promenio svoj nadimak
 Comment[sv]=Någon ändrade sitt smeknamn
 Comment[ta]=வடுவை ஒரு சிலர் மாற்றினர் 
-Comment[tr]=Biri onların rumuzunu değiştirdi
+Comment[tr]=Biri rumuzunu değiştirdi
+Comment[xx]=xxSomeone changed their nickxx
 Comment[zh_CN]=有人改变了昵称
 default_presentation=0
 
@@ -177,6 +186,7 @@
 Name[es]=Archivo entrante
 Name[et]=Sisenev fail
 Name[fr]=Fichier entrant
+Name[ga]=Comahd isteach
 Name[he]=קובץ נכנס
 Name[hi]=आनेवाली फाइल
 Name[hu]=Bejövő fájl
@@ -191,6 +201,7 @@
 Name[sv]=Inkommande fil
 Name[ta]=உள்ளீடு கோப்பு
 Name[tr]=Gelen dosya
+Name[xx]=xxIncoming filexx
 Name[zh_CN]=收到的文件
 Comment=Someone wants to transmit a file to you over DCC
 Comment[bs]=Neko želi da vam pošalje datoteku koristeći DCC
@@ -214,7 +225,8 @@
 Comment[sr@Latn]=Neko želi da vam pošalje fajl preko DCC-a
 Comment[sv]=Någon vill skicka en fil till dig via direktkommunikation
 Comment[ta]= ஒரு சிலர் உங்களுக்குக் கோப்பினை வழங்க DCCலிருந்து விரும்புகின்றனர் 
-Comment[tr]=Biri bir dosyayı göndermek için DCC'niz gerekli
+Comment[tr]=Birisi size DCC üzerinden dosya göndermek istiyor
+Comment[xx]=xxSomeone wants to transmit a file to you over DCCxx
 Comment[zh_CN]=有人希望通过 DCC 向你传输文件
 default_prentation=0
 
@@ -243,6 +255,7 @@
 Name[sv]=Någon med smeknamnet gick med i en kanal
 Name[ta]=இணைத்தத் தடப்பட்டை 
 Name[tr]=Rumuz kanala girdi
+Name[xx]=xxNick joined channelxx
 Name[zh_CN]=昵称加入频道
 Comment=New nick joined a channel
 Comment[bs]=Novi nick se pridružio kanalu
@@ -267,6 +280,7 @@
 Comment[sv]=Någon med ett nytt smeknamn gick med i en kanal
 Comment[ta]=புதிய வடுத் தடத்தில் சேர்ந்தது
 Comment[tr]=Kanala yeni bir kişi girdi
+Comment[xx]=xxNew nick joined a channelxx
 Comment[zh_CN]=新昵称加入了频道
 default_presentation=0
 
@@ -295,6 +309,7 @@
 Name[sv]=Någon med smeknamnet lämnade en kanal
 Name[ta]=இடது தடப் பட்டை 
 Name[tr]=Rumuz kanaldan ayrıldı
+Name[xx]=xxNick left channelxx
 Name[zh_CN]=昵称离开频道
 Comment=A nick left a channel
 Comment[bs]=Nick je napustio kanal
@@ -317,7 +332,8 @@
 Comment[sr@Latn]=Nadimak je napustio kanal
 Comment[sv]=Någon med ett smeknamn lämnade en kanal
 Comment[ta]=தடத்தை விட்டு வடு நீங்கியது
-Comment[tr]=Bir rumuz bir kanaldan ayrıldı
+Comment[tr]=Bir rumuz kanaldan ayrıldı
+Comment[xx]=xxA nick left a channelxx
 Comment[zh_CN]=一个昵称离开了频道
 default_presentation=0
 
@@ -332,6 +348,7 @@
 Name[es]=Cambio de modo
 Name[et]=Režiimi muutus
 Name[fr]=Changement de mode
+Name[ga]=Athrú móid
 Name[he]=שינוי מצב
 Name[hi]=मोड बदला
 Name[hu]=Módváltás
@@ -345,7 +362,8 @@
 Name[sr@Latn]=Režim je izmenjen
 Name[sv]=Tillståndsändring
 Name[ta]=பாங்கை மாற்று
-Name[tr]=Biçim değiştir
+Name[tr]=Kip değiştir
+Name[xx]=xxMode changexx
 Name[zh_CN]=模式改变
 Comment=A user or channel mode was changed
 Comment[bs]=Mod korisnika ili kanala je promijenjen
@@ -369,7 +387,8 @@
 Comment[sr@Latn]=Korisnik ili režim kanala je promenjen
 Comment[sv]=Tillståndet för en användare eller kanal ändrades
 Comment[ta]=பயனர் அல்லது தடங்கள் மாறியது
-Comment[tr]=Bir kullanıcı veya kanal biçimi değiştirildi
+Comment[tr]=Bir kullanıcı veya kanal kipi değiştirildi
+Comment[xx]=xxA user or channel mode was changedxx
 Comment[zh_CN]=一个用户或频道模式改变了
 default_presentation=0
 
@@ -397,6 +416,7 @@
 Name[sv]=Underrättelse
 Name[ta]=குறிப்பு
 Name[tr]=Bildirim
+Name[xx]=xxNotifyxx
 Name[zh_CN]=通告
 Comment=A user on your watched nicks list has come online
 Comment[cs]=Uživatel z vašeho seznamu je online
@@ -418,6 +438,7 @@
 Comment[sv]=En användare i din lista med bevakade smeknamn har kopplat upp
 Comment[ta]= உங்கள் வடுகளின் பட்டியலைப் பயனர் கண்காணித்து நிகழ்நிலையில் வருகின்றனர்
 Comment[tr]=İzlenen takma adlar listenizdeki bir kullanıcı bağlandı
+Comment[xx]=xxA user on your watched nicks list has come onlinexx
 Comment[zh_CN]=一名在您的监视昵称列表上的用户已经上线
 default_presentation=0
 
@@ -444,6 +465,7 @@
 Name[sv]=Fråga
 Name[ta]=கேள்வி
 Name[tr]=Sorgu
+Name[xx]=xxQueryxx
 Comment=Someone started a conversation (query) with you
 Comment[cs]=Někdo s vámi zahájil rozhovor (dotaz)
 Comment[da]=Nogen startede en konversation (query) med dig
@@ -462,6 +484,7 @@
 Comment[sv]=Någon startade en konversation med dig (ställde en fråga till dig)
 Comment[ta]=ஒருவர் உங்களுடன் உரையாடலை துவக்கியிருக்கிறார் (கேள்வி)
 Comment[tr]=Birisi sizinle sohbet başlattı
+Comment[xx]=xxSomeone started a conversation (query) with youxx
 default_presentation=0
 
 [kick]
@@ -476,6 +499,8 @@
 Name[pa]=ਠੁੱਢਾ
 Name[sr]=Избачени
 Name[sr@Latn]=Izbačeni
+Name[tr]=Kanaldan at
+Name[xx]=xxKickxx
 Comment=Someone kicked you out of a channel
 Comment[cs]=Někdo vás vykopnul z kanálu
 Comment[da]=Nogen sparkede dig ud af kanalen
@@ -492,6 +517,8 @@
 Comment[sr@Latn]=Neko vas je izbacio sa kanala
 Comment[sv]=Någon sparkade ut dig från en kanal
 Comment[ta]=யாரோ உங்களை வழிமுறையில் இருந்து வெளித்தள்ளிவிட்டார்கள்
+Comment[tr]=Birisi sizi kanaldan attı
+Comment[xx]=xxSomeone kicked you out of a channelxx
 default_presentation=0
 
 [dccChat]
@@ -502,6 +529,7 @@
 Name[es]=Charla Dcc
 Name[et]=DCC vestlus
 Name[fr]=Discussion DCC
+Name[ga]=Comhrá Dcc
 Name[he]=שיחת DCC
 Name[it]=Chat DCC
 Name[nl]=DCC-gesprek
@@ -513,6 +541,8 @@
 Name[sr@Latn]=DCC ćaskanje
 Name[sv]=DCC-chatt
 Name[ta]=Dcc அரட்டை
+Name[tr]=Dcc sohbet
+Name[xx]=xxDcc Chatxx
 Comment=Someone started a dcc chat with you
 Comment[cs]=Někdo si s vámi chce pokecat přes dcc
 Comment[da]=Nogen startede en dcc-chat med dig
@@ -529,4 +559,6 @@
 Comment[sr@Latn]=Neko je započeo DCC ćaskanje sa vama
 Comment[sv]=Någon startade en DCC-chatt med dig
 Comment[ta]=யாரோ உங்களுடன் ஒரு dccஐ துவக்கியுள்ளார்கள்
+Comment[tr]=Birisi sizinle dcc sohbet başlatıı
+Comment[xx]=xxSomeone started a dcc chat with youxx
 default_presentation=0
Index: src/konversation.kcfg
===================================================================
--- src/konversation.kcfg	(revision 454905)
+++ src/konversation.kcfg	(working copy)
@@ -6,8 +6,8 @@
   <include>qfont.h</include>
   <include>qsize.h</include>
   <include>kdialog.h</include>
+  <include>kuser.h</include>
   <kcfgfile name="konversationrc" />
-  <!-- generated by KConfig XTraKtor -->
 
   <group name="Appearance">
     <entry key="TopicSplitterSizes" type="IntList">
@@ -75,6 +75,9 @@
       <!-- konversationapplication.cpp:943 -->
       <!--   config->writeEntry("ShowQuickButtons",preferences.getShowQuickButtons()); -->
     </entry>
+    <entry key="QuickButtons" type="StringList" name="ButtonList">
+      <default code="true">(QStringList() &lt;&lt; "Op,/OP %u%n"&lt;&lt;"DeOp,/DEOP %u%n"&lt;&lt;"WhoIs,/WHOIS %s,%%u%n"&lt;&lt;"Version,/CTCP %s,%%u VERSION%n"&lt;&lt;"Kick,/KICK %u%n"&lt;&lt;"Kick,/KICK %u%n"&lt;&lt;"Ban,/BAN %u%n"&lt;&lt;"Part,/PART %c Leaving...%n"&lt;&lt;"Quit,/QUIT Leaving...%n")</default>
+    </entry>
     <entry key="ShowModeButtons" type="Bool">
       <default>false</default>
       <label></label>
@@ -103,7 +106,7 @@
       <!--   config->writeEntry("CloseButtonsAlignRight",preferences.getCloseButtonsAlignRight()); -->
     </entry>
     <entry key="AutoUserhost" type="Bool">
-      <default></default>
+      <default>false</default>
       <label></label>
       <whatsthis></whatsthis>
       <!-- konversationapplication.cpp:446 -->
@@ -156,7 +159,7 @@
       <!-- konversationapplication.cpp:955 -->
       <!--   config->writeEntry("ParagraphSpacing",preferences.getParagraphSpacing()); -->
     </entry>
-    <entry key="ChannelSplitter" type="IntList">
+    <entry key="ChannelSplitter" type="IntList" name="channelSplitterSizes">
       <default></default>
       <label></label>
       <whatsthis></whatsthis>
@@ -174,17 +177,33 @@
       <!-- konversationapplication.cpp:959 -->
       <!--   config->writeEntry("BackgroundImage",preferences.getBackgroundImageName()); -->
     </entry>
-    <entry key="IRCColors" type="StringList">
-      <default>#ffffff,#000000,#000080,#008000,#ff0000,#a52a2a,#800080,#ff8000,#808000,#00ff00,#008080,#00ffff,#0000ff,#ffc0cb,#a0a0a0,#c0c0c0</default>
-      <label></label>
-      <whatsthis></whatsthis>
-      <!-- konversationapplication.cpp:460 -->
-      <!--   preferences.setIRCColorList(config->readListEntry("IRCColors")); -->
-      <!-- konversationapplication.cpp:960 -->
-      <!--   config->writeEntry("IRCColors", preferences.getIRCColorList()); -->
+    <entry key="WikiURL" type="String">
+      <default>"http://en.wikipedia.org/wiki/"</default>
     </entry>
-    <entry key="FilterColorCodes" type="Bool">
+    <entry key="ExpandWikiUrl" type="Bool">
       <default>false</default>
+    </entry>
+    <entry key="IrcColorCode$(colorNumber)" type="Color">
+      <parameter name="colorNumber" type="UInt" max="15"/>
+      <default param="0">#ffffff</default>
+      <default param="1">#000000</default>
+      <default param="2">#000080</default>
+      <default param="3">#008000</default>
+      <default param="4">#ff0000</default>
+      <default param="5">#a52a2a</default>
+      <default param="6">#800080</default>
+      <default param="7">#ff8000</default>
+      <default param="8">#808000</default>
+      <default param="9">#00ff00</default>
+      <default param="10">#008080</default>
+      <default param="11">#00ffff</default>
+      <default param="12">#0000ff</default>
+      <default param="13">#ffc0cb</default>
+      <default param="14">#a0a0a0</default>
+      <default param="15">#c0c0c0</default>
+    </entry>
+    <entry key="FilterColorCodes" type="Bool" name="FilterColors">
+      <default>false</default>
       <label></label>
       <whatsthis></whatsthis>
       <!-- konversationapplication.cpp:466 -->
@@ -192,16 +211,19 @@
       <!-- konversationapplication.cpp:969 -->
       <!--   config->writeEntry("FilterColorCodes", preferences.getFilterColors()); -->
     </entry>
-    <entry key="NickColors" type="StringList">
-      <default>#E90E7F,#8E55E9,#B30E0E,#18B33C,#58ADB3,#9E54B3,#0FB39A,#3176B3</default>
-      <label></label>
-      <whatsthis></whatsthis>
-      <!-- konversationapplication.cpp:469 -->
-      <!--   preferences.setNickColorList(config->readListEntry("NickColors")); -->
-      <!-- konversationapplication.cpp:961 -->
-      <!--   config->writeEntry("NickColors", preferences.getNickColorList()); -->
+    <entry key="NickColor$(nickNumber)" type="Color">
+      <parameter name="nickNumber" type="UInt" max="9"/>
+      <default param="0">#8E55E9</default>
+      <default param="1">#B30E0E</default>
+      <default param="2">#18B33C</default>
+      <default param="3">#58ADB3</default>
+      <default param="4">#9E54B3</default>
+      <default param="5">#0FB39A</default>
+      <default param="6">#3176B3</default>
+      <default param="7">#000001</default>
     </entry>
-    <entry key="UseColoredNicks" type="Bool">
+
+   <entry key="UseColoredNicks" type="Bool">
       <default>false</default>
       <label></label>
       <whatsthis></whatsthis>
@@ -276,6 +298,11 @@
     </entry>
   </group>
   <group name="General Options">
+    <entry key="CustomVersionReplyEnabled" type="Bool">
+      <default>false</default>
+    </entry>
+    <entry key="CustomVersionReply" type="String">
+    </entry>
     <entry key="CommandChar" type="String">
       <default>/</default>
       <label></label>
@@ -337,7 +364,7 @@
       <!-- konversationapplication.cpp:914 -->
       <!--   config->writeEntry("ShowBackgroundImage",preferences.getShowBackgroundImage()); -->
     </entry>
-    <entry key="NicksOnlineGeometry" type="Size">
+    <entry key="NicksOnlineGeometry" type="Size" name="NicksOnlineSize">
       <default></default>
       <label></label>
       <whatsthis></whatsthis>
@@ -346,7 +373,7 @@
       <!-- konversationapplication.cpp:897 -->
       <!--   config->writeEntry("NicksOnlineGeometry",preferences.getNicksOnlineSize()); -->
     </entry>
-    <entry key="NicknameGeometry" type="Size">
+    <entry key="NicknameGeometry" type="Size" name="NicknameSize">
       <default></default>
       <label></label>
       <whatsthis></whatsthis>
@@ -355,7 +382,7 @@
       <!-- konversationapplication.cpp:898 -->
       <!--   config->writeEntry("NicknameGeometry",preferences.getNicknameSize()); -->
     </entry>
-    <entry key="LogfileReaderGeometry" type="Size">
+    <entry key="LogfileReaderGeometry" type="Size" name="LogfileReaderSize">
       <default code="true">QSize(400, 200)</default>
       <label></label>
       <whatsthis></whatsthis>
@@ -364,7 +391,7 @@
       <!-- konversationapplication.cpp:899 -->
       <!--   config->writeEntry("LogfileReaderGeometry",preferences.getLogfileReaderSize()); -->
     </entry>
-    <entry key="MultilineEditGeometry" type="Size">
+    <entry key="MultilineEditGeometry" type="Size" name="MultilineEditSize">
       <default></default>
       <label></label>
       <whatsthis></whatsthis>
@@ -418,6 +445,13 @@
       <!-- konversationapplication.cpp:907 -->
       <!--   config->writeEntry("AutoWhoContinuousInterval",preferences.getAutoWhoContinuousInterval()); -->
     </entry>
+    <!-- preferencesentry = getShowRealNames -->
+    <!-- type = bool  -->
+    <entry key="ShowRealNames" type="Bool">
+      <default>false</default>
+      <label>&amp;Show real names next to nicknames</label>
+      <whatsthis></whatsthis>
+    </entry>
     <entry key="ChannelDoubleClickAction" type="String">
       <default>/QUERY %u%n</default>
       <label></label>
@@ -463,8 +497,8 @@
       <!-- konversationapplication.cpp:925 -->
       <!--   config->writeEntry("VersionReply",preferences.getVersionReply(TRUE)); -->
     </entry>
-    <entry key="MaximumLag" type="Int">
-      <default>120</default>
+    <entry key="MaximumLag" type="Int" name="MaximumLagTime">
+      <default>180</default>
       <label></label>
       <whatsthis></whatsthis>
       <!-- konversationapplication.cpp:422 -->
@@ -481,7 +515,7 @@
       <!-- konversationapplication.cpp:929 -->
       <!--   config->writeEntry("RedirectServerAndAppMsgToStatusPane", preferences.getRedirectToStatusPane()); -->
     </entry>
-    <entry key="ServerWindowMenuBarStatus" type="Bool">
+    <entry key="ServerWindowMenuBarStatus" type="Bool" name="ShowMenuBar">
       <default>true</default>
       <label></label>
       <whatsthis></whatsthis>
@@ -502,7 +536,7 @@
   </group>
   <group name="Sort Nicknames">
     <entry key="AdminValue" type="Int">
-      <default></default>
+      <default>1</default>
       <label></label>
       <whatsthis></whatsthis>
       <!-- konversationapplication.cpp:486 -->
@@ -513,7 +547,7 @@
       <!--   config->writeEntry("AdminValue",preferences.getAdminValue()); -->
     </entry>
     <entry key="OwnerValue" type="Int">
-      <default></default>
+      <default>2</default>
       <label></label>
       <whatsthis></whatsthis>
       <!-- konversationapplication.cpp:492 -->
@@ -521,8 +555,8 @@
       <!-- konversationapplication.cpp:976 -->
       <!--   config->writeEntry("OwnerValue",preferences.getOwnerValue()); -->
     </entry>
-    <entry key="OperatorValue" type="Int">
-      <default></default>
+    <entry key="OperatorValue" type="Int" name="OpValue">
+      <default>4</default>
       <label></label>
       <whatsthis></whatsthis>
       <!-- konversationapplication.cpp:493 -->
@@ -531,7 +565,7 @@
       <!--   config->writeEntry("OperatorValue",preferences.getOpValue()); -->
     </entry>
     <entry key="HalfopValue" type="Int">
-      <default></default>
+      <default>8</default>
       <label></label>
       <whatsthis></whatsthis>
       <!-- konversationapplication.cpp:494 -->
@@ -540,7 +574,7 @@
       <!--   config->writeEntry("HalfopValue",preferences.getHalfopValue()); -->
     </entry>
     <entry key="VoiceValue" type="Int">
-      <default></default>
+      <default>16</default>
       <label></label>
       <whatsthis></whatsthis>
       <!-- konversationapplication.cpp:495 -->
@@ -549,7 +583,7 @@
       <!--   config->writeEntry("VoiceValue",preferences.getVoiceValue()); -->
     </entry>
     <entry key="AwayValue" type="Int">
-      <default></default>
+      <default>32</default>
       <label></label>
       <whatsthis></whatsthis>
       <!-- konversationapplication.cpp:496 -->
@@ -558,7 +592,7 @@
       <!--   config->writeEntry("AwayValue",preferences.getAwayValue()); -->
     </entry>
     <entry key="NoRightsValue" type="Int">
-      <default></default>
+      <default>32</default>
       <label></label>
       <whatsthis></whatsthis>
       <!-- konversationapplication.cpp:497 -->
@@ -567,7 +601,7 @@
       <!--   config->writeEntry("NoRightsValue",preferences.getNoRightsValue()); -->
     </entry>
     <entry key="SortByStatus" type="Bool">
-      <default></default>
+      <default>false</default>
       <label></label>
       <whatsthis></whatsthis>
       <!-- konversationapplication.cpp:500 -->
@@ -576,7 +610,7 @@
       <!--   config->writeEntry("SortByStatus",preferences.getSortByStatus()); -->
     </entry>
     <entry key="SortCaseInsensitive" type="Bool">
-      <default></default>
+      <default>true</default>
       <label></label>
       <whatsthis></whatsthis>
       <!-- konversationapplication.cpp:501 -->
@@ -587,7 +621,7 @@
   </group>
   <group name="OSD">
     <entry key="UseOSD" type="Bool">
-      <default></default>
+      <default>false</default>
       <label></label>
       <whatsthis></whatsthis>
       <!-- konversationapplication.cpp:562 -->
@@ -595,8 +629,8 @@
       <!-- konversationapplication.cpp:1158 -->
       <!--   config->writeEntry("UseOSD",preferences.getOSDUsage()); -->
     </entry>
-    <entry key="ShowOwnNick" type="Bool">
-      <default></default>
+    <entry key="ShowOwnNick" type="Bool" name="OSDShowOwnNick">
+      <default>false</default>
       <label></label>
       <whatsthis></whatsthis>
       <!-- konversationapplication.cpp:563 -->
@@ -604,8 +638,8 @@
       <!-- konversationapplication.cpp:1160 -->
       <!--   config->writeEntry("ShowOwnNick",preferences.getOSDShowOwnNick()); -->
     </entry>
-    <entry key="ShowChannel" type="Bool">
-      <default></default>
+    <entry key="ShowChannel" type="Bool" name="OSDShowChannel">
+      <default>false</default>
       <label></label>
       <whatsthis></whatsthis>
       <!-- konversationapplication.cpp:564 -->
@@ -613,8 +647,8 @@
       <!-- konversationapplication.cpp:1161 -->
       <!--   config->writeEntry("ShowChannel",preferences.getOSDShowChannel()); -->
     </entry>
-    <entry key="ShowQuery" type="Bool">
-      <default></default>
+    <entry key="ShowQuery" type="Bool" name="OSDShowQuery">
+      <default>false</default>
       <label></label>
       <whatsthis></whatsthis>
       <!-- konversationapplication.cpp:565 -->
@@ -622,8 +656,8 @@
       <!-- konversationapplication.cpp:1162 -->
       <!--   config->writeEntry("ShowQuery",preferences.getOSDShowQuery()); -->
     </entry>
-    <entry key="ShowChannelEvent" type="Bool">
-      <default></default>
+    <entry key="ShowChannelEvent" type="Bool" name="OSDShowChannelEvent">
+      <default>false</default>
       <label></label>
       <whatsthis></whatsthis>
       <!-- konversationapplication.cpp:566 -->
@@ -631,8 +665,8 @@
       <!-- konversationapplication.cpp:1163 -->
       <!--   config->writeEntry("ShowChannelEvent",preferences.getOSDShowChannelEvent()); -->
     </entry>
-    <entry key="OSDFont" type="String">
-      <default></default>
+    <entry key="OSDFont" type="Font">
+      <default code="true">QFont()</default>
       <label></label>
       <whatsthis></whatsthis>
       <!-- konversationapplication.cpp:567 -->
@@ -641,7 +675,7 @@
       <!--   config->writeEntry("OSDFont",preferences.getOSDFont().toString()); -->
     </entry>
     <entry key="OSDUseCustomColors" type="Bool">
-      <default></default>
+      <default>false</default>
       <label></label>
       <whatsthis></whatsthis>
       <!-- konversationapplication.cpp:568 -->
@@ -650,7 +684,7 @@
       <!--   config->writeEntry("OSDUseCustomColors",preferences.getOSDUseCustomColors()); -->
     </entry>
     <entry key="OSDDuration" type="Int">
-      <default></default>
+      <default>3000</default>
       <label></label>
       <whatsthis></whatsthis>
       <!-- konversationapplication.cpp:569 -->
@@ -659,7 +693,7 @@
       <!--   config->writeEntry("OSDDuration",preferences.getOSDDuration()); -->
     </entry>
     <entry key="OSDScreen" type="Int">
-      <default></default>
+      <default>0</default>
       <label></label>
       <whatsthis></whatsthis>
       <!-- konversationapplication.cpp:570 -->
@@ -668,7 +702,7 @@
       <!--   config->writeEntry("OSDScreen",preferences.getOSDScreen()); -->
     </entry>
     <entry key="OSDDrawShadow" type="Bool">
-      <default></default>
+      <default>false</default>
       <label></label>
       <whatsthis></whatsthis>
       <!-- konversationapplication.cpp:571 -->
@@ -676,8 +710,8 @@
       <!-- konversationapplication.cpp:1169 -->
       <!--   config->writeEntry("OSDDrawShadow",preferences.getOSDDrawShadow()); -->
     </entry>
-    <entry key="OffsetX" type="Int">
-      <default></default>
+    <entry key="OffsetX" type="Int" name="OSDOffsetX">
+      <default>30</default>
       <label></label>
       <whatsthis></whatsthis>
       <!-- konversationapplication.cpp:572 -->
@@ -685,8 +719,8 @@
       <!-- konversationapplication.cpp:1170 -->
       <!--   config->writeEntry("OffsetX",preferences.getOSDOffsetX()); -->
     </entry>
-    <entry key="OffsetY" type="Int">
-      <default></default>
+    <entry key="OffsetY" type="Int" name="OSDOffsetY">
+      <default>50</default>
       <label></label>
       <whatsthis></whatsthis>
       <!-- konversationapplication.cpp:573 -->
@@ -694,8 +728,8 @@
       <!-- konversationapplication.cpp:1171 -->
       <!--   config->writeEntry("OffsetY",preferences.getOSDOffsetY()); -->
     </entry>
-    <entry key="Alignment" type="Int">
-      <default></default>
+    <entry key="Alignment" type="Int" name="OSDAlignment">
+      <default>0</default>
       <label></label>
       <whatsthis></whatsthis>
       <!-- konversationapplication.cpp:574 -->
@@ -704,7 +738,7 @@
       <!--   config->writeEntry("Alignment",preferences.getOSDAlignment()); -->
     </entry>
     <entry key="OSDTextColor" type="String">
-      <default></default>
+      <default>#ffffff</default>
       <label></label>
       <whatsthis></whatsthis>
       <!-- konversationapplication.cpp:588 -->
@@ -724,7 +758,7 @@
   </group>
   <group name="Notify List">
     <entry key="NotifyDelay" type="Int">
-      <default></default>
+      <default>20</default>
       <label></label>
       <whatsthis></whatsthis>
       <!-- konversationapplication.cpp:702 -->
@@ -733,7 +767,7 @@
       <!--   config->writeEntry("NotifyDelay",preferences.getNotifyDelay()); -->
     </entry>
     <entry key="UseNotify" type="Bool">
-      <default></default>
+      <default>true</default>
       <label></label>
       <whatsthis></whatsthis>
       <!-- konversationapplication.cpp:703 -->
@@ -741,19 +775,20 @@
       <!-- konversationapplication.cpp:1021 -->
       <!--   config->writeEntry("UseNotify",preferences.getUseNotify()); -->
     </entry>
-    <entry key="NotifyList" type="String">
+<!--      I've taken the below out until it can be fixed... right??
+<entry key="NotifyList" type="String" name="NotifyString">
       <default></default>
       <label></label>
-      <whatsthis></whatsthis>
+      <whatsthis></whatsthis> -->
       <!-- konversationapplication.cpp:704 -->
       <!-- //  QString notifyList=config->readEntry("NotifyList",QString::null); -->
       <!-- konversationapplication.cpp:721 -->
       <!--     QString oldNotifyNicknames = config->readEntry("NotifyList", QString::null); -->
       <!-- konversationapplication.cpp:1022 -->
       <!-- //  config->writeEntry("NotifyList",preferences.getNotifyString()); -->
-    </entry>
-    <entry key="OnStartup" type="Bool">
-      <default></default>
+    <!-- </entry> -->
+    <entry key="OnStartup" type="Bool" name="OpenWatchedNicksAtStartup">
+      <default>false</default>
       <label></label>
       <whatsthis></whatsthis>
       <!-- konversationapplication.cpp:706 -->
@@ -773,7 +808,7 @@
       <!--   config->writeEntry("HighlightSoundsEnabled", preferences.getHighlightSoundEnabled()); -->
     </entry>
     <entry key="HighlightNick" type="Bool">
-      <default></default>
+      <default>true</default>
       <label></label>
       <whatsthis></whatsthis>
       <!-- konversationapplication.cpp:760 -->
@@ -782,7 +817,7 @@
       <!--   config->writeEntry("HighlightNick",preferences.getHighlightNick()); -->
     </entry>
     <entry key="HighlightNickColor" type="String">
-      <default></default>
+      <default>#ff0000</default>
       <label></label>
       <whatsthis></whatsthis>
       <!-- konversationapplication.cpp:761 -->
@@ -791,7 +826,7 @@
       <!--   config->writeEntry("HighlightNickColor",preferences.getHighlightNickColor().name().mid(1)); -->
     </entry>
     <entry key="HighlightOwnLines" type="Bool">
-      <default></default>
+      <default>false</default>
       <label></label>
       <whatsthis></whatsthis>
       <!-- konversationapplication.cpp:767 -->
@@ -799,8 +834,8 @@
       <!-- konversationapplication.cpp:1133 -->
       <!--   config->writeEntry("HighlightOwnLines",preferences.getHighlightOwnLines()); -->
     </entry>
-    <entry key="HighlightOwnLinesColor" type="String">
-      <default></default>
+    <entry key="HighlightOwnLinesColor" type="Color">
+      <default>#ff0000</default>
       <label></label>
       <whatsthis></whatsthis>
       <!-- konversationapplication.cpp:768 -->
@@ -828,7 +863,7 @@
     </entry>
   </group>
   <group name="Nick Completion">
-    <entry key="Mode" type="Int">
+    <entry key="Mode" type="Int" name="NickCompletionMode">
       <default></default>
       <label></label>
       <whatsthis></whatsthis>
@@ -837,8 +872,8 @@
       <!-- konversationapplication.cpp:1193 -->
       <!--   config->writeEntry("Mode", preferences.getNickCompletionMode()); -->
     </entry>
-    <entry key="SuffixStart" type="String">
-      <default></default>
+    <entry key="SuffixStart" type="String" name="NickCompleteSuffixStart">
+      <default>: </default>
       <label></label>
       <whatsthis></whatsthis>
       <!-- konversationapplication.cpp:818 -->
@@ -846,8 +881,8 @@
       <!-- konversationapplication.cpp:1194 -->
       <!--   config->writeEntry("SuffixStart",preferences.getNickCompleteSuffixStart()); -->
     </entry>
-    <entry key="SuffixMiddle" type="String">
-      <default></default>
+    <entry key="SuffixMiddle" type="String" name="NickCompleteSuffixMiddle">
+      <default> </default>
       <label></label>
       <whatsthis></whatsthis>
       <!-- konversationapplication.cpp:819 -->
@@ -862,7 +897,7 @@
       <!-- konversationapplication.cpp:820 -->
       <!--   preferences.setPrefixCharacter(config->readEntry("PrefixCharacter",preferences.getPrefixCharacter())); -->
     </entry>
-    <entry key="CaseSensitive" type="Bool">
+    <entry key="CaseSensitive" type="Bool" name="NickCompletionCaseSensitive">
       <default></default>
       <label></label>
       <whatsthis></whatsthis>
@@ -873,7 +908,7 @@
     </entry>
   </group>
   <group name="DCC Settings">
-    <entry key="BufferSize" type="Int">
+    <entry key="BufferSize" type="Int" name="DccBufferSize">
       <default></default>
       <label></label>
       <whatsthis></whatsthis>
@@ -882,8 +917,8 @@
       <!-- konversationapplication.cpp:1217 -->
       <!-- 	config->writeEntry("BufferSize",preferences.getDccBufferSize()); -->
     </entry>
-    <entry key="MethodToGetOwnIp" type="Int">
-      <default></default>
+    <entry key="MethodToGetOwnIp" type="Int" name="DccMethodToGetOwnIp">
+      <default>1</default>
       <label></label>
       <whatsthis></whatsthis>
       <!-- konversationapplication.cpp:827 -->
@@ -891,8 +926,8 @@
       <!-- konversationapplication.cpp:1207 -->
       <!-- 	config->writeEntry("MethodToGetOwnIp",preferences.getDccMethodToGetOwnIp()); -->
     </entry>
-    <entry key="SpecificOwnIp" type="String">
-      <default></default>
+    <entry key="SpecificOwnIp" type="String" name="DccSpecificOwnIp">
+      <default>0.0.0.0</default>
       <label></label>
       <whatsthis></whatsthis>
       <!-- konversationapplication.cpp:828 -->
@@ -900,8 +935,8 @@
       <!-- konversationapplication.cpp:1208 -->
       <!--   config->writeEntry("SpecificOwnIp",preferences.getDccSpecificOwnIp()); -->
     </entry>
-    <entry key="SpecificSendPorts" type="Bool">
-      <default></default>
+    <entry key="SpecificSendPorts" type="Bool" name="DccSpecificSendPorts">
+      <default>false</default>
       <label></label>
       <whatsthis></whatsthis>
       <!-- konversationapplication.cpp:829 -->
@@ -909,8 +944,8 @@
       <!-- konversationapplication.cpp:1210 -->
       <!-- 	config->writeEntry("SpecificSendPorts",preferences.getDccSpecificSendPorts()); -->
     </entry>
-    <entry key="SendPortsFirst" type="Int">
-      <default></default>
+    <entry key="SendPortsFirst" type="Int"  name="DccSendPortsFirst">
+      <default>0</default>
       <label></label>
       <whatsthis></whatsthis>
       <!-- konversationapplication.cpp:830 -->
@@ -918,8 +953,8 @@
       <!-- konversationapplication.cpp:1211 -->
       <!--   config->writeEntry("SendPortsFirst",preferences.getDccSendPortsFirst()); -->
     </entry>
-    <entry key="SendPortsLast" type="Int">
-      <default></default>
+    <entry key="SendPortsLast" type="Int" name="DccSendPortsLast">
+      <default>0</default>
       <label></label>
       <whatsthis></whatsthis>
       <!-- konversationapplication.cpp:831 -->
@@ -927,8 +962,8 @@
       <!-- konversationapplication.cpp:1212 -->
       <!--   config->writeEntry("SendPortsLast",preferences.getDccSendPortsLast()); -->
     </entry>
-    <entry key="SpecificChatPorts" type="Bool">
-      <default></default>
+    <entry key="SpecificChatPorts" type="Bool" name="DccSpecificChatPorts">
+      <default>false</default>
       <label></label>
       <whatsthis></whatsthis>
       <!-- konversationapplication.cpp:832 -->
@@ -936,8 +971,8 @@
       <!-- konversationapplication.cpp:1213 -->
       <!--   config->writeEntry("SpecificChatPorts",preferences.getDccSpecificChatPorts()); -->
     </entry>
-    <entry key="ChatPortsFirst" type="Int">
-      <default></default>
+    <entry key="ChatPortsFirst" type="Int" name="DccChatPortsFirst">
+      <default>0</default>
       <label></label>
       <whatsthis></whatsthis>
       <!-- konversationapplication.cpp:833 -->
@@ -945,8 +980,8 @@
       <!-- konversationapplication.cpp:1214 -->
       <!--   config->writeEntry("ChatPortsFirst",preferences.getDccChatPortsFirst()); -->
     </entry>
-    <entry key="ChatPortsLast" type="Int">
-      <default></default>
+    <entry key="ChatPortsLast" type="Int" name="DccChatPortsLast">
+      <default>0</default>
       <label></label>
       <whatsthis></whatsthis>
       <!-- konversationapplication.cpp:834 -->
@@ -954,8 +989,8 @@
       <!-- konversationapplication.cpp:1215 -->
       <!--   config->writeEntry("ChatPortsLast",preferences.getDccChatPortsLast()); -->
     </entry>
-    <entry key="AddPartner" type="Bool">
-      <default></default>
+    <entry key="AddPartner" type="Bool" name="DccAddPartner">
+      <default>false</default>
       <label></label>
       <whatsthis></whatsthis>
       <!-- konversationapplication.cpp:835 -->
@@ -963,8 +998,8 @@
       <!-- konversationapplication.cpp:1200 -->
       <!--   config->writeEntry("AddPartner",preferences.getDccAddPartner()); -->
     </entry>
-    <entry key="CreateFolder" type="Bool">
-      <default></default>
+    <entry key="CreateFolder" type="Bool" name="DccCreateFolder">
+      <default>false</default>
       <label></label>
       <whatsthis></whatsthis>
       <!-- konversationapplication.cpp:836 -->
@@ -972,8 +1007,8 @@
       <!-- konversationapplication.cpp:1201 -->
       <!--   config->writeEntry("CreateFolder",preferences.getDccCreateFolder()); -->
     </entry>
-    <entry key="AutoGet" type="Bool">
-      <default></default>
+    <entry key="AutoGet" type="Bool" name="DccAutoGet">
+      <default>false</default>
       <label></label>
       <whatsthis></whatsthis>
       <!-- konversationapplication.cpp:837 -->
@@ -981,7 +1016,7 @@
       <!-- konversationapplication.cpp:1202 -->
       <!--   config->writeEntry("AutoGet",preferences.getDccAutoGet()); -->
     </entry>
-    <entry key="AutoResume" type="Bool">
+    <entry key="AutoResume" type="Bool" name="DccAutoResume">
       <default></default>
       <label></label>
       <whatsthis></whatsthis>
@@ -990,8 +1025,8 @@
       <!-- konversationapplication.cpp:1203 -->
       <!--   config->writeEntry("AutoResume",preferences.getDccAutoResume()); -->
     </entry>
-    <entry key="FastSend" type="Bool">
-      <default></default>
+    <entry key="FastSend" type="Bool" name="DccFastSend">
+      <default>true</default>
       <label></label>
       <whatsthis></whatsthis>
       <!-- konversationapplication.cpp:839 -->
@@ -999,8 +1034,8 @@
       <!-- konversationapplication.cpp:1218 -->
       <!--   config->writeEntry("FastSend",preferences.getDccFastSend()); -->
     </entry>
-    <entry key="SendTimeout" type="Int">
-      <default></default>
+    <entry key="SendTimeout" type="Int" name="DccSendTimeout">
+      <default>180</default>
       <label></label>
       <whatsthis></whatsthis>
       <!-- konversationapplication.cpp:840 -->
@@ -1008,6 +1043,13 @@
       <!-- konversationapplication.cpp:1205 -->
       <!--   config->writeEntry("SendTimeout",preferences.getDccSendTimeout()); -->
     </entry>
+    <entry key="IPv4Fallback" type="Bool">
+      <default>false</default>
+    </entry>
+    <entry key="IPv4FallbackIface" type="String">
+      <default>eth0</default>
+    </entry>
+
   </group>
   <group name="Path Settings">
     <entry key="LogfilePath" type="Path">
@@ -1020,7 +1062,7 @@
       <!--   config->writePathEntry("LogfilePath",preferences.getLogPath()); -->
     </entry>
     <entry key="DccPath" type="Path">
-      <default></default>
+      <default code="true">KUser(KUser::UseRealUserID).homeDir()+"/dccrecv"</default>
       <label></label>
       <whatsthis></whatsthis>
       <!-- konversationapplication.cpp:845 -->
@@ -1057,17 +1099,24 @@
       <!-- konversationapplication.cpp:1230 -->
       <!--   config->writeEntry("LogFollowsNick",preferences.getLogFollowsNick()); -->
     </entry>
-    <entry key="TabPlacement" type="Int">
-      <default></default>
+    <entry key="AddHostnameToLog" type="Bool">
+      <default>false</default>
+    </entry>
+    <entry key="TabPlacement" type="Enum">
       <label></label>
       <whatsthis></whatsthis>
+      <choices>
+        <choice name="Bottom"/>
+        <choice name="Top"/>
+      </choices>
+      <default>Bottom</default>
       <!-- konversationapplication.cpp:854 -->
       <!--   preferences.setTabPlacement(static_cast<Preferences::TabPlacement>(config->readNumEntry("TabPlacement",static_cast<int>(preferences.getTabPlacement())))); -->
       <!-- konversationapplication.cpp:1232 -->
       <!--   config->writeEntry("TabPlacement",static_cast<int>(preferences.getTabPlacement())); -->
     </entry>
     <entry key="BlinkingTabs" type="Bool">
-      <default></default>
+      <default>false</default>
       <label></label>
       <whatsthis></whatsthis>
       <!-- konversationapplication.cpp:855 -->
@@ -1075,8 +1124,11 @@
       <!-- konversationapplication.cpp:1233 -->
       <!--   config->writeEntry("BlinkingTabs",preferences.getBlinkingTabs()); -->
     </entry>
+    <entry key="UseClickableNicks" type="Bool">
+      <default>true</default>
+    </entry>
     <entry key="BringToFront" type="Bool">
-      <default></default>
+      <default>false</default>
       <label></label>
       <whatsthis></whatsthis>
       <!-- konversationapplication.cpp:856 -->
@@ -1085,7 +1137,7 @@
       <!--   config->writeEntry("BringToFront",preferences.getBringToFront()); -->
     </entry>
     <entry key="HideUnimportantEvents" type="Bool">
-      <default></default>
+      <default>false</default>
       <label></label>
       <whatsthis></whatsthis>
       <!-- konversationapplication.cpp:858 -->
@@ -1103,7 +1155,7 @@
       <!--   config->writeEntry("DisableExpansion",preferences.getDisableExpansion()); -->
     </entry>
     <entry key="AutoReconnect" type="Bool">
-      <default></default>
+      <default>true</default>
       <label></label>
       <whatsthis></whatsthis>
       <!-- konversationapplication.cpp:861 -->
@@ -1112,7 +1164,7 @@
       <!--   config->writeEntry("AutoReconnect",preferences.getAutoReconnect()); -->
     </entry>
     <entry key="ReconnectCount" type="UInt">
-      <default></default>
+      <default>10</default>
       <label></label>
       <whatsthis></whatsthis>
       <!-- konversationapplication.cpp:916 -->
@@ -1121,7 +1173,7 @@
       <!--   config->writeEntry("ReconnectCount",preferences.getReconnectCount()); -->
     </entry>
     <entry key="AutoRejoin" type="Bool">
-      <default></default>
+      <default>true</default>
       <label></label>
       <whatsthis></whatsthis>
       <!-- konversationapplication.cpp:862 -->
@@ -1130,7 +1182,7 @@
       <!--   config->writeEntry("AutoRejoin",preferences.getAutoRejoin()); -->
     </entry>
     <entry key="AutojoinOnInvite" type="Bool">
-      <default></default>
+      <default>false</default>
       <label></label>
       <whatsthis></whatsthis>
       <!-- konversationapplication.cpp:863 -->
@@ -1139,7 +1191,7 @@
       <!--   config->writeEntry("AutojoinOnInvite",preferences.getAutojoinOnInvite()); -->
     </entry>
     <entry key="FixedMOTD" type="Bool">
-      <default></default>
+      <default>true</default>
       <label></label>
       <whatsthis></whatsthis>
       <!-- konversationapplication.cpp:865 -->
@@ -1148,7 +1200,7 @@
       <!--   config->writeEntry("FixedMOTD",preferences.getFixedMOTD()); -->
     </entry>
     <entry key="ShowServerList" type="Bool">
-      <default></default>
+      <default>true</default>
       <label></label>
       <whatsthis></whatsthis>
       <!-- konversationapplication.cpp:866 -->
@@ -1156,8 +1208,8 @@
       <!-- konversationapplication.cpp:1244 -->
       <!--   config->writeEntry("ShowServerList",preferences.getShowServerList()); -->
     </entry>
-    <entry key="InputFieldsBackgroundColor" type="Bool">
-      <default></default>
+    <entry key="InputFieldsBackgroundColor" type="Bool" >
+      <default>true</default>
       <label></label>
       <whatsthis></whatsthis>
       <!-- konversationapplication.cpp:868 -->
@@ -1167,8 +1219,8 @@
     </entry>
   </group>
   <group name="Web Browser Settings">
-    <entry key="UseKdeDefault" type="Bool">
-      <default></default>
+    <entry key="UseKdeDefault" type="Bool" name="WebBrowserUseKdeDefault">
+      <default>true</default>
       <label></label>
       <whatsthis></whatsthis>
       <!-- konversationapplication.cpp:872 -->
@@ -1177,7 +1229,7 @@
       <!--   config->writeEntry("UseKdeDefault", preferences.getWebBrowserUseKdeDefault()); -->
     </entry>
     <entry key="WebBrowserCmd" type="String">
-      <default></default>
+      <default>mozilla \'%u\'</default>
       <label></label>
       <whatsthis></whatsthis>
       <!-- konversationapplication.cpp:873 -->
@@ -1188,7 +1240,7 @@
   </group>
   <group name="Themes">
     <entry key="IconTheme" type="String">
-      <default></default>
+      <default>default</default>
       <label></label>
       <whatsthis></whatsthis>
       <!-- konversationapplication.cpp:885 -->
@@ -1236,4 +1288,34 @@
       <!--     config->writeEntry("Size", size()); -->
     </entry>
   </group>
+  <group name="Message Text Colors">
+    <entry name="$(colorName)Color" type="Color" key="$(colorName)">
+      <parameter name="colorName" type="Enum">
+        <values>
+          <value>ActionMessage</value>
+          <value>BacklogMessage</value>
+          <value>ChannelMessage</value>
+          <value>CommandMessage</value>
+          <value>QueryMessage</value>
+          <value>ServerMessage</value>
+          <value>Time</value>
+          <value>Action</value>
+          <value>TextViewBackground</value>
+          <value>AlternateBackground</value>
+          <value>Hyperlink</value>
+        </values>
+      </parameter>
+      <default param="ActionMessage">#0000ff</default>
+      <default param="BacklogMessage">#aaaaaa</default>
+      <default param="ChannelMessage">000000</default>
+      <default param="CommandMessage">960096</default>
+      <default param="QueryMessage">0000ff</default>
+      <default param="ServerMessage">91640a</default>
+      <default param="Time">709070</default>
+      <default param="Action">0000ff</default>
+      <default param="TextViewBackground">ffffff</default>
+      <default param="AlternateBackground">ffffff</default>
+      <default param="Hyperlink">ffffff</default>
+    </entry>
+  </group>
 </kcfg>
Index: src/konversationapplication.h
===================================================================
--- src/konversationapplication.h	(revision 454905)
+++ src/konversationapplication.h	(working copy)
@@ -29,7 +29,6 @@
 class KonversationMainWindow;
 class KonvDCOP;
 class Server;
-class PrefsDialog;
 class QuickConnectDialog;
 class Images;
 
@@ -57,8 +56,6 @@
     Q_OBJECT
 
         public:
-        static Preferences preferences;
-
         /** This function in general shouldn't be called, because in the future there
          *  may be multiple windows.
          *  However, in some situations we have messageboxes that aren't targeted for
@@ -119,7 +116,6 @@
 
         // Nick color stuff
         uint& getColorOffset();
-        QStringList& getColorList();
         QMap<QString,QString>& getColorMap();
 
         // Intelligent nick completion stuff aka A.W.E.S.O.M.E-O 4000 --cartman
@@ -132,7 +128,7 @@
         void delayedConnectToServer(const QString& hostName,
             const QString& port = "6667",
             const QString& channel="",
-            const QString& nick = KonversationApplication::preferences.getNickname(0),
+            const QString& nick = Preferences::nickname(0),
             const QString& password="",
             const bool& useSSL=FALSE
             );
@@ -147,7 +143,7 @@
         void quickConnectToServer(const QString& hostName,
             const QString& port = "6667",
             const QString& channel="",
-            const QString& nick = KonversationApplication::preferences.getNickname(0),
+            const QString& nick = Preferences::nickname(0),
             const QString& password="",
             const bool& useSSL=FALSE
             );
@@ -155,8 +151,6 @@
         void saveOptions(bool updateGUI=true);
         void quitKonversation();
 
-        void closePrefsDialog();
-
         void deleteUrl(const QString& who,const QString& url);
         void clearUrlList();
         /** Send a message to all servers that you are away. */
@@ -185,7 +179,6 @@
     private:
         QPtrList<Server> serverList;
         QStringList urlList;
-        PrefsDialog* prefsDialog;
         KonvDCOP* dcopObject;
         KonvIdentDCOP* identDCOP;
         KonversationMainWindow* mainWindow;
Index: src/linkaddressbook/Makefile.am
===================================================================
--- src/linkaddressbook/Makefile.am	(revision 454905)
+++ src/linkaddressbook/Makefile.am	(working copy)
@@ -9,4 +9,7 @@
 kimiface_DIR = $(kde_includes)
 liblinkaddressbookui_la_LDFLAGS = $(all_libraries) -no-undefined
 liblinkaddressbookui_la_LIBADD = $(COMPAT_LIBS) $(LIB_KDEUI) $(LIB_KABC)
+
+INCLUDES=-I..
+
 # vim: set noet:
Index: images/nickicons/square/index.desktop
===================================================================
--- images/nickicons/square/index.desktop	(revision 454905)
+++ images/nickicons/square/index.desktop	(working copy)
@@ -1,6 +1,7 @@
 [Desktop Entry]
 Type=Theme
 Name=Square Theme
+Name[br]=Giz karrez
 Name[cs]=Square téma
 Name[da]=Square tema
 Name[es]=Teme Square
@@ -17,6 +18,8 @@
 Name[sr@Latn]=Kvadratna tema
 Name[sv]=Kvadratiskt tema
 Name[ta]=சதுர பொருள்
+Name[tr]=Kare Teması
+Name[xx]=xxSquare Themexx
 Comment="SQUARE" by Kenichiro Takahashi
 Comment[ca]="SQUARE" per Kenichiro Takahashi
 Comment[cs]="SQUARE" od Kenichiro Takahashi
@@ -35,4 +38,6 @@
 Comment[sr@Latn]=„Kvadrat“ od Keničira Takahašija (Kenichiro Takahashi)
 Comment[sv]="KVADRATISK" av Kenichiro Takahashi
 Comment[ta]="SQUARE" கெனிசிரோ டகாஹாஷி
+Comment[tr]=Kenichiro Takahashi tarafından "KARE"
+Comment[xx]=xx"SQUARE" by Kenichiro Takahashixx
 Encoding=UTF-8
Index: images/nickicons/classic/index.desktop
===================================================================
--- images/nickicons/classic/index.desktop	(revision 454905)
+++ images/nickicons/classic/index.desktop	(working copy)
@@ -20,6 +20,8 @@
 Name[sr@Latn]=Klasična tema
 Name[sv]=Klassiskt tema
 Name[ta]=சிறந்த தலைப்பு
+Name[tr]=Klasik tema
+Name[xx]=xxClassic Themexx
 Comment="LED" by Dario Abatianni
 Comment[ca]="LED" per Dario Abatianni
 Comment[cs]=LED od Daria Abatianniho
@@ -38,4 +40,6 @@
 Comment[sr@Latn]=„LED“ od Darija Abatijanija (Dario Abatianni)
 Comment[sv]="Lampor" av Dario Abatianni
 Comment[ta]="LED" டைரியோ அபடியானி
+Comment[tr]=Dario Abatianni tarafından "LED"
+Comment[xx]=xx"LED" by Dario Abatiannixx
 Encoding=UTF-8
Index: images/nickicons/smiling/index.desktop
===================================================================
--- images/nickicons/smiling/index.desktop	(revision 454905)
+++ images/nickicons/smiling/index.desktop	(working copy)
@@ -1,6 +1,7 @@
 [Desktop Entry]
 Type=Theme
 Name=Smiling Theme
+Name[br]=Giz Mousc'hoarzh
 Name[cs]=Smajlíkové téma
 Name[da]=Smilende tema
 Name[es]=Tema Smiling
@@ -18,6 +19,8 @@
 Name[sr@Latn]=Nasmejana tema
 Name[sv]=Leende tema
 Name[ta]=சிரிக்கின்ற பொருள்
+Name[tr]=Gülümseyen Tema
+Name[xx]=xxSmiling Themexx
 Comment="Smiling" stolen from Kopete by John Tapsell
 Comment[cs]=Smajlíkové téma od Johna Tapsella převzato z Kopete
 Comment[da]="Smilende" stjålet fra Kopete af John Tapsell
@@ -35,4 +38,6 @@
 Comment[sr@Latn]=„Nasmejano“ ukrao iz Kopete-a Džon Tapsel (John Tapsell)
 Comment[sv]="Leende" stulen från Kopete av John Tapsell
 Comment[ta]=Kopeteல் இருந்து "Smiling" ஸ்டோலன் ஜான் டாப்செல்
+Comment[tr]=John Tapsell tarafından Kopete'in "Gülümseyen"i
+Comment[xx]=xx"Smiling" stolen from Kopete by John Tapsellxx
 Encoding=UTF-8
Index: images/nickicons/default/index.desktop
===================================================================
--- images/nickicons/default/index.desktop	(revision 454905)
+++ images/nickicons/default/index.desktop	(working copy)
@@ -21,6 +21,8 @@
 Name[sr@Latn]=Podrazumevana tema
 Name[sv]=Standardtema
 Name[ta]=முன்னிருப்பு தலைப்பு
+Name[tr]=Öntanımlı tema
+Name[xx]=xxDefault Themexx
 Comment="Simplistic" by Shintaro Matsuoka
 Comment[ca]="Simplistic" per Shintaro Matsuoka
 Comment[cs]=Jednoduché téma od Shintara Matsuoky
@@ -39,5 +41,7 @@
 Comment[sr@Latn]=„Jednostavno“ od Šintara Macuoke (Shintaro Matsuoka)
 Comment[sv]="Förenklat" av Shintaro Matsuoka
 Comment[ta]="Simplistic" ஷிண்டாரோ மாட்சொக்கா
+Comment[tr]=Shintaro Matsuoka tarafından "Basitlik"
+Comment[xx]=xx"Simplistic" by Shintaro Matsuokaxx
 Encoding=UTF-8
 
Index: images/nickicons/christmas/index.desktop
===================================================================
--- images/nickicons/christmas/index.desktop	(revision 454905)
+++ images/nickicons/christmas/index.desktop	(working copy)
@@ -18,6 +18,8 @@
 Name[sr@Latn]=Božićna tema
 Name[sv]=Jultema
 Name[ta]=கிறிஸ்துமஸ் பொருள்
+Name[tr]=Noel Teması
+Name[xx]=xxChristmas Themexx
 Comment="Christmas Theme" by Kenichiro Takahashi
 Comment[cs]=Vánoční téma od Kenichiro Takahashi
 Comment[da]="Juletema" af Kenichiro Takahashi
@@ -35,5 +37,7 @@
 Comment[sr@Latn]=„Božićna tema“ od Keničira Takahašija (Kenichiro Takahashi)
 Comment[sv]="Jultema" av Kenichiro Takahashi
 Comment[ta]="Christmas Theme" கெனிசிரோ டகாஹாஷி
+Comment[tr]=Kenichiro Takahashi tarafından "Noel Teması"
+Comment[xx]=xx"Christmas Theme" by Kenichiro Takahashixx
 Encoding=UTF-8
 
Index: images/nickicons/alternative/index.desktop
===================================================================
--- images/nickicons/alternative/index.desktop	(revision 454905)
+++ images/nickicons/alternative/index.desktop	(working copy)
@@ -1,6 +1,7 @@
 [Desktop Entry]
 Type=Theme
 Name=Big Bullets
+Name[br]=Melloù bras
 Name[cs]=Velké odrážky
 Name[fr]=Grosse balles
 Name[he]=עיגולים גדולים
@@ -10,6 +11,8 @@
 Name[sr@Latn]=Veliki predznaci
 Name[sv]=Stora punkter
 Name[ta]=பெரிய புள்ளிகள்
+Name[tr]=Büyük Mermiler
+Name[xx]=xxBig Bulletsxx
 Comment="Big Bullets" by Dario Abatianni
 Comment[ca]="Big Bullets" per Dario Abatianni
 Comment[cs]=Velké odrážky od Daria Abatianniho
@@ -28,5 +31,7 @@
 Comment[sr@Latn]=„Veliki predznaci“ od Darija Abatijanija (Dario Abatianni)
 Comment[sv]="Stora punkter" av Dario Abatianni
 Comment[ta]="Big Bullets" டாரியோ அபடையானி
+Comment[tr]=Dario Abatianni tarafından "Büyük Mermiler"
+Comment[xx]=xx"Big Bullets" by Dario Abatiannixx
 Encoding=UTF-8
 
